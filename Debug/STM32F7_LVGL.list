
STM32F7_LVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c0c  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ac0  08008ac0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008ac0  08008ac0  00018ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac8  08008ac8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac8  08008ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008acc  08008acc  00018acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000090  08008b60  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08008b60  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018447  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003885  00000000  00000000  00038507  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001300  00000000  00000000  0003bd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003d090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000293b6  00000000  00000000  0003e198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013334  00000000  00000000  0006754e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef2e2  00000000  00000000  0007a882  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00169b64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  00169be0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e9c 	.word	0x08006e9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08006e9c 	.word	0x08006e9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <GT811_Init>:
  *         from MCU to GT811 : ie I2C channel initialization (if required).
  * @retval None
  */

uint8_t GT811_Init(void)
{  
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	; 0x70
 80005b4:	af00      	add	r7, sp, #0
	I2C_Init();
 80005b6:	f000 f91f 	bl	80007f8 <I2C_Init>
	
	/* reset GT811 */
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c0:	481a      	ldr	r0, [pc, #104]	; (800062c <GT811_Init+0x7c>)
 80005c2:	f003 fa1f 	bl	8003a04 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80005c6:	20c8      	movs	r0, #200	; 0xc8
 80005c8:	f002 fb3c 	bl	8002c44 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4816      	ldr	r0, [pc, #88]	; (800062c <GT811_Init+0x7c>)
 80005d4:	f003 fa16 	bl	8003a04 <HAL_GPIO_WritePin>
	HAL_Delay(200);	
 80005d8:	20c8      	movs	r0, #200	; 0xc8
 80005da:	f002 fb33 	bl	8002c44 <HAL_Delay>
	
	/* if Version is correct, send the configuration parameters */
	if(GT811_ReadID() == GT811_VERSION_VALUE)
 80005de:	f000 f829 	bl	8000634 <GT811_ReadID>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	f242 0310 	movw	r3, #8208	; 0x2010
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d119      	bne.n	8000622 <GT811_Init+0x72>
	{
		/* touch screen configuration parameter (touch screen manufacturers provide) */
		uint8_t GTP_CFG_DATA[]=
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <GT811_Init+0x80>)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4611      	mov	r1, r2
 80005f4:	226a      	movs	r2, #106	; 0x6a
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 fcf4 	bl	8005fe4 <memcpy>
			0x20,0x14,0xEC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x30,0x25,0x28,0x14,0x00,
			0x00,0x00,0x00,0x00,0x00,0x01, 
		};	
		
		/* config  */
		GTP_CFG_DATA[62] = GT811_MAX_WIDTH >> 8;  
 80005fc:	2304      	movs	r3, #4
 80005fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    GTP_CFG_DATA[61] = GT811_MAX_WIDTH & 0xff;  
 8000602:	2300      	movs	r3, #0
 8000604:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    GTP_CFG_DATA[60] = GT811_MAX_HEIGHT >> 8;  
 8000608:	2302      	movs	r3, #2
 800060a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    GTP_CFG_DATA[59] = GT811_MAX_HEIGHT & 0xff; 
 800060e:	2358      	movs	r3, #88	; 0x58
 8000610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		
		I2C_WriteReg(GT811_CMD_WR,GT811_CONFIG_REG,(uint8_t *)GTP_CFG_DATA,sizeof(GTP_CFG_DATA));
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	236a      	movs	r3, #106	; 0x6a
 8000618:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800061c:	20ba      	movs	r0, #186	; 0xba
 800061e:	f000 fadb 	bl	8000bd8 <I2C_WriteReg>
	}
	return HAL_OK;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3770      	adds	r7, #112	; 0x70
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40020c00 	.word	0x40020c00
 8000630:	08006eb4 	.word	0x08006eb4

08000634 <GT811_ReadID>:
  *         able to read the GT811 device ID, and verify this is a GT811.
  * @param  DeviceAddr: I2C GT811 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t GT811_ReadID()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t value[2];
	I2C_ReadReg(GT811_CMD_WR,GT811_VERSION,value,2);
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	2302      	movs	r3, #2
 800063e:	f240 7117 	movw	r1, #1815	; 0x717
 8000642:	20ba      	movs	r0, #186	; 0xba
 8000644:	f000 fb0e 	bl	8000c64 <I2C_ReadReg>
	printf("ID    %x\r\n",(((uint16_t)value[0] << 8) + value[1]));
 8000648:	793b      	ldrb	r3, [r7, #4]
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	797a      	ldrb	r2, [r7, #5]
 800064e:	4413      	add	r3, r2
 8000650:	4619      	mov	r1, r3
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <GT811_ReadID+0x3c>)
 8000654:	f005 fcda 	bl	800600c <iprintf>
	return value[0]*0x100+value[1];
 8000658:	793b      	ldrb	r3, [r7, #4]
 800065a:	b29b      	uxth	r3, r3
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	b29a      	uxth	r2, r3
 8000660:	797b      	ldrb	r3, [r7, #5]
 8000662:	b29b      	uxth	r3, r3
 8000664:	4413      	add	r3, r2
 8000666:	b29b      	uxth	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	08006f20 	.word	0x08006f20

08000674 <GT811_GetState>:


void GT811_GetState(TS_StateTypeDef *TS_State)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint8_t RegBuf[34];
	
	/* Read touch message */
	I2C_ReadReg(GT811_CMD_WR,GT811_READ_XY_REG,RegBuf,sizeof(RegBuf));
 800067c:	f107 020c 	add.w	r2, r7, #12
 8000680:	2322      	movs	r3, #34	; 0x22
 8000682:	f240 7121 	movw	r1, #1825	; 0x721
 8000686:	20ba      	movs	r0, #186	; 0xba
 8000688:	f000 faec 	bl	8000c64 <I2C_ReadReg>
	
	/* get touch massage */
	TS_State->SensorId = RegBuf[0x00] >> 6;
 800068c:	7b3b      	ldrb	r3, [r7, #12]
 800068e:	099b      	lsrs	r3, r3, #6
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	61da      	str	r2, [r3, #28]
	TS_State->touchDetected = RegBuf[0x00] & 0x1F;
 8000698:	7b3b      	ldrb	r3, [r7, #12]
 800069a:	f003 031f 	and.w	r3, r3, #31
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	701a      	strb	r2, [r3, #0]
	
	if(TS_State->touchDetected != 0)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 808b 	beq.w	80007c4 <GT811_GetState+0x150>
	{	
		//Touch point 1 coordinates
		TS_State->touchY[0] = GT811_MAX_HEIGHT - (((uint16_t)RegBuf[0x02] << 8) + RegBuf[0x03]);
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4413      	add	r3, r2
 80006bc:	b29b      	uxth	r3, r3
 80006be:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	819a      	strh	r2, [r3, #12]
		TS_State->touchX[0] = (((uint16_t)RegBuf[0x04] << 8) + RegBuf[0x05]);
 80006c8:	7c3b      	ldrb	r3, [r7, #16]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	7c7b      	ldrb	r3, [r7, #17]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	4413      	add	r3, r2
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	805a      	strh	r2, [r3, #2]
		TS_State->touchWeight[0] = RegBuf[0x06];	
 80006dc:	7cba      	ldrb	r2, [r7, #18]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	759a      	strb	r2, [r3, #22]

		//Touch point 2 coordinates
		TS_State->touchY[1] = GT811_MAX_HEIGHT - (((uint16_t)RegBuf[0x07] << 8) + RegBuf[0x08]);
 80006e2:	7cfb      	ldrb	r3, [r7, #19]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	7d3b      	ldrb	r3, [r7, #20]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4413      	add	r3, r2
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	81da      	strh	r2, [r3, #14]
		TS_State->touchX[1] = (((uint16_t)RegBuf[0x09] << 8) + RegBuf[0x0A]);
 80006fc:	7d7b      	ldrb	r3, [r7, #21]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	b29a      	uxth	r2, r3
 8000704:	7dbb      	ldrb	r3, [r7, #22]
 8000706:	b29b      	uxth	r3, r3
 8000708:	4413      	add	r3, r2
 800070a:	b29a      	uxth	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	809a      	strh	r2, [r3, #4]
		TS_State->touchWeight[1] = RegBuf[0x0B];	
 8000710:	7dfa      	ldrb	r2, [r7, #23]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	75da      	strb	r2, [r3, #23]

		//Touch point 3 coordinates
		TS_State->touchY[2] = GT811_MAX_HEIGHT - (((uint16_t)RegBuf[0x0C] << 8) + RegBuf[0x0D]);
 8000716:	7e3b      	ldrb	r3, [r7, #24]
 8000718:	b29b      	uxth	r3, r3
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b29a      	uxth	r2, r3
 800071e:	7e7b      	ldrb	r3, [r7, #25]
 8000720:	b29b      	uxth	r3, r3
 8000722:	4413      	add	r3, r2
 8000724:	b29b      	uxth	r3, r3
 8000726:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 800072a:	b29a      	uxth	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	821a      	strh	r2, [r3, #16]
		TS_State->touchX[2] = (((uint16_t)RegBuf[0x0E] << 8) + RegBuf[0x0F]);
 8000730:	7ebb      	ldrb	r3, [r7, #26]
 8000732:	b29b      	uxth	r3, r3
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	b29a      	uxth	r2, r3
 8000738:	7efb      	ldrb	r3, [r7, #27]
 800073a:	b29b      	uxth	r3, r3
 800073c:	4413      	add	r3, r2
 800073e:	b29a      	uxth	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	80da      	strh	r2, [r3, #6]
		TS_State->touchWeight[2] = RegBuf[0x10];	
 8000744:	7f3a      	ldrb	r2, [r7, #28]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	761a      	strb	r2, [r3, #24]

		//Touch point 4 coordinates
		TS_State->touchY[3] = GT811_MAX_HEIGHT - (((uint16_t)RegBuf[0x11] << 8) + RegBuf[0x18]);
 800074a:	7f7b      	ldrb	r3, [r7, #29]
 800074c:	b29b      	uxth	r3, r3
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b29a      	uxth	r2, r3
 8000752:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000756:	b29b      	uxth	r3, r3
 8000758:	4413      	add	r3, r2
 800075a:	b29b      	uxth	r3, r3
 800075c:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	825a      	strh	r2, [r3, #18]
		TS_State->touchX[3] = (((uint16_t)RegBuf[0x19] << 8) + RegBuf[0x1A]);
 8000766:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800076a:	b29b      	uxth	r3, r3
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b29a      	uxth	r2, r3
 8000770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000774:	b29b      	uxth	r3, r3
 8000776:	4413      	add	r3, r2
 8000778:	b29a      	uxth	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	811a      	strh	r2, [r3, #8]
		TS_State->touchWeight[3] = RegBuf[0x1B];	
 800077e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	765a      	strb	r2, [r3, #25]

		//Touch point 5 coordinates
		TS_State->touchY[4] = GT811_MAX_HEIGHT - (((uint16_t)RegBuf[0x1C] << 8) + RegBuf[0x1D]);
 8000786:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800078a:	b29b      	uxth	r3, r3
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	b29a      	uxth	r2, r3
 8000790:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000794:	b29b      	uxth	r3, r3
 8000796:	4413      	add	r3, r2
 8000798:	b29b      	uxth	r3, r3
 800079a:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 800079e:	b29a      	uxth	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	829a      	strh	r2, [r3, #20]
		TS_State->touchX[4] = (((uint16_t)RegBuf[0x1E] << 8) + RegBuf[0x1F]);
 80007a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	815a      	strh	r2, [r3, #10]
		TS_State->touchWeight[4] = RegBuf[0x20];
 80007bc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	769a      	strb	r2, [r3, #26]
	}

}
 80007c4:	bf00      	nop
 80007c6:	3730      	adds	r7, #48	; 0x30
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <delay_us>:
  * @brief  I2C delay.
  * @param  None
  * @retval None
  */
static void delay_us(uint32_t value)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	i = value * 250;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	22fa      	movs	r2, #250	; 0xfa
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	60fb      	str	r3, [r7, #12]
	while(i--);
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	1e5a      	subs	r2, r3, #1
 80007e4:	60fa      	str	r2, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1fa      	bne.n	80007e0 <delay_us+0x14>
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <I2C_Init>:
  * @brief  I2C Init.
  * @param  None
  * @retval None
  */
void I2C_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	SDA_CLK()
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <I2C_Init+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <I2C_Init+0x88>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <I2C_Init+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
	SCL_CLK()
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <I2C_Init+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a19      	ldr	r2, [pc, #100]	; (8000880 <I2C_Init+0x88>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <I2C_Init+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
	
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	61bb      	str	r3, [r7, #24]
	
	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 800083a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	480f      	ldr	r0, [pc, #60]	; (8000884 <I2C_Init+0x8c>)
 8000848:	f002 ff1a 	bl	8003680 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SDA_GPIO_PORT,SDA_GPIO_PIN,GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <I2C_Init+0x8c>)
 8000854:	f003 f8d6 	bl	8003a04 <HAL_GPIO_WritePin>
	
	GPIO_InitStruct.Pin = SCL_GPIO_PIN;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SCL_GPIO_PORT, &GPIO_InitStruct);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <I2C_Init+0x8c>)
 8000866:	f002 ff0b 	bl	8003680 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SCL_GPIO_PORT,SCL_GPIO_PIN,GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <I2C_Init+0x8c>)
 8000872:	f003 f8c7 	bl	8003a04 <HAL_GPIO_WritePin>
	
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40020c00 	.word	0x40020c00

08000888 <SDA_IN>:
  * @brief  Set SDA In.
  * @param  None
  * @retval None
  */
static void SDA_IN()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
  GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 800088e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000892:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <SDA_IN+0x2c>)
 80008a6:	f002 feeb 	bl	8003680 <HAL_GPIO_Init>

}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <SDA_OUT>:
  * @brief  Set SDA Out.
  * @param  None
  * @retval None
  */
static void SDA_OUT()
{	
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <SDA_OUT+0x2c>)
 80008d6:	f002 fed3 	bl	8003680 <HAL_GPIO_Init>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020c00 	.word	0x40020c00

080008e8 <I2C_Start>:
  * @brief  I2C Start.
  * @param  None
  * @retval None
  */
void I2C_Start(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	SDA_OUT(); 
 80008ec:	f7ff ffe4 	bl	80008b8 <SDA_OUT>
	
	SET_SDA();	 
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <I2C_Start+0x54>)
 80008f8:	f003 f884 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ff65 	bl	80007cc <delay_us>
	
	SET_CLK();
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <I2C_Start+0x54>)
 800090a:	f003 f87b 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff ff5c 	bl	80007cc <delay_us>
	
 	CLR_SDA();
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <I2C_Start+0x54>)
 800091c:	f003 f872 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff ff53 	bl	80007cc <delay_us>
	
	CLR_CLK();
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <I2C_Start+0x54>)
 800092e:	f003 f869 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff ff4a 	bl	80007cc <delay_us>
}	  
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020c00 	.word	0x40020c00

08000940 <I2C_Stop>:
  * @brief  I2C Stop.
  * @param  None
  * @retval None
  */
void I2C_Stop(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000944:	f7ff ffb8 	bl	80008b8 <SDA_OUT>

	CLR_SDA();
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <I2C_Stop+0x44>)
 8000950:	f003 f858 	bl	8003a04 <HAL_GPIO_WritePin>
 	delay_us(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ff39 	bl	80007cc <delay_us>
	
	SET_CLK();
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000960:	4808      	ldr	r0, [pc, #32]	; (8000984 <I2C_Stop+0x44>)
 8000962:	f003 f84f 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000966:	2001      	movs	r0, #1
 8000968:	f7ff ff30 	bl	80007cc <delay_us>
	
	SET_SDA();
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <I2C_Stop+0x44>)
 8000974:	f003 f846 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);							   	
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff ff27 	bl	80007cc <delay_us>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40020c00 	.word	0x40020c00

08000988 <I2C_Wait_Ack>:
  * @brief  I2C Ack.
  * @param  None
  * @retval None
  */
uint8_t I2C_Wait_Ack(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	uint16_t ucErrTime=0;
 800098e:	2300      	movs	r3, #0
 8000990:	80fb      	strh	r3, [r7, #6]

	SDA_IN(); 
 8000992:	f7ff ff79 	bl	8000888 <SDA_IN>
	SET_SDA();
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	4816      	ldr	r0, [pc, #88]	; (80009f8 <I2C_Wait_Ack+0x70>)
 800099e:	f003 f831 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);		
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff ff12 	bl	80007cc <delay_us>
	SET_CLK();
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <I2C_Wait_Ack+0x70>)
 80009b0:	f003 f828 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);	
 80009b4:	2001      	movs	r0, #1
 80009b6:	f7ff ff09 	bl	80007cc <delay_us>
	
	while(READ_SDA())
 80009ba:	e009      	b.n	80009d0 <I2C_Wait_Ack+0x48>
	{
		ucErrTime++;
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	3301      	adds	r3, #1
 80009c0:	80fb      	strh	r3, [r7, #6]
		if(ucErrTime>250)
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	2bfa      	cmp	r3, #250	; 0xfa
 80009c6:	d903      	bls.n	80009d0 <I2C_Wait_Ack+0x48>
		{
			I2C_Stop();
 80009c8:	f7ff ffba 	bl	8000940 <I2C_Stop>
			return 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e00e      	b.n	80009ee <I2C_Wait_Ack+0x66>
	while(READ_SDA())
 80009d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <I2C_Wait_Ack+0x70>)
 80009d6:	f002 fffd 	bl	80039d4 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1ed      	bne.n	80009bc <I2C_Wait_Ack+0x34>
		}
	}
	CLR_CLK();
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <I2C_Wait_Ack+0x70>)
 80009e8:	f003 f80c 	bl	8003a04 <HAL_GPIO_WritePin>
	return 0;  
 80009ec:	2300      	movs	r3, #0
} 
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40020c00 	.word	0x40020c00

080009fc <I2C_Ack>:
  * @brief  I2C Ack.
  * @param  None
  * @retval None
  */
void I2C_Ack(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000a00:	f7ff ff5a 	bl	80008b8 <SDA_OUT>
	CLR_CLK();
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0a:	4810      	ldr	r0, [pc, #64]	; (8000a4c <I2C_Ack+0x50>)
 8000a0c:	f002 fffa 	bl	8003a04 <HAL_GPIO_WritePin>
	
	CLR_SDA();
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <I2C_Ack+0x50>)
 8000a18:	f002 fff4 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fed5 	bl	80007cc <delay_us>
	
	SET_CLK();
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <I2C_Ack+0x50>)
 8000a2a:	f002 ffeb 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fecc 	bl	80007cc <delay_us>
	
	CLR_CLK();
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <I2C_Ack+0x50>)
 8000a3c:	f002 ffe2 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fec3 	bl	80007cc <delay_us>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <I2C_NAck>:
  * @brief  No I2C Ack.
  * @param  None
  * @retval None
  */    
void I2C_NAck(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000a54:	f7ff ff30 	bl	80008b8 <SDA_OUT>
	
	SET_SDA();
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <I2C_NAck+0x44>)
 8000a60:	f002 ffd0 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff feb1 	bl	80007cc <delay_us>
	
	SET_CLK();
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <I2C_NAck+0x44>)
 8000a72:	f002 ffc7 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fea8 	bl	80007cc <delay_us>
	
	CLR_CLK();
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <I2C_NAck+0x44>)
 8000a84:	f002 ffbe 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fe9f 	bl	80007cc <delay_us>
}					 				     
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020c00 	.word	0x40020c00

08000a98 <I2C_Send_Byte>:
  * @brief  I2C Send one byte
	* @param  1:ack 0:without ack
  * @retval None
  */   
void I2C_Send_Byte(uint8_t txd)
{                        
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	uint8_t t;   
	
	SDA_OUT(); 	    
 8000aa2:	f7ff ff09 	bl	80008b8 <SDA_OUT>
	CLR_CLK();       //Put low CLK to send data
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aac:	4825      	ldr	r0, [pc, #148]	; (8000b44 <I2C_Send_Byte+0xac>)
 8000aae:	f002 ffa9 	bl	8003a04 <HAL_GPIO_WritePin>
	
	for(t=0;t<8;t++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
 8000ab6:	e02b      	b.n	8000b10 <I2C_Send_Byte+0x78>
	{              
		if(txd&0x80)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	da06      	bge.n	8000ace <I2C_Send_Byte+0x36>
			SET_SDA();
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	481f      	ldr	r0, [pc, #124]	; (8000b44 <I2C_Send_Byte+0xac>)
 8000ac8:	f002 ff9c 	bl	8003a04 <HAL_GPIO_WritePin>
 8000acc:	e005      	b.n	8000ada <I2C_Send_Byte+0x42>
		else	
			CLR_SDA();
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	481b      	ldr	r0, [pc, #108]	; (8000b44 <I2C_Send_Byte+0xac>)
 8000ad6:	f002 ff95 	bl	8003a04 <HAL_GPIO_WritePin>
		
		txd<<=1; 
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	71fb      	strb	r3, [r7, #7]
		delay_us(1);	
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fe73 	bl	80007cc <delay_us>
		
		SET_CLK();
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	4815      	ldr	r0, [pc, #84]	; (8000b44 <I2C_Send_Byte+0xac>)
 8000aee:	f002 ff89 	bl	8003a04 <HAL_GPIO_WritePin>
		delay_us(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fe6a 	bl	80007cc <delay_us>
		CLR_CLK();	
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <I2C_Send_Byte+0xac>)
 8000b00:	f002 ff80 	bl	8003a04 <HAL_GPIO_WritePin>
		delay_us(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff fe61 	bl	80007cc <delay_us>
	for(t=0;t<8;t++)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b07      	cmp	r3, #7
 8000b14:	d9d0      	bls.n	8000ab8 <I2C_Send_Byte+0x20>
	}	 
	
	SET_SDA();
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <I2C_Send_Byte+0xac>)
 8000b1e:	f002 ff71 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fe52 	bl	80007cc <delay_us>
	CLR_CLK();	
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <I2C_Send_Byte+0xac>)
 8000b30:	f002 ff68 	bl	8003a04 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fe49 	bl	80007cc <delay_us>
} 	    
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <I2C_Read_Byte>:
  * @brief  I2C read one byte
	* @param  1:ack 0:without ack
  * @retval read value
  */
uint8_t I2C_Read_Byte(unsigned char ack)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73bb      	strb	r3, [r7, #14]
 	SDA_IN();         //SDA set in
 8000b56:	f7ff fe97 	bl	8000888 <SDA_IN>
  for(i=0;i<8;i++ )
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e022      	b.n	8000ba6 <I2C_Read_Byte+0x5e>
	{
    CLR_CLK(); 	    	   
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <I2C_Read_Byte+0x8c>)
 8000b68:	f002 ff4c 	bl	8003a04 <HAL_GPIO_WritePin>
		delay_us(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fe2d 	bl	80007cc <delay_us>
		SET_CLK();
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <I2C_Read_Byte+0x8c>)
 8000b7a:	f002 ff43 	bl	8003a04 <HAL_GPIO_WritePin>
    receive<<=1;
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	73bb      	strb	r3, [r7, #14]
    if(READ_SDA())receive++; 
 8000b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <I2C_Read_Byte+0x8c>)
 8000b8a:	f002 ff23 	bl	80039d4 <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <I2C_Read_Byte+0x52>
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	3301      	adds	r3, #1
 8000b98:	73bb      	strb	r3, [r7, #14]
		delay_us(1);		
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fe16 	bl	80007cc <delay_us>
  for(i=0;i<8;i++ )
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	2b07      	cmp	r3, #7
 8000baa:	d9d9      	bls.n	8000b60 <I2C_Read_Byte+0x18>
	}	 
	CLR_CLK(); 	
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <I2C_Read_Byte+0x8c>)
 8000bb4:	f002 ff26 	bl	8003a04 <HAL_GPIO_WritePin>
	if (!ack)I2C_NAck();   //sent nACK
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <I2C_Read_Byte+0x7c>
 8000bbe:	f7ff ff47 	bl	8000a50 <I2C_NAck>
 8000bc2:	e001      	b.n	8000bc8 <I2C_Read_Byte+0x80>
	else I2C_Ack();        //sent ACK   
 8000bc4:	f7ff ff1a 	bl	80009fc <I2C_Ack>
	
 	return receive;
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40020c00 	.word	0x40020c00

08000bd8 <I2C_WriteReg>:
                   -0  succeed
									 -1  error
* Attention		 : None
*******************************************************************************/
uint8_t I2C_WriteReg(uint8_t I2c_Addr,uint16_t reg,uint8_t *buf,uint8_t len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	603a      	str	r2, [r7, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	460b      	mov	r3, r1
 8000be8:	80bb      	strh	r3, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t ret=0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73bb      	strb	r3, [r7, #14]
	I2C_Start();	
 8000bf2:	f7ff fe79 	bl	80008e8 <I2C_Start>
	
 	I2C_Send_Byte(I2c_Addr);   //Slaver Addr
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff4d 	bl	8000a98 <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000bfe:	f7ff fec3 	bl	8000988 <I2C_Wait_Ack>

#ifdef I2C_MEMADD_16BIT
	I2C_Send_Byte(reg>>8);   	     //Data Addr high
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff44 	bl	8000a98 <I2C_Send_Byte>
	I2C_Wait_Ack(); 
 8000c10:	f7ff feba 	bl	8000988 <I2C_Wait_Ack>
#endif
	
	I2C_Send_Byte(reg&0xFF);   	   //Data Addr low
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff3d 	bl	8000a98 <I2C_Send_Byte>
	I2C_Wait_Ack(); 	
 8000c1e:	f7ff feb3 	bl	8000988 <I2C_Wait_Ack>
 
	for(i=0;i<len;i++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e010      	b.n	8000c4a <I2C_WriteReg+0x72>
	{	   
    I2C_Send_Byte(buf[i]);  
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff31 	bl	8000a98 <I2C_Send_Byte>
		ret=I2C_Wait_Ack();
 8000c36:	f7ff fea7 	bl	8000988 <I2C_Wait_Ack>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73bb      	strb	r3, [r7, #14]
		if(ret)break;  
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d107      	bne.n	8000c54 <I2C_WriteReg+0x7c>
	for(i=0;i<len;i++)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	3301      	adds	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	7bfa      	ldrb	r2, [r7, #15]
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d3ea      	bcc.n	8000c28 <I2C_WriteReg+0x50>
 8000c52:	e000      	b.n	8000c56 <I2C_WriteReg+0x7e>
		if(ret)break;  
 8000c54:	bf00      	nop
	}
  I2C_Stop();					
 8000c56:	f7ff fe73 	bl	8000940 <I2C_Stop>
	return ret; 
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <I2C_ReadReg>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/		  
void I2C_ReadReg(uint8_t I2c_Addr,uint16_t reg,uint8_t *buf,uint8_t len)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	603a      	str	r2, [r7, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
 8000c72:	460b      	mov	r3, r1
 8000c74:	80bb      	strh	r3, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
 	I2C_Start();	
 8000c7a:	f7ff fe35 	bl	80008e8 <I2C_Start>
 	I2C_Send_Byte(I2c_Addr);  
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff09 	bl	8000a98 <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000c86:	f7ff fe7f 	bl	8000988 <I2C_Wait_Ack>
	
#ifdef I2C_MEMADD_16BIT
	I2C_Send_Byte(reg>>8);   	     //Data Addr high
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff00 	bl	8000a98 <I2C_Send_Byte>
	I2C_Wait_Ack(); 
 8000c98:	f7ff fe76 	bl	8000988 <I2C_Wait_Ack>
#endif
	
	I2C_Send_Byte(reg&0xFF);   	   //Data Addr low
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fef9 	bl	8000a98 <I2C_Send_Byte>
	I2C_Wait_Ack(); 	 										  		   
 8000ca6:	f7ff fe6f 	bl	8000988 <I2C_Wait_Ack>
  I2C_Stop(); 
 8000caa:	f7ff fe49 	bl	8000940 <I2C_Stop>
  
 	I2C_Start();  	 	   
 8000cae:	f7ff fe1b 	bl	80008e8 <I2C_Start>
	I2C_Send_Byte(I2c_Addr+1);     
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff feed 	bl	8000a98 <I2C_Send_Byte>
	I2C_Wait_Ack();		
 8000cbe:	f7ff fe63 	bl	8000988 <I2C_Wait_Ack>
	
	for(i=0;i<len;i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e013      	b.n	8000cf0 <I2C_ReadReg+0x8c>
	{	   
    buf[i]=I2C_Read_Byte(i==(len-1)?0:1); 
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	18d4      	adds	r4, r2, r3
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	f7ff ff31 	bl	8000b48 <I2C_Read_Byte>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	7023      	strb	r3, [r4, #0]
	for(i=0;i<len;i++)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	3301      	adds	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d3e7      	bcc.n	8000cc8 <I2C_ReadReg+0x64>
	} 
  I2C_Stop();   
 8000cf8:	f7ff fe22 	bl	8000940 <I2C_Stop>
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

//  /* Assert backlight LCD_BL_CTRL pin */
//  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000d08:	f000 fdba 	bl	8001880 <BSP_SDRAM_Init>
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <BSP_LCD_Init+0x14>)
 8000d0e:	f000 f8c3 	bl	8000e98 <BSP_LCD_SetFont>

  
  return LCD_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000

08000d1c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <BSP_LCD_GetXSize+0x20>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <BSP_LCD_GetXSize+0x24>)
 8000d26:	2134      	movs	r1, #52	; 0x34
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3360      	adds	r3, #96	; 0x60
 8000d30:	681b      	ldr	r3, [r3, #0]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	200000ac 	.word	0x200000ac
 8000d40:	2000025c 	.word	0x2000025c

08000d44 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <BSP_LCD_GetYSize+0x20>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <BSP_LCD_GetYSize+0x24>)
 8000d4e:	2134      	movs	r1, #52	; 0x34
 8000d50:	fb01 f303 	mul.w	r3, r1, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	3364      	adds	r3, #100	; 0x64
 8000d58:	681b      	ldr	r3, [r3, #0]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	200000ac 	.word	0x200000ac
 8000d68:	2000025c 	.word	0x2000025c

08000d6c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <BSP_LCD_SelectLayer+0x1c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
} 
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200000ac 	.word	0x200000ac

08000d8c <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d112      	bne.n	8000dc4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <BSP_LCD_SetLayerVisible+0x78>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	4413      	add	r3, r2
 8000daa:	3384      	adds	r3, #132	; 0x84
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <BSP_LCD_SetLayerVisible+0x78>)
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	4611      	mov	r1, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	01d2      	lsls	r2, r2, #7
 8000db8:	440a      	add	r2, r1
 8000dba:	3284      	adds	r2, #132	; 0x84
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e011      	b.n	8000de8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <BSP_LCD_SetLayerVisible+0x78>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	01db      	lsls	r3, r3, #7
 8000dce:	4413      	add	r3, r2
 8000dd0:	3384      	adds	r3, #132	; 0x84
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <BSP_LCD_SetLayerVisible+0x78>)
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	01d2      	lsls	r2, r2, #7
 8000dde:	440a      	add	r2, r1
 8000de0:	3284      	adds	r2, #132	; 0x84
 8000de2:	f023 0301 	bic.w	r3, r3, #1
 8000de6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <BSP_LCD_SetLayerVisible+0x78>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <BSP_LCD_SetLayerVisible+0x78>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0201 	orr.w	r2, r2, #1
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	2000025c 	.word	0x2000025c

08000e08 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <BSP_LCD_SetTextColor+0x28>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <BSP_LCD_SetTextColor+0x2c>)
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	200000ac 	.word	0x200000ac
 8000e34:	200000b0 	.word	0x200000b0

08000e38 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <BSP_LCD_SetBackColor+0x2c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4908      	ldr	r1, [pc, #32]	; (8000e68 <BSP_LCD_SetBackColor+0x30>)
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	3304      	adds	r3, #4
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200000ac 	.word	0x200000ac
 8000e68:	200000b0 	.word	0x200000b0

08000e6c <BSP_LCD_GetBackColor>:
/**
  * @brief  Gets the LCD background color.
  * @retval Used background colour
  */
uint32_t BSP_LCD_GetBackColor(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].BackColor;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <BSP_LCD_GetBackColor+0x24>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <BSP_LCD_GetBackColor+0x28>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	3304      	adds	r3, #4
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200000ac 	.word	0x200000ac
 8000e94:	200000b0 	.word	0x200000b0

08000e98 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <BSP_LCD_SetFont+0x2c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <BSP_LCD_SetFont+0x30>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200000ac 	.word	0x200000ac
 8000ec8:	200000b0 	.word	0x200000b0

08000ecc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <BSP_LCD_Clear+0x48>)
 8000ed6:	681c      	ldr	r4, [r3, #0]
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <BSP_LCD_Clear+0x48>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <BSP_LCD_Clear+0x4c>)
 8000ede:	2134      	movs	r1, #52	; 0x34
 8000ee0:	fb01 f303 	mul.w	r3, r1, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	335c      	adds	r3, #92	; 0x5c
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461d      	mov	r5, r3
 8000eec:	f7ff ff16 	bl	8000d1c <BSP_LCD_GetXSize>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	f7ff ff27 	bl	8000d44 <BSP_LCD_GetYSize>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	2300      	movs	r3, #0
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	4632      	mov	r2, r6
 8000f04:	4629      	mov	r1, r5
 8000f06:	4620      	mov	r0, r4
 8000f08:	f000 fc60 	bl	80017cc <LL_FillBuffer>
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f14:	200000ac 	.word	0x200000ac
 8000f18:	2000025c 	.word	0x2000025c

08000f1c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
 8000f26:	460b      	mov	r3, r1
 8000f28:	80bb      	strh	r3, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <BSP_LCD_DisplayChar+0x80>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	491b      	ldr	r1, [pc, #108]	; (8000fa0 <BSP_LCD_DisplayChar+0x84>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3308      	adds	r3, #8
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <BSP_LCD_DisplayChar+0x80>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4c14      	ldr	r4, [pc, #80]	; (8000fa0 <BSP_LCD_DisplayChar+0x84>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4423      	add	r3, r4
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f60:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <BSP_LCD_DisplayChar+0x80>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4c0d      	ldr	r4, [pc, #52]	; (8000fa0 <BSP_LCD_DisplayChar+0x84>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4423      	add	r3, r4
 8000f74:	3308      	adds	r3, #8
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	3307      	adds	r3, #7
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da00      	bge.n	8000f82 <BSP_LCD_DisplayChar+0x66>
 8000f80:	3307      	adds	r3, #7
 8000f82:	10db      	asrs	r3, r3, #3
 8000f84:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f88:	18ca      	adds	r2, r1, r3
 8000f8a:	88b9      	ldrh	r1, [r7, #4]
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fb64 	bl	800165c <DrawChar>
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	200000ac 	.word	0x200000ac
 8000fa0:	200000b0 	.word	0x200000b0

08000fa4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4603      	mov	r3, r0
 8000fb0:	81fb      	strh	r3, [r7, #14]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	81bb      	strh	r3, [r7, #12]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	83fb      	strh	r3, [r7, #30]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8000fce:	e002      	b.n	8000fd6 <BSP_LCD_DisplayStringAt+0x32>
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	617a      	str	r2, [r7, #20]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f6      	bne.n	8000fd0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000fe2:	f7ff fe9b 	bl	8000d1c <BSP_LCD_GetXSize>
 8000fe6:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <BSP_LCD_DisplayStringAt+0x180>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	494f      	ldr	r1, [pc, #316]	; (8001128 <BSP_LCD_DisplayStringAt+0x184>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	889b      	ldrh	r3, [r3, #4]
 8000ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001000:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d01c      	beq.n	8001042 <BSP_LCD_DisplayStringAt+0x9e>
 8001008:	2b03      	cmp	r3, #3
 800100a:	d017      	beq.n	800103c <BSP_LCD_DisplayStringAt+0x98>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d12e      	bne.n	800106e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad1      	subs	r1, r2, r3
 8001016:	4b43      	ldr	r3, [pc, #268]	; (8001124 <BSP_LCD_DisplayStringAt+0x180>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4843      	ldr	r0, [pc, #268]	; (8001128 <BSP_LCD_DisplayStringAt+0x184>)
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4403      	add	r3, r0
 8001026:	3308      	adds	r3, #8
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	889b      	ldrh	r3, [r3, #4]
 800102c:	fb03 f301 	mul.w	r3, r3, r1
 8001030:	085b      	lsrs	r3, r3, #1
 8001032:	b29a      	uxth	r2, r3
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	4413      	add	r3, r2
 8001038:	83fb      	strh	r3, [r7, #30]
      break;
 800103a:	e01b      	b.n	8001074 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	83fb      	strh	r3, [r7, #30]
      break;
 8001040:	e018      	b.n	8001074 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	b299      	uxth	r1, r3
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <BSP_LCD_DisplayStringAt+0x180>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4836      	ldr	r0, [pc, #216]	; (8001128 <BSP_LCD_DisplayStringAt+0x184>)
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4403      	add	r3, r0
 800105a:	3308      	adds	r3, #8
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	fb11 f303 	smulbb	r3, r1, r3
 8001064:	b29a      	uxth	r2, r3
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	83fb      	strh	r3, [r7, #30]
      break;
 800106c:	e002      	b.n	8001074 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	83fb      	strh	r3, [r7, #30]
      break;
 8001072:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001074:	8bfb      	ldrh	r3, [r7, #30]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <BSP_LCD_DisplayStringAt+0xde>
 800107a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800107e:	2b00      	cmp	r3, #0
 8001080:	da1d      	bge.n	80010be <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001086:	e01a      	b.n	80010be <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	89b9      	ldrh	r1, [r7, #12]
 800108e:	8bfb      	ldrh	r3, [r7, #30]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff43 	bl	8000f1c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <BSP_LCD_DisplayStringAt+0x180>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4923      	ldr	r1, [pc, #140]	; (8001128 <BSP_LCD_DisplayStringAt+0x184>)
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	3308      	adds	r3, #8
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	889a      	ldrh	r2, [r3, #4]
 80010ac:	8bfb      	ldrh	r3, [r7, #30]
 80010ae:	4413      	add	r3, r2
 80010b0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
    i++;
 80010b8:	8bbb      	ldrh	r3, [r7, #28]
 80010ba:	3301      	adds	r3, #1
 80010bc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf14      	ite	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	2300      	moveq	r3, #0
 80010ca:	b2dc      	uxtb	r4, r3
 80010cc:	f7ff fe26 	bl	8000d1c <BSP_LCD_GetXSize>
 80010d0:	4605      	mov	r5, r0
 80010d2:	8bb9      	ldrh	r1, [r7, #28]
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <BSP_LCD_DisplayStringAt+0x180>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4813      	ldr	r0, [pc, #76]	; (8001128 <BSP_LCD_DisplayStringAt+0x184>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4403      	add	r3, r0
 80010e4:	3308      	adds	r3, #8
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	889b      	ldrh	r3, [r3, #4]
 80010ea:	fb03 f301 	mul.w	r3, r3, r1
 80010ee:	1aeb      	subs	r3, r5, r3
 80010f0:	b299      	uxth	r1, r3
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <BSP_LCD_DisplayStringAt+0x180>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <BSP_LCD_DisplayStringAt+0x184>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4403      	add	r3, r0
 8001102:	3308      	adds	r3, #8
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	889b      	ldrh	r3, [r3, #4]
 8001108:	4299      	cmp	r1, r3
 800110a:	bf2c      	ite	cs
 800110c:	2301      	movcs	r3, #1
 800110e:	2300      	movcc	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4023      	ands	r3, r4
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1b6      	bne.n	8001088 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bdb0      	pop	{r4, r5, r7, pc}
 8001122:	bf00      	nop
 8001124:	200000ac 	.word	0x200000ac
 8001128:	200000b0 	.word	0x200000b0

0800112c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af02      	add	r7, sp, #8
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
 8001136:	460b      	mov	r3, r1
 8001138:	80bb      	strh	r3, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <BSP_LCD_DrawHLine+0xb0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <BSP_LCD_DrawHLine+0xb4>)
 8001148:	2134      	movs	r1, #52	; 0x34
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	4413      	add	r3, r2
 8001150:	3348      	adds	r3, #72	; 0x48
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d114      	bne.n	8001182 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <BSP_LCD_DrawHLine+0xb0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <BSP_LCD_DrawHLine+0xb4>)
 800115e:	2134      	movs	r1, #52	; 0x34
 8001160:	fb01 f303 	mul.w	r3, r1, r3
 8001164:	4413      	add	r3, r2
 8001166:	335c      	adds	r3, #92	; 0x5c
 8001168:	681c      	ldr	r4, [r3, #0]
 800116a:	f7ff fdd7 	bl	8000d1c <BSP_LCD_GetXSize>
 800116e:	4602      	mov	r2, r0
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	fb03 f202 	mul.w	r2, r3, r2
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4423      	add	r3, r4
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e013      	b.n	80011aa <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <BSP_LCD_DrawHLine+0xb0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <BSP_LCD_DrawHLine+0xb4>)
 8001188:	2134      	movs	r1, #52	; 0x34
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	4413      	add	r3, r2
 8001190:	335c      	adds	r3, #92	; 0x5c
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	f7ff fdc2 	bl	8000d1c <BSP_LCD_GetXSize>
 8001198:	4602      	mov	r2, r0
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	fb03 f202 	mul.w	r2, r3, r2
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4423      	add	r3, r4
 80011a8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <BSP_LCD_DrawHLine+0xb0>)
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	68fc      	ldr	r4, [r7, #12]
 80011b0:	887d      	ldrh	r5, [r7, #2]
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <BSP_LCD_DrawHLine+0xb0>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	490b      	ldr	r1, [pc, #44]	; (80011e4 <BSP_LCD_DrawHLine+0xb8>)
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	2300      	movs	r3, #0
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	462a      	mov	r2, r5
 80011ce:	4621      	mov	r1, r4
 80011d0:	f000 fafc 	bl	80017cc <LL_FillBuffer>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	200000ac 	.word	0x200000ac
 80011e0:	2000025c 	.word	0x2000025c
 80011e4:	200000b0 	.word	0x200000b0

080011e8 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
 80011f2:	460b      	mov	r3, r1
 80011f4:	80bb      	strh	r3, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <BSP_LCD_DrawVLine+0xb8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <BSP_LCD_DrawVLine+0xbc>)
 8001204:	2134      	movs	r1, #52	; 0x34
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	4413      	add	r3, r2
 800120c:	3348      	adds	r3, #72	; 0x48
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d114      	bne.n	800123e <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <BSP_LCD_DrawVLine+0xb8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <BSP_LCD_DrawVLine+0xbc>)
 800121a:	2134      	movs	r1, #52	; 0x34
 800121c:	fb01 f303 	mul.w	r3, r1, r3
 8001220:	4413      	add	r3, r2
 8001222:	335c      	adds	r3, #92	; 0x5c
 8001224:	681c      	ldr	r4, [r3, #0]
 8001226:	f7ff fd79 	bl	8000d1c <BSP_LCD_GetXSize>
 800122a:	4602      	mov	r2, r0
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	fb03 f202 	mul.w	r2, r3, r2
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4423      	add	r3, r4
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e013      	b.n	8001266 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <BSP_LCD_DrawVLine+0xb8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <BSP_LCD_DrawVLine+0xbc>)
 8001244:	2134      	movs	r1, #52	; 0x34
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	335c      	adds	r3, #92	; 0x5c
 800124e:	681c      	ldr	r4, [r3, #0]
 8001250:	f7ff fd64 	bl	8000d1c <BSP_LCD_GetXSize>
 8001254:	4602      	mov	r2, r0
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	fb03 f202 	mul.w	r2, r3, r2
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4423      	add	r3, r4
 8001264:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <BSP_LCD_DrawVLine+0xb8>)
 8001268:	681c      	ldr	r4, [r3, #0]
 800126a:	68fd      	ldr	r5, [r7, #12]
 800126c:	887e      	ldrh	r6, [r7, #2]
 800126e:	f7ff fd55 	bl	8000d1c <BSP_LCD_GetXSize>
 8001272:	4603      	mov	r3, r0
 8001274:	1e59      	subs	r1, r3, #1
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <BSP_LCD_DrawVLine+0xb8>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <BSP_LCD_DrawVLine+0xc0>)
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4403      	add	r3, r0
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	9100      	str	r1, [sp, #0]
 800128c:	4633      	mov	r3, r6
 800128e:	2201      	movs	r2, #1
 8001290:	4629      	mov	r1, r5
 8001292:	4620      	mov	r0, r4
 8001294:	f000 fa9a 	bl	80017cc <LL_FillBuffer>
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a0:	200000ac 	.word	0x200000ac
 80012a4:	2000025c 	.word	0x2000025c
 80012a8:	200000b0 	.word	0x200000b0

080012ac <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
 80012b6:	460b      	mov	r3, r1
 80012b8:	80bb      	strh	r3, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	f1c3 0303 	rsb	r3, r3, #3
 80012c6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80012d0:	e0cf      	b.n	8001472 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	4413      	add	r3, r2
 80012da:	b298      	uxth	r0, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	88ba      	ldrh	r2, [r7, #4]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	b29c      	uxth	r4, r3
 80012e6:	4b67      	ldr	r3, [pc, #412]	; (8001484 <BSP_LCD_DrawCircle+0x1d8>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4967      	ldr	r1, [pc, #412]	; (8001488 <BSP_LCD_DrawCircle+0x1dc>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4621      	mov	r1, r4
 80012fc:	f000 f8c6 	bl	800148c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	b29b      	uxth	r3, r3
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	b298      	uxth	r0, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b29b      	uxth	r3, r3
 800130e:	88ba      	ldrh	r2, [r7, #4]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b29c      	uxth	r4, r3
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <BSP_LCD_DrawCircle+0x1d8>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	495b      	ldr	r1, [pc, #364]	; (8001488 <BSP_LCD_DrawCircle+0x1dc>)
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4621      	mov	r1, r4
 800132a:	f000 f8af 	bl	800148c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	4413      	add	r3, r2
 8001336:	b298      	uxth	r0, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	b29b      	uxth	r3, r3
 800133c:	88ba      	ldrh	r2, [r7, #4]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29c      	uxth	r4, r3
 8001342:	4b50      	ldr	r3, [pc, #320]	; (8001484 <BSP_LCD_DrawCircle+0x1d8>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4950      	ldr	r1, [pc, #320]	; (8001488 <BSP_LCD_DrawCircle+0x1dc>)
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4621      	mov	r1, r4
 8001358:	f000 f898 	bl	800148c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	b29b      	uxth	r3, r3
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b298      	uxth	r0, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	b29b      	uxth	r3, r3
 800136a:	88ba      	ldrh	r2, [r7, #4]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b29c      	uxth	r4, r3
 8001370:	4b44      	ldr	r3, [pc, #272]	; (8001484 <BSP_LCD_DrawCircle+0x1d8>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4944      	ldr	r1, [pc, #272]	; (8001488 <BSP_LCD_DrawCircle+0x1dc>)
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4621      	mov	r1, r4
 8001386:	f000 f881 	bl	800148c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	b29a      	uxth	r2, r3
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4413      	add	r3, r2
 8001392:	b298      	uxth	r0, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	b29a      	uxth	r2, r3
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	b29c      	uxth	r4, r3
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <BSP_LCD_DrawCircle+0x1d8>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4939      	ldr	r1, [pc, #228]	; (8001488 <BSP_LCD_DrawCircle+0x1dc>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4621      	mov	r1, r4
 80013b4:	f000 f86a 	bl	800148c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	88fa      	ldrh	r2, [r7, #6]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b298      	uxth	r0, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	88bb      	ldrh	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	b29c      	uxth	r4, r3
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <BSP_LCD_DrawCircle+0x1d8>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	492d      	ldr	r1, [pc, #180]	; (8001488 <BSP_LCD_DrawCircle+0x1dc>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4621      	mov	r1, r4
 80013e2:	f000 f853 	bl	800148c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4413      	add	r3, r2
 80013ee:	b298      	uxth	r0, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	b29c      	uxth	r4, r3
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <BSP_LCD_DrawCircle+0x1d8>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4922      	ldr	r1, [pc, #136]	; (8001488 <BSP_LCD_DrawCircle+0x1dc>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4621      	mov	r1, r4
 8001410:	f000 f83c 	bl	800148c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	b29b      	uxth	r3, r3
 8001418:	88fa      	ldrh	r2, [r7, #6]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b298      	uxth	r0, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	b29a      	uxth	r2, r3
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	b29c      	uxth	r4, r3
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <BSP_LCD_DrawCircle+0x1d8>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4916      	ldr	r1, [pc, #88]	; (8001488 <BSP_LCD_DrawCircle+0x1dc>)
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4621      	mov	r1, r4
 800143e:	f000 f825 	bl	800148c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da06      	bge.n	8001456 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	009a      	lsls	r2, r3, #2
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	4413      	add	r3, r2
 8001450:	3306      	adds	r3, #6
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e00a      	b.n	800146c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	009a      	lsls	r2, r3, #2
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4413      	add	r3, r2
 8001462:	330a      	adds	r3, #10
 8001464:	617b      	str	r3, [r7, #20]
      current_y--;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3b01      	subs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	3301      	adds	r3, #1
 8001470:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	429a      	cmp	r2, r3
 8001478:	f67f af2b 	bls.w	80012d2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	200000ac 	.word	0x200000ac
 8001488:	200000b0 	.word	0x200000b0

0800148c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	603a      	str	r2, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	460b      	mov	r3, r1
 800149a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <BSP_LCD_DrawPixel+0x88>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <BSP_LCD_DrawPixel+0x8c>)
 80014a2:	2134      	movs	r1, #52	; 0x34
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	3348      	adds	r3, #72	; 0x48
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d116      	bne.n	80014e0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <BSP_LCD_DrawPixel+0x88>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <BSP_LCD_DrawPixel+0x8c>)
 80014b8:	2134      	movs	r1, #52	; 0x34
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4413      	add	r3, r2
 80014c0:	335c      	adds	r3, #92	; 0x5c
 80014c2:	681c      	ldr	r4, [r3, #0]
 80014c4:	88bd      	ldrh	r5, [r7, #4]
 80014c6:	f7ff fc29 	bl	8000d1c <BSP_LCD_GetXSize>
 80014ca:	4603      	mov	r3, r0
 80014cc:	fb03 f205 	mul.w	r2, r3, r5
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4413      	add	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4423      	add	r3, r4
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	b292      	uxth	r2, r2
 80014dc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80014de:	e015      	b.n	800150c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <BSP_LCD_DrawPixel+0x88>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <BSP_LCD_DrawPixel+0x8c>)
 80014e6:	2134      	movs	r1, #52	; 0x34
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	335c      	adds	r3, #92	; 0x5c
 80014f0:	681c      	ldr	r4, [r3, #0]
 80014f2:	88bd      	ldrh	r5, [r7, #4]
 80014f4:	f7ff fc12 	bl	8000d1c <BSP_LCD_GetXSize>
 80014f8:	4603      	mov	r3, r0
 80014fa:	fb03 f205 	mul.w	r2, r3, r5
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4423      	add	r3, r4
 8001506:	461a      	mov	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bdb0      	pop	{r4, r5, r7, pc}
 8001514:	200000ac 	.word	0x200000ac
 8001518:	2000025c 	.word	0x2000025c

0800151c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
 8001526:	460b      	mov	r3, r1
 8001528:	80bb      	strh	r3, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	f1c3 0303 	rsb	r3, r3, #3
 8001536:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001540:	4b44      	ldr	r3, [pc, #272]	; (8001654 <BSP_LCD_FillCircle+0x138>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4944      	ldr	r1, [pc, #272]	; (8001658 <BSP_LCD_FillCircle+0x13c>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fc58 	bl	8000e08 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8001558:	e061      	b.n	800161e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	b29b      	uxth	r3, r3
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b298      	uxth	r0, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	b29a      	uxth	r2, r3
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	b299      	uxth	r1, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	b29b      	uxth	r3, r3
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	b29b      	uxth	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	f7ff fdd5 	bl	800112c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	b29b      	uxth	r3, r3
 8001586:	88fa      	ldrh	r2, [r7, #6]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	b298      	uxth	r0, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	b29b      	uxth	r3, r3
 8001590:	88ba      	ldrh	r2, [r7, #4]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b299      	uxth	r1, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	b29b      	uxth	r3, r3
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	f7ff fdc4 	bl	800112c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d021      	beq.n	80015ee <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b298      	uxth	r0, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	88ba      	ldrh	r2, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	b299      	uxth	r1, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	f7ff fdb0 	bl	800112c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	88fa      	ldrh	r2, [r7, #6]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	b298      	uxth	r0, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	88bb      	ldrh	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	b299      	uxth	r1, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	f7ff fd9f 	bl	800112c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da06      	bge.n	8001602 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	009a      	lsls	r2, r3, #2
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4413      	add	r3, r2
 80015fc:	3306      	adds	r3, #6
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00a      	b.n	8001618 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	009a      	lsls	r2, r3, #2
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4413      	add	r3, r2
 800160e:	330a      	adds	r3, #10
 8001610:	617b      	str	r3, [r7, #20]
      current_y--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b01      	subs	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	3301      	adds	r3, #1
 800161c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	429a      	cmp	r2, r3
 8001624:	d999      	bls.n	800155a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <BSP_LCD_FillCircle+0x138>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	490b      	ldr	r1, [pc, #44]	; (8001658 <BSP_LCD_FillCircle+0x13c>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fbe5 	bl	8000e08 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	88b9      	ldrh	r1, [r7, #4]
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fe31 	bl	80012ac <BSP_LCD_DrawCircle>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200000ac 	.word	0x200000ac
 8001658:	200000b0 	.word	0x200000b0

0800165c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	603a      	str	r2, [r7, #0]
 8001666:	80fb      	strh	r3, [r7, #6]
 8001668:	460b      	mov	r3, r1
 800166a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <DrawChar+0x168>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4953      	ldr	r1, [pc, #332]	; (80017c8 <DrawChar+0x16c>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	3308      	adds	r3, #8
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	88db      	ldrh	r3, [r3, #6]
 800168a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800168c:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <DrawChar+0x168>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	494d      	ldr	r1, [pc, #308]	; (80017c8 <DrawChar+0x16c>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3308      	adds	r3, #8
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80016a4:	8a3b      	ldrh	r3, [r7, #16]
 80016a6:	3307      	adds	r3, #7
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	da00      	bge.n	80016ae <DrawChar+0x52>
 80016ac:	3307      	adds	r3, #7
 80016ae:	10db      	asrs	r3, r3, #3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	8a3b      	ldrh	r3, [r7, #16]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e076      	b.n	80017b2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80016c4:	8a3b      	ldrh	r3, [r7, #16]
 80016c6:	3307      	adds	r3, #7
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da00      	bge.n	80016ce <DrawChar+0x72>
 80016cc:	3307      	adds	r3, #7
 80016ce:	10db      	asrs	r3, r3, #3
 80016d0:	461a      	mov	r2, r3
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fb03 f302 	mul.w	r3, r3, r2
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80016de:	8a3b      	ldrh	r3, [r7, #16]
 80016e0:	3307      	adds	r3, #7
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	da00      	bge.n	80016e8 <DrawChar+0x8c>
 80016e6:	3307      	adds	r3, #7
 80016e8:	10db      	asrs	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d002      	beq.n	80016f4 <DrawChar+0x98>
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d004      	beq.n	80016fc <DrawChar+0xa0>
 80016f2:	e00c      	b.n	800170e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	617b      	str	r3, [r7, #20]
      break;
 80016fa:	e016      	b.n	800172a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	3201      	adds	r2, #1
 8001706:	7812      	ldrb	r2, [r2, #0]
 8001708:	4313      	orrs	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
      break;
 800170c:	e00d      	b.n	800172a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	041a      	lsls	r2, r3, #16
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3301      	adds	r3, #1
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4313      	orrs	r3, r2
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	3202      	adds	r2, #2
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
      break;
 8001728:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	e036      	b.n	800179e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001730:	8a3a      	ldrh	r2, [r7, #16]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad2      	subs	r2, r2, r3
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	4413      	add	r3, r2
 800173a:	3b01      	subs	r3, #1
 800173c:	2201      	movs	r2, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	461a      	mov	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d012      	beq.n	8001772 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	b29a      	uxth	r2, r3
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	4413      	add	r3, r2
 8001754:	b298      	uxth	r0, r3
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <DrawChar+0x168>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	491b      	ldr	r1, [pc, #108]	; (80017c8 <DrawChar+0x16c>)
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff fe8e 	bl	800148c <BSP_LCD_DrawPixel>
 8001770:	e012      	b.n	8001798 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	b29a      	uxth	r2, r3
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	4413      	add	r3, r2
 800177a:	b298      	uxth	r0, r3
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <DrawChar+0x168>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4911      	ldr	r1, [pc, #68]	; (80017c8 <DrawChar+0x16c>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3304      	adds	r3, #4
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fe7a 	bl	800148c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	3301      	adds	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	8a3b      	ldrh	r3, [r7, #16]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3c4      	bcc.n	8001730 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	3301      	adds	r3, #1
 80017aa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	3301      	adds	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	8a7b      	ldrh	r3, [r7, #18]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d384      	bcc.n	80016c4 <DrawChar+0x68>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000ac 	.word	0x200000ac
 80017c8:	200000b0 	.word	0x200000b0

080017cc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <LL_FillBuffer+0xa4>)
 80017dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017e0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <LL_FillBuffer+0xa8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a24      	ldr	r2, [pc, #144]	; (8001878 <LL_FillBuffer+0xac>)
 80017e8:	2134      	movs	r1, #52	; 0x34
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	3348      	adds	r3, #72	; 0x48
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d111      	bne.n	800181c <LL_FillBuffer+0x50>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <LL_FillBuffer+0xa4>)
 80017fa:	2202      	movs	r2, #2
 80017fc:	609a      	str	r2, [r3, #8]
		ColorIndex = ((ColorIndex & LCD_COLOR_RED)<<8) | ((ColorIndex & LCD_COLOR_GREEN )<<5) | ((ColorIndex & LCD_COLOR_BLUE) << 3);
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	f403 0278 	and.w	r2, r3, #16252928	; 0xf80000
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800180e:	431a      	orrs	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e002      	b.n	8001822 <LL_FillBuffer+0x56>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <LL_FillBuffer+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001822:	4a13      	ldr	r2, [pc, #76]	; (8001870 <LL_FillBuffer+0xa4>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <LL_FillBuffer+0xa4>)
 800182a:	4a14      	ldr	r2, [pc, #80]	; (800187c <LL_FillBuffer+0xb0>)
 800182c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800182e:	4810      	ldr	r0, [pc, #64]	; (8001870 <LL_FillBuffer+0xa4>)
 8001830:	f001 fc9a 	bl	8003168 <HAL_DMA2D_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d116      	bne.n	8001868 <LL_FillBuffer+0x9c>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800183a:	68f9      	ldr	r1, [r7, #12]
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <LL_FillBuffer+0xa4>)
 800183e:	f001 fdf1 	bl	8003424 <HAL_DMA2D_ConfigLayer>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <LL_FillBuffer+0x9c>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69f9      	ldr	r1, [r7, #28]
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <LL_FillBuffer+0xa4>)
 8001854:	f001 fcd2 	bl	80031fc <HAL_DMA2D_Start>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d104      	bne.n	8001868 <LL_FillBuffer+0x9c>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 3770);
 800185e:	f640 61ba 	movw	r1, #3770	; 0xeba
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <LL_FillBuffer+0xa4>)
 8001864:	f001 fcf5 	bl	8003252 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000019c 	.word	0x2000019c
 8001874:	200000ac 	.word	0x200000ac
 8001878:	2000025c 	.word	0x2000025c
 800187c:	4002b000 	.word	0x4002b000

08001880 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <BSP_SDRAM_Init+0x1c>)
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <BSP_SDRAM_Init+0x20>)
 8001888:	601a      	str	r2, [r3, #0]
//  {
//    sdramstatus = SDRAM_OK;
//  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800188a:	f240 6003 	movw	r0, #1539	; 0x603
 800188e:	f000 f80b 	bl	80018a8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <BSP_SDRAM_Init+0x24>)
 8001894:	781b      	ldrb	r3, [r3, #0]
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200000c8 	.word	0x200000c8
 80018a0:	a0000140 	.word	0xa0000140
 80018a4:	20000008 	.word	0x20000008

080018a8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018bc:	2208      	movs	r2, #8
 80018be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d0:	4923      	ldr	r1, [pc, #140]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d2:	4824      	ldr	r0, [pc, #144]	; (8001964 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018d4:	f003 fda6 	bl	8005424 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f001 f9b3 	bl	8002c44 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018e0:	2202      	movs	r2, #2
 80018e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018e6:	2208      	movs	r2, #8
 80018e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80018f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fa:	4919      	ldr	r1, [pc, #100]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018fc:	4819      	ldr	r0, [pc, #100]	; (8001964 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018fe:	f003 fd91 	bl	8005424 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001904:	2203      	movs	r2, #3
 8001906:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800190a:	2208      	movs	r2, #8
 800190c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001910:	2208      	movs	r2, #8
 8001912:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800191a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191e:	4910      	ldr	r1, [pc, #64]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001920:	4810      	ldr	r0, [pc, #64]	; (8001964 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001922:	f003 fd7f 	bl	8005424 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001926:	f44f 7308 	mov.w	r3, #544	; 0x220
 800192a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800192e:	2204      	movs	r2, #4
 8001930:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001934:	2208      	movs	r2, #8
 8001936:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800193a:	2201      	movs	r2, #1
 800193c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001942:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001948:	4905      	ldr	r1, [pc, #20]	; (8001960 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800194c:	f003 fd6a 	bl	8005424 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4804      	ldr	r0, [pc, #16]	; (8001964 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001954:	f003 fd91 	bl	800547a <HAL_SDRAM_ProgramRefreshRate>
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200000fc 	.word	0x200000fc
 8001964:	200000c8 	.word	0x200000c8

08001968 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void) 
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <MX_DMA_Init+0x90>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <MX_DMA_Init+0x90>)
 8001974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MX_DMA_Init+0x90>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_DMA_Init+0x94>)
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <MX_DMA_Init+0x98>)
 800198a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_DMA_Init+0x94>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_DMA_Init+0x94>)
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_DMA_Init+0x94>)
 800199a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_DMA_Init+0x94>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_DMA_Init+0x94>)
 80019aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ae:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_DMA_Init+0x94>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_DMA_Init+0x94>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_DMA_Init+0x94>)
 80019c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019c4:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MX_DMA_Init+0x94>)
 80019c8:	2204      	movs	r2, #4
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_DMA_Init+0x94>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <MX_DMA_Init+0x94>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_DMA_Init+0x94>)
 80019da:	2200      	movs	r2, #0
 80019dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80019de:	4807      	ldr	r0, [pc, #28]	; (80019fc <MX_DMA_Init+0x94>)
 80019e0:	f001 fa64 	bl	8002eac <HAL_DMA_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_DMA_Init+0x86>
  {
    Error_Handler();
 80019ea:	f000 ff21 	bl	8002830 <Error_Handler>
  }

}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	2000013c 	.word	0x2000013c
 8001a00:	40026410 	.word	0x40026410

08001a04 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a0a:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <MX_DMA2D_Init+0x60>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a38:	4809      	ldr	r0, [pc, #36]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a3a:	f001 fb95 	bl	8003168 <HAL_DMA2D_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001a44:	f000 fef4 	bl	8002830 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_DMA2D_Init+0x5c>)
 8001a4c:	f001 fcea 	bl	8003424 <HAL_DMA2D_ConfigLayer>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001a56:	f000 feeb 	bl	8002830 <Error_Handler>
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000019c 	.word	0x2000019c
 8001a64:	4002b000 	.word	0x4002b000

08001a68 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_DMA2D_MspInit+0x38>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10b      	bne.n	8001a92 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_DMA2D_MspInit+0x3c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_DMA2D_MspInit+0x3c>)
 8001a80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_DMA2D_MspInit+0x3c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	4002b000 	.word	0x4002b000
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_FMC_Init+0x98>)
 8001ac2:	4a20      	ldr	r2, [pc, #128]	; (8001b44 <MX_FMC_Init+0x9c>)
 8001ac4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_FMC_Init+0x98>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_FMC_Init+0x98>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_FMC_Init+0x98>)
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_FMC_Init+0x98>)
 8001ada:	2210      	movs	r2, #16
 8001adc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_FMC_Init+0x98>)
 8001ae0:	2240      	movs	r2, #64	; 0x40
 8001ae2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_FMC_Init+0x98>)
 8001ae6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001aea:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_FMC_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_FMC_Init+0x98>)
 8001af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_FMC_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_FMC_Init+0x98>)
 8001b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001b10:	2304      	movs	r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001b14:	2306      	movs	r3, #6
 8001b16:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_FMC_Init+0x98>)
 8001b2a:	f003 fc47 	bl	80053bc <HAL_SDRAM_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001b34:	f000 fe7c 	bl	8002830 <Error_Handler>
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200001dc 	.word	0x200001dc
 8001b44:	a0000140 	.word	0xa0000140

08001b48 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_FMC_MspInit+0xe4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d15e      	bne.n	8001c22 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_FMC_MspInit+0xe4>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_FMC_MspInit+0xe8>)
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	4a30      	ldr	r2, [pc, #192]	; (8001c30 <HAL_FMC_MspInit+0xe8>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6393      	str	r3, [r2, #56]	; 0x38
 8001b76:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <HAL_FMC_MspInit+0xe8>)
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001b82:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b86:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b94:	230c      	movs	r3, #12
 8001b96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4825      	ldr	r0, [pc, #148]	; (8001c34 <HAL_FMC_MspInit+0xec>)
 8001b9e:	f001 fd6f 	bl	8003680 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ba2:	23e0      	movs	r3, #224	; 0xe0
 8001ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481f      	ldr	r0, [pc, #124]	; (8001c38 <HAL_FMC_MspInit+0xf0>)
 8001bbc:	f001 fd60 	bl	8003680 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8001bc0:	f248 1333 	movw	r3, #33075	; 0x8133
 8001bc4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4818      	ldr	r0, [pc, #96]	; (8001c3c <HAL_FMC_MspInit+0xf4>)
 8001bdc:	f001 fd50 	bl	8003680 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8001be0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001be4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4811      	ldr	r0, [pc, #68]	; (8001c40 <HAL_FMC_MspInit+0xf8>)
 8001bfc:	f001 fd40 	bl	8003680 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8001c00:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c04:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c12:	230c      	movs	r3, #12
 8001c14:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	480a      	ldr	r0, [pc, #40]	; (8001c44 <HAL_FMC_MspInit+0xfc>)
 8001c1c:	f001 fd30 	bl	8003680 <HAL_GPIO_Init>
 8001c20:	e000      	b.n	8001c24 <HAL_FMC_MspInit+0xdc>
    return;
 8001c22:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000010c 	.word	0x2000010c
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40021400 	.word	0x40021400
 8001c38:	40021c00 	.word	0x40021c00
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40020c00 	.word	0x40020c00

08001c48 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c50:	f7ff ff7a 	bl	8001b48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	4b60      	ldr	r3, [pc, #384]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a5f      	ldr	r2, [pc, #380]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001c78:	f043 0310 	orr.w	r3, r3, #16
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	623b      	str	r3, [r7, #32]
 8001c88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a59      	ldr	r2, [pc, #356]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a53      	ldr	r2, [pc, #332]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001ca8:	f043 0320 	orr.w	r3, r3, #32
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cba:	4b4e      	ldr	r3, [pc, #312]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a4d      	ldr	r2, [pc, #308]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a47      	ldr	r2, [pc, #284]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a41      	ldr	r2, [pc, #260]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a3b      	ldr	r2, [pc, #236]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a35      	ldr	r2, [pc, #212]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <MX_GPIO_Init+0x198>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d50:	4829      	ldr	r0, [pc, #164]	; (8001df8 <MX_GPIO_Init+0x19c>)
 8001d52:	f001 fe57 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2108      	movs	r1, #8
 8001d5a:	4828      	ldr	r0, [pc, #160]	; (8001dfc <MX_GPIO_Init+0x1a0>)
 8001d5c:	f001 fe52 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d66:	4826      	ldr	r0, [pc, #152]	; (8001e00 <MX_GPIO_Init+0x1a4>)
 8001d68:	f001 fe4c 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d82:	4619      	mov	r1, r3
 8001d84:	481c      	ldr	r0, [pc, #112]	; (8001df8 <MX_GPIO_Init+0x19c>)
 8001d86:	f001 fc7b 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4816      	ldr	r0, [pc, #88]	; (8001dfc <MX_GPIO_Init+0x1a0>)
 8001da2:	f001 fc6d 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <MX_GPIO_Init+0x1a4>)
 8001dc0:	f001 fc5e 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_GPIO_Init+0x1a8>)
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480a      	ldr	r0, [pc, #40]	; (8001e00 <MX_GPIO_Init+0x1a4>)
 8001dd8:	f001 fc52 	bl	8003680 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2017      	movs	r0, #23
 8001de2:	f001 f82c 	bl	8002e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001de6:	2017      	movs	r0, #23
 8001de8:	f001 f845 	bl	8002e76 <HAL_NVIC_EnableIRQ>

}
 8001dec:	bf00      	nop
 8001dee:	3738      	adds	r7, #56	; 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	10210000 	.word	0x10210000

08001e08 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <MX_I2C4_Init+0x78>)
 8001e10:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30C03444;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <MX_I2C4_Init+0x7c>)
 8001e16:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001e42:	480e      	ldr	r0, [pc, #56]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e44:	f001 fe10 	bl	8003a68 <HAL_I2C_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001e4e:	f000 fcef 	bl	8002830 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e52:	2100      	movs	r1, #0
 8001e54:	4809      	ldr	r0, [pc, #36]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e56:	f001 fe97 	bl	8003b88 <HAL_I2CEx_ConfigAnalogFilter>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f000 fce6 	bl	8002830 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001e64:	2100      	movs	r1, #0
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_I2C4_Init+0x74>)
 8001e68:	f001 fed9 	bl	8003c1e <HAL_I2CEx_ConfigDigitalFilter>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001e72:	f000 fcdd 	bl	8002830 <Error_Handler>
  }

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000210 	.word	0x20000210
 8001e80:	40006000 	.word	0x40006000
 8001e84:	30c03444 	.word	0x30c03444

08001e88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C4)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_I2C_MspInit+0x7c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d128      	bne.n	8001efc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ec2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <HAL_I2C_MspInit+0x84>)
 8001ee0:	f001 fbce 	bl	8003680 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eee:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001efc:	bf00      	nop
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40006000 	.word	0x40006000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020c00 	.word	0x40020c00

08001f10 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b09a      	sub	sp, #104	; 0x68
 8001f14:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f1a:	2234      	movs	r2, #52	; 0x34
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 f86b 	bl	8005ffa <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2234      	movs	r2, #52	; 0x34
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 f865 	bl	8005ffa <memset>

  hltdc.Instance = LTDC;
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f32:	4a54      	ldr	r2, [pc, #336]	; (8002084 <MX_LTDC_Init+0x174>)
 8001f34:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f36:	4b52      	ldr	r3, [pc, #328]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f42:	4b4f      	ldr	r3, [pc, #316]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f48:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 19;
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f50:	2213      	movs	r2, #19
 8001f52:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8001f54:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f56:	2202      	movs	r2, #2
 8001f58:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 159;
 8001f5a:	4b49      	ldr	r3, [pc, #292]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f5c:	229f      	movs	r2, #159	; 0x9f
 8001f5e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 22;
 8001f60:	4b47      	ldr	r3, [pc, #284]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f62:	2216      	movs	r2, #22
 8001f64:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1183;
 8001f66:	4b46      	ldr	r3, [pc, #280]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f68:	f240 429f 	movw	r2, #1183	; 0x49f
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 622;
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f70:	f240 226e 	movw	r2, #622	; 0x26e
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1343;
 8001f76:	4b42      	ldr	r3, [pc, #264]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f78:	f240 523f 	movw	r2, #1343	; 0x53f
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 634;
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f80:	f240 227a 	movw	r2, #634	; 0x27a
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <MX_LTDC_Init+0x170>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f9e:	4838      	ldr	r0, [pc, #224]	; (8002080 <MX_LTDC_Init+0x170>)
 8001fa0:	f001 fe8a 	bl	8003cb8 <HAL_LTDC_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001faa:	f000 fc41 	bl	8002830 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 1024;
 8001fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 600;
 8001fbc:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001fc0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0xFF;
 8001fc6:	23ff      	movs	r3, #255	; 0xff
 8001fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001fce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001fd8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001fdc:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 1024;
 8001fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 600;
 8001fe4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001fe8:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001ffc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	481e      	ldr	r0, [pc, #120]	; (8002080 <MX_LTDC_Init+0x170>)
 8002006:	f001 ff27 	bl	8003e58 <HAL_LTDC_ConfigLayer>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8002010:	f000 fc0e 	bl	8002830 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 1024;
 8002018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 600;
 8002022:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002026:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002028:	2302      	movs	r3, #2
 800202a:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0xFF;
 800202c:	23ff      	movs	r3, #255	; 0xff
 800202e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002034:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002038:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800203a:	2307      	movs	r3, #7
 800203c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0xD0200000;
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_LTDC_Init+0x178>)
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 1024;
 8002042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 600;
 8002048:	f44f 7316 	mov.w	r3, #600	; 0x258
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002060:	463b      	mov	r3, r7
 8002062:	2201      	movs	r2, #1
 8002064:	4619      	mov	r1, r3
 8002066:	4806      	ldr	r0, [pc, #24]	; (8002080 <MX_LTDC_Init+0x170>)
 8002068:	f001 fef6 	bl	8003e58 <HAL_LTDC_ConfigLayer>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_LTDC_Init+0x166>
  {
    Error_Handler();
 8002072:	f000 fbdd 	bl	8002830 <Error_Handler>
  }

}
 8002076:	bf00      	nop
 8002078:	3768      	adds	r7, #104	; 0x68
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000025c 	.word	0x2000025c
 8002084:	40016800 	.word	0x40016800
 8002088:	d0200000 	.word	0xd0200000

0800208c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b092      	sub	sp, #72	; 0x48
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <HAL_LTDC_MspInit+0x268>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	f040 811d 	bne.w	80022ea <HAL_LTDC_MspInit+0x25e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020b0:	4b91      	ldr	r3, [pc, #580]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	4a90      	ldr	r2, [pc, #576]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ba:	6453      	str	r3, [r2, #68]	; 0x44
 80020bc:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c8:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4a8a      	ldr	r2, [pc, #552]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020ce:	f043 0310 	orr.w	r3, r3, #16
 80020d2:	6313      	str	r3, [r2, #48]	; 0x30
 80020d4:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020e0:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a84      	ldr	r2, [pc, #528]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f8:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a7e      	ldr	r2, [pc, #504]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 80020fe:	f043 0320 	orr.w	r3, r3, #32
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	4b7c      	ldr	r3, [pc, #496]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002110:	4b79      	ldr	r3, [pc, #484]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4a78      	ldr	r2, [pc, #480]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	6313      	str	r3, [r2, #48]	; 0x30
 800211c:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	4a72      	ldr	r2, [pc, #456]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6313      	str	r3, [r2, #48]	; 0x30
 8002134:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002140:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a6c      	ldr	r2, [pc, #432]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002158:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	6313      	str	r3, [r2, #48]	; 0x30
 8002164:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a60      	ldr	r2, [pc, #384]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	4b5e      	ldr	r3, [pc, #376]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002188:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <HAL_LTDC_MspInit+0x26c>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80021a0:	2370      	movs	r3, #112	; 0x70
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ac:	2302      	movs	r3, #2
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021b0:	230e      	movs	r3, #14
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b8:	4619      	mov	r1, r3
 80021ba:	4850      	ldr	r0, [pc, #320]	; (80022fc <HAL_LTDC_MspInit+0x270>)
 80021bc:	f001 fa60 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1 
 80021c0:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ce:	2302      	movs	r3, #2
 80021d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021d2:	230e      	movs	r3, #14
 80021d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021da:	4619      	mov	r1, r3
 80021dc:	4848      	ldr	r0, [pc, #288]	; (8002300 <HAL_LTDC_MspInit+0x274>)
 80021de:	f001 fa4f 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f0:	2302      	movs	r3, #2
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f4:	230e      	movs	r3, #14
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021fc:	4619      	mov	r1, r3
 80021fe:	4841      	ldr	r0, [pc, #260]	; (8002304 <HAL_LTDC_MspInit+0x278>)
 8002200:	f001 fa3e 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002204:	2301      	movs	r3, #1
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002214:	230e      	movs	r3, #14
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800221c:	4619      	mov	r1, r3
 800221e:	483a      	ldr	r0, [pc, #232]	; (8002308 <HAL_LTDC_MspInit+0x27c>)
 8002220:	f001 fa2e 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002224:	2304      	movs	r3, #4
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002234:	230e      	movs	r3, #14
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800223c:	4619      	mov	r1, r3
 800223e:	4833      	ldr	r0, [pc, #204]	; (800230c <HAL_LTDC_MspInit+0x280>)
 8002240:	f001 fa1e 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002244:	f24a 7304 	movw	r3, #42756	; 0xa704
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002252:	2302      	movs	r3, #2
 8002254:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002256:	230e      	movs	r3, #14
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800225a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800225e:	4619      	mov	r1, r3
 8002260:	482b      	ldr	r0, [pc, #172]	; (8002310 <HAL_LTDC_MspInit+0x284>)
 8002262:	f001 fa0d 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002266:	2302      	movs	r3, #2
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002276:	2309      	movs	r3, #9
 8002278:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800227e:	4619      	mov	r1, r3
 8002280:	4824      	ldr	r0, [pc, #144]	; (8002314 <HAL_LTDC_MspInit+0x288>)
 8002282:	f001 f9fd 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 8002286:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002294:	2302      	movs	r3, #2
 8002296:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002298:	230e      	movs	r3, #14
 800229a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800229c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a0:	4619      	mov	r1, r3
 80022a2:	481d      	ldr	r0, [pc, #116]	; (8002318 <HAL_LTDC_MspInit+0x28c>)
 80022a4:	f001 f9ec 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b4:	2302      	movs	r3, #2
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022b8:	230e      	movs	r3, #14
 80022ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022c0:	4619      	mov	r1, r3
 80022c2:	4816      	ldr	r0, [pc, #88]	; (800231c <HAL_LTDC_MspInit+0x290>)
 80022c4:	f001 f9dc 	bl	8003680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d6:	2302      	movs	r3, #2
 80022d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022da:	2309      	movs	r3, #9
 80022dc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022e2:	4619      	mov	r1, r3
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <HAL_LTDC_MspInit+0x28c>)
 80022e6:	f001 f9cb 	bl	8003680 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	3748      	adds	r7, #72	; 0x48
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40016800 	.word	0x40016800
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40022000 	.word	0x40022000
 8002304:	40021400 	.word	0x40021400
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000
 8002310:	40021c00 	.word	0x40021c00
 8002314:	40020400 	.word	0x40020400
 8002318:	40021800 	.word	0x40021800
 800231c:	40020c00 	.word	0x40020c00

08002320 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002328:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <SCB_EnableICache+0x3c>)
 800232e:	2200      	movs	r2, #0
 8002330:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002338:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <SCB_EnableICache+0x3c>)
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4a06      	ldr	r2, [pc, #24]	; (800235c <SCB_EnableICache+0x3c>)
 8002342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002346:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800234c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <SCB_EnableDCache+0x7c>)
 8002368:	2200      	movs	r2, #0
 800236a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800236e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <SCB_EnableDCache+0x7c>)
 8002374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002378:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0b5b      	lsrs	r3, r3, #13
 800237e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002382:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	08db      	lsrs	r3, r3, #3
 8002388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002396:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800239c:	490f      	ldr	r1, [pc, #60]	; (80023dc <SCB_EnableDCache+0x7c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1e5a      	subs	r2, r3, #1
 80023a8:	60ba      	str	r2, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ef      	bne.n	800238e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e5      	bne.n	8002384 <SCB_EnableDCache+0x24>
 80023b8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <SCB_EnableDCache+0x7c>)
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	4a06      	ldr	r2, [pc, #24]	; (80023dc <SCB_EnableDCache+0x7c>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	6153      	str	r3, [r2, #20]
 80023c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023cc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//initialise_monitor_handles();
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80023e4:	f7ff ff9c 	bl	8002320 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80023e8:	f7ff ffba 	bl	8002360 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ec:	f000 fbcd 	bl	8002b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023f0:	f000 f968 	bl	80026c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f4:	f7ff fc32 	bl	8001c5c <MX_GPIO_Init>
  MX_DMA_Init();
 80023f8:	f7ff fab6 	bl	8001968 <MX_DMA_Init>
  MX_DMA2D_Init();
 80023fc:	f7ff fb02 	bl	8001a04 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002400:	f7ff fb52 	bl	8001aa8 <MX_FMC_Init>
  MX_I2C4_Init();
 8002404:	f7ff fd00 	bl	8001e08 <MX_I2C4_Init>
  MX_LTDC_Init();
 8002408:	f7ff fd82 	bl	8001f10 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 800240c:	f000 fb20 	bl	8002a50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	2108      	movs	r1, #8
 8002414:	48a2      	ldr	r0, [pc, #648]	; (80026a0 <main+0x2c0>)
 8002416:	f001 faf5 	bl	8003a04 <HAL_GPIO_WritePin>
	BSP_SDRAM_Init();
 800241a:	f7ff fa31 	bl	8001880 <BSP_SDRAM_Init>
	BSP_LCD_Init();
 800241e:	f7fe fc71 	bl	8000d04 <BSP_LCD_Init>
	GT811_Init();
 8002422:	f7fe f8c5 	bl	80005b0 <GT811_Init>

	BSP_LCD_SetLayerVisible(1,DISABLE);
 8002426:	2100      	movs	r1, #0
 8002428:	2001      	movs	r0, #1
 800242a:	f7fe fcaf 	bl	8000d8c <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(0);
 800242e:	2000      	movs	r0, #0
 8002430:	f7fe fc9c 	bl	8000d6c <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002434:	201f      	movs	r0, #31
 8002436:	f7fe fce7 	bl	8000e08 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800243a:	2000      	movs	r0, #0
 800243c:	f7fe fcfc 	bl	8000e38 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(BSP_LCD_GetBackColor());
 8002440:	f7fe fd14 	bl	8000e6c <BSP_LCD_GetBackColor>
 8002444:	4603      	mov	r3, r0
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fd40 	bl	8000ecc <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font24);
 800244c:	4895      	ldr	r0, [pc, #596]	; (80026a4 <main+0x2c4>)
 800244e:	f7fe fd23 	bl	8000e98 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,0, (uint8_t*)"Capacitive touch screen test",CENTER_MODE);
 8002452:	2301      	movs	r3, #1
 8002454:	4a94      	ldr	r2, [pc, #592]	; (80026a8 <main+0x2c8>)
 8002456:	2100      	movs	r1, #0
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe fda3 	bl	8000fa4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800245e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002462:	f7fe fcd1 	bl	8000e08 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawHLine(0, 30, 1024);
 8002466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246a:	211e      	movs	r1, #30
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe fe5d 	bl	800112c <BSP_LCD_DrawHLine>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TS_flag == 1)
 8002472:	4b8e      	ldr	r3, [pc, #568]	; (80026ac <main+0x2cc>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d1fb      	bne.n	8002472 <main+0x92>
	  		{
	  			GT811_GetState(&TS_State);
 800247a:	488d      	ldr	r0, [pc, #564]	; (80026b0 <main+0x2d0>)
 800247c:	f7fe f8fa 	bl	8000674 <GT811_GetState>
	  			if(TS_State.touchDetected != 0)
 8002480:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <main+0x2d0>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8106 	beq.w	8002696 <main+0x2b6>
	  			{
	  				TouchPoit = TS_BKState.touchDetected;
 800248a:	4b8a      	ldr	r3, [pc, #552]	; (80026b4 <main+0x2d4>)
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	4b8a      	ldr	r3, [pc, #552]	; (80026b8 <main+0x2d8>)
 8002490:	701a      	strb	r2, [r3, #0]
	  				for(i = 0;i < 5;i++)
 8002492:	4b8a      	ldr	r3, [pc, #552]	; (80026bc <main+0x2dc>)
 8002494:	2200      	movs	r2, #0
 8002496:	801a      	strh	r2, [r3, #0]
 8002498:	e03e      	b.n	8002518 <main+0x138>
	  				{
	  					if(TouchPoit & 0x01)
 800249a:	4b87      	ldr	r3, [pc, #540]	; (80026b8 <main+0x2d8>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d02c      	beq.n	8002500 <main+0x120>
	  					{
	  						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fcae 	bl	8000e08 <BSP_LCD_SetTextColor>
	  						BSP_LCD_FillCircle(TS_BKState.touchX[i],TS_BKState.touchY[i],20);
 80024ac:	4b83      	ldr	r3, [pc, #524]	; (80026bc <main+0x2dc>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	4a80      	ldr	r2, [pc, #512]	; (80026b4 <main+0x2d4>)
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	8858      	ldrh	r0, [r3, #2]
 80024b8:	4b80      	ldr	r3, [pc, #512]	; (80026bc <main+0x2dc>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	4a7d      	ldr	r2, [pc, #500]	; (80026b4 <main+0x2d4>)
 80024be:	3304      	adds	r3, #4
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	889b      	ldrh	r3, [r3, #4]
 80024c6:	2214      	movs	r2, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7ff f827 	bl	800151c <BSP_LCD_FillCircle>
	  						BSP_LCD_DrawVLine(TS_BKState.touchX[i], 55, 580);
 80024ce:	4b7b      	ldr	r3, [pc, #492]	; (80026bc <main+0x2dc>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	4a78      	ldr	r2, [pc, #480]	; (80026b4 <main+0x2d4>)
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	885b      	ldrh	r3, [r3, #2]
 80024da:	f44f 7211 	mov.w	r2, #580	; 0x244
 80024de:	2137      	movs	r1, #55	; 0x37
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fe81 	bl	80011e8 <BSP_LCD_DrawVLine>
	  						BSP_LCD_DrawHLine(5, TS_BKState.touchY[i], 1004);
 80024e6:	4b75      	ldr	r3, [pc, #468]	; (80026bc <main+0x2dc>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	4a72      	ldr	r2, [pc, #456]	; (80026b4 <main+0x2d4>)
 80024ec:	3304      	adds	r3, #4
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80024f8:	4619      	mov	r1, r3
 80024fa:	2005      	movs	r0, #5
 80024fc:	f7fe fe16 	bl	800112c <BSP_LCD_DrawHLine>
	  					}
	  					TouchPoit >>= 1;
 8002500:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <main+0x2d8>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b6b      	ldr	r3, [pc, #428]	; (80026b8 <main+0x2d8>)
 800250a:	701a      	strb	r2, [r3, #0]
	  				for(i = 0;i < 5;i++)
 800250c:	4b6b      	ldr	r3, [pc, #428]	; (80026bc <main+0x2dc>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b69      	ldr	r3, [pc, #420]	; (80026bc <main+0x2dc>)
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <main+0x2dc>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d9bc      	bls.n	800249a <main+0xba>
	  				}

	  				TouchPoit = TS_State.touchDetected;
 8002520:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <main+0x2d0>)
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <main+0x2d8>)
 8002526:	701a      	strb	r2, [r3, #0]
	  				for(i = 0;i < 5;i++)
 8002528:	4b64      	ldr	r3, [pc, #400]	; (80026bc <main+0x2dc>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e0a9      	b.n	8002684 <main+0x2a4>
	  				{
	  					if(TouchPoit & 0x01)
 8002530:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <main+0x2d8>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8097 	beq.w	800266c <main+0x28c>
	  					{
	  						if(TS_State.touchY[i] <  75)TS_State.touchY[i] =  75;
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <main+0x2dc>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	4a5b      	ldr	r2, [pc, #364]	; (80026b0 <main+0x2d0>)
 8002544:	3304      	adds	r3, #4
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	889b      	ldrh	r3, [r3, #4]
 800254c:	2b4a      	cmp	r3, #74	; 0x4a
 800254e:	d807      	bhi.n	8002560 <main+0x180>
 8002550:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <main+0x2dc>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <main+0x2d0>)
 8002556:	3304      	adds	r3, #4
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	224b      	movs	r2, #75	; 0x4b
 800255e:	809a      	strh	r2, [r3, #4]
	  						if(TS_State.touchY[i] > 580)TS_State.touchY[i] = 580;
 8002560:	4b56      	ldr	r3, [pc, #344]	; (80026bc <main+0x2dc>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	4a52      	ldr	r2, [pc, #328]	; (80026b0 <main+0x2d0>)
 8002566:	3304      	adds	r3, #4
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	889b      	ldrh	r3, [r3, #4]
 800256e:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002572:	d908      	bls.n	8002586 <main+0x1a6>
 8002574:	4b51      	ldr	r3, [pc, #324]	; (80026bc <main+0x2dc>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	4a4d      	ldr	r2, [pc, #308]	; (80026b0 <main+0x2d0>)
 800257a:	3304      	adds	r3, #4
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002584:	809a      	strh	r2, [r3, #4]
	  						if(TS_State.touchX[i] <  20)TS_State.touchX[i] =  20;
 8002586:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <main+0x2dc>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	4a49      	ldr	r2, [pc, #292]	; (80026b0 <main+0x2d0>)
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	885b      	ldrh	r3, [r3, #2]
 8002592:	2b13      	cmp	r3, #19
 8002594:	d806      	bhi.n	80025a4 <main+0x1c4>
 8002596:	4b49      	ldr	r3, [pc, #292]	; (80026bc <main+0x2dc>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	4a45      	ldr	r2, [pc, #276]	; (80026b0 <main+0x2d0>)
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	2214      	movs	r2, #20
 80025a2:	805a      	strh	r2, [r3, #2]
	  						if(TS_State.touchX[i] > 1004)TS_State.touchX[i] = 1004;
 80025a4:	4b45      	ldr	r3, [pc, #276]	; (80026bc <main+0x2dc>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	4a41      	ldr	r2, [pc, #260]	; (80026b0 <main+0x2d0>)
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	885b      	ldrh	r3, [r3, #2]
 80025b0:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 80025b4:	d907      	bls.n	80025c6 <main+0x1e6>
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <main+0x2dc>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	4a3d      	ldr	r2, [pc, #244]	; (80026b0 <main+0x2d0>)
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80025c4:	805a      	strh	r2, [r3, #2]

	  						BSP_LCD_SetTextColor(PointColor[i]);
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <main+0x2dc>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <main+0x2e0>)
 80025ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fc18 	bl	8000e08 <BSP_LCD_SetTextColor>
	  						BSP_LCD_FillCircle(TS_State.touchX[i],TS_State.touchY[i],20);
 80025d8:	4b38      	ldr	r3, [pc, #224]	; (80026bc <main+0x2dc>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <main+0x2d0>)
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	8858      	ldrh	r0, [r3, #2]
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <main+0x2dc>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	4a31      	ldr	r2, [pc, #196]	; (80026b0 <main+0x2d0>)
 80025ea:	3304      	adds	r3, #4
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	889b      	ldrh	r3, [r3, #4]
 80025f2:	2214      	movs	r2, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe ff91 	bl	800151c <BSP_LCD_FillCircle>
	  						BSP_LCD_DrawVLine(TS_State.touchX[i], 55, 580);
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <main+0x2dc>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	4a2c      	ldr	r2, [pc, #176]	; (80026b0 <main+0x2d0>)
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	885b      	ldrh	r3, [r3, #2]
 8002606:	f44f 7211 	mov.w	r2, #580	; 0x244
 800260a:	2137      	movs	r1, #55	; 0x37
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fdeb 	bl	80011e8 <BSP_LCD_DrawVLine>
	  						BSP_LCD_DrawHLine(5, TS_State.touchY[i], 1004);
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <main+0x2dc>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <main+0x2d0>)
 8002618:	3304      	adds	r3, #4
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	889b      	ldrh	r3, [r3, #4]
 8002620:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8002624:	4619      	mov	r1, r3
 8002626:	2005      	movs	r0, #5
 8002628:	f7fe fd80 	bl	800112c <BSP_LCD_DrawHLine>
	  						TS_BKState.touchX[i] = TS_State.touchX[i];
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <main+0x2dc>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <main+0x2dc>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <main+0x2d0>)
 800263a:	004b      	lsls	r3, r1, #1
 800263c:	4413      	add	r3, r2
 800263e:	8859      	ldrh	r1, [r3, #2]
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <main+0x2d4>)
 8002642:	0043      	lsls	r3, r0, #1
 8002644:	4413      	add	r3, r2
 8002646:	460a      	mov	r2, r1
 8002648:	805a      	strh	r2, [r3, #2]
	  						TS_BKState.touchY[i] = TS_State.touchY[i];
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <main+0x2dc>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <main+0x2dc>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <main+0x2d0>)
 8002658:	1d0b      	adds	r3, r1, #4
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	8899      	ldrh	r1, [r3, #4]
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <main+0x2d4>)
 8002662:	1d03      	adds	r3, r0, #4
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	460a      	mov	r2, r1
 800266a:	809a      	strh	r2, [r3, #4]
	  					}
	  					TouchPoit >>= 1;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <main+0x2d8>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <main+0x2d8>)
 8002676:	701a      	strb	r2, [r3, #0]
	  				for(i = 0;i < 5;i++)
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <main+0x2dc>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <main+0x2dc>)
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <main+0x2dc>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2b04      	cmp	r3, #4
 800268a:	f67f af51 	bls.w	8002530 <main+0x150>
	  				}
	  				TS_BKState.touchDetected = TS_State.touchDetected;
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <main+0x2d0>)
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <main+0x2d4>)
 8002694:	701a      	strb	r2, [r3, #0]
	  			}
	  			TS_flag = 0;
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <main+0x2cc>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
	  if(TS_flag == 1)
 800269c:	e6e9      	b.n	8002472 <main+0x92>
 800269e:	bf00      	nop
 80026a0:	40020000 	.word	0x40020000
 80026a4:	20000000 	.word	0x20000000
 80026a8:	08006f2c 	.word	0x08006f2c
 80026ac:	20000328 	.word	0x20000328
 80026b0:	20000110 	.word	0x20000110
 80026b4:	20000304 	.word	0x20000304
 80026b8:	20000324 	.word	0x20000324
 80026bc:	20000326 	.word	0x20000326
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0b4      	sub	sp, #208	; 0xd0
 80026c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026ce:	2230      	movs	r2, #48	; 0x30
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fc91 	bl	8005ffa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	2284      	movs	r2, #132	; 0x84
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 fc82 	bl	8005ffa <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <SystemClock_Config+0x134>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a3f      	ldr	r2, [pc, #252]	; (80027f8 <SystemClock_Config+0x134>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <SystemClock_Config+0x134>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270e:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <SystemClock_Config+0x138>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a3a      	ldr	r2, [pc, #232]	; (80027fc <SystemClock_Config+0x138>)
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b38      	ldr	r3, [pc, #224]	; (80027fc <SystemClock_Config+0x138>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002726:	2301      	movs	r3, #1
 8002728:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800272c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002734:	2302      	movs	r3, #2
 8002736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800273a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800273e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002742:	2308      	movs	r3, #8
 8002744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002748:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800274c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002750:	2302      	movs	r3, #2
 8002752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fda1 	bl	80042a8 <HAL_RCC_OscConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800276c:	f000 f860 	bl	8002830 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002770:	f001 fd4a 	bl	8004208 <HAL_PWREx_EnableOverDrive>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800277a:	f000 f859 	bl	8002830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800277e:	230f      	movs	r3, #15
 8002780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002784:	2302      	movs	r3, #2
 8002786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278a:	2300      	movs	r3, #0
 800278c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80027a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027a4:	2107      	movs	r1, #7
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 f822 	bl	80047f0 <HAL_RCC_ClockConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80027b2:	f000 f83d 	bl	8002830 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <SystemClock_Config+0x13c>)
 80027b8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80027be:	2302      	movs	r3, #2
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80027c2:	2302      	movs	r3, #2
 80027c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80027ce:	2300      	movs	r3, #0
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027d2:	2300      	movs	r3, #0
 80027d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80027d6:	2300      	movs	r3, #0
 80027d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 f9fe 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80027ea:	f000 f821 	bl	8002830 <Error_Handler>
  }
}
 80027ee:	bf00      	nop
 80027f0:	37d0      	adds	r7, #208	; 0xd0
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40007000 	.word	0x40007000
 8002800:	00020048 	.word	0x00020048

08002804 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7)
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d105      	bne.n	8002820 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		TS_flag = 1;
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_GPIO_EXTI_Callback+0x24>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
		printf("ok\r\n");
 800281a:	4804      	ldr	r0, [pc, #16]	; (800282c <HAL_GPIO_EXTI_Callback+0x28>)
 800281c:	f003 fc6a 	bl	80060f4 <puts>
	}
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000328 	.word	0x20000328
 800282c:	08006f4c 	.word	0x08006f4c

08002830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_MspInit+0x44>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_MspInit+0x44>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_MspInit+0x44>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_MspInit+0x44>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a08      	ldr	r2, [pc, #32]	; (8002884 <HAL_MspInit+0x44>)
 8002864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_MspInit+0x44>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <HardFault_Handler+0x4>

0800289c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <MemManage_Handler+0x4>

080028a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a6:	e7fe      	b.n	80028a6 <BusFault_Handler+0x4>

080028a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <UsageFault_Handler+0x4>

080028ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028dc:	f000 f992 	bl	8002c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80028e8:	2080      	movs	r0, #128	; 0x80
 80028ea:	f001 f8a5 	bl	8003a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e00a      	b.n	800291a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002904:	f3af 8000 	nop.w
 8002908:	4601      	mov	r1, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	60ba      	str	r2, [r7, #8]
 8002910:	b2ca      	uxtb	r2, r1
 8002912:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3301      	adds	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	dbf0      	blt.n	8002904 <_read+0x12>
	}

return len;
 8002922:	687b      	ldr	r3, [r7, #4]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e009      	b.n	8002952 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	60ba      	str	r2, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	dbf1      	blt.n	800293e <_write+0x12>
	}
	return len;
 800295a:	687b      	ldr	r3, [r7, #4]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_close>:

int _close(int file)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	return -1;
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800298c:	605a      	str	r2, [r3, #4]
	return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_isatty>:

int _isatty(int file)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	return 1;
 80029a4:	2301      	movs	r3, #1
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
	return 0;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <_sbrk+0x50>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <_sbrk+0x16>
		heap_end = &end;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <_sbrk+0x50>)
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <_sbrk+0x54>)
 80029e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <_sbrk+0x50>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <_sbrk+0x50>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	466a      	mov	r2, sp
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d907      	bls.n	8002a06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80029f6:	f003 facb 	bl	8005f90 <__errno>
 80029fa:	4602      	mov	r2, r0
 80029fc:	230c      	movs	r3, #12
 80029fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	e006      	b.n	8002a14 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <_sbrk+0x50>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a03      	ldr	r2, [pc, #12]	; (8002a1c <_sbrk+0x50>)
 8002a10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000130 	.word	0x20000130
 8002a20:	200003b8 	.word	0x200003b8

08002a24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <SystemInit+0x28>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <SystemInit+0x28>)
 8002a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SystemInit+0x28>)
 8002a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a56:	4a15      	ldr	r2, [pc, #84]	; (8002aac <MX_USART1_UART_Init+0x5c>)
 8002a58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a76:	220c      	movs	r2, #12
 8002a78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a92:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <MX_USART1_UART_Init+0x58>)
 8002a94:	f002 fd11 	bl	80054ba <HAL_UART_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a9e:	f7ff fec7 	bl	8002830 <Error_Handler>
  }

}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000032c 	.word	0x2000032c
 8002aac:	40011000 	.word	0x40011000

08002ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <HAL_UART_MspInit+0x7c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d128      	bne.n	8002b24 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_UART_MspInit+0x80>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <HAL_UART_MspInit+0x80>)
 8002ad8:	f043 0310 	orr.w	r3, r3, #16
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_UART_MspInit+0x80>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_UART_MspInit+0x80>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_UART_MspInit+0x80>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_UART_MspInit+0x80>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b14:	2307      	movs	r3, #7
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4805      	ldr	r0, [pc, #20]	; (8002b34 <HAL_UART_MspInit+0x84>)
 8002b20:	f000 fdae 	bl	8003680 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b24:	bf00      	nop
 8002b26:	3728      	adds	r7, #40	; 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40011000 	.word	0x40011000
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020000 	.word	0x40020000

08002b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b3e:	e003      	b.n	8002b48 <LoopCopyDataInit>

08002b40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b46:	3104      	adds	r1, #4

08002b48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b48:	480b      	ldr	r0, [pc, #44]	; (8002b78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b50:	d3f6      	bcc.n	8002b40 <CopyDataInit>
  ldr  r2, =_sbss
 8002b52:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b54:	e002      	b.n	8002b5c <LoopFillZerobss>

08002b56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b58:	f842 3b04 	str.w	r3, [r2], #4

08002b5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b60:	d3f9      	bcc.n	8002b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b62:	f7ff ff5f 	bl	8002a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b66:	f003 fa19 	bl	8005f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b6a:	f7ff fc39 	bl	80023e0 <main>
  bx  lr    
 8002b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b70:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002b74:	08008ad0 	.word	0x08008ad0
  ldr  r0, =_sdata
 8002b78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b7c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8002b80:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8002b84:	200003b4 	.word	0x200003b4

08002b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b88:	e7fe      	b.n	8002b88 <ADC_IRQHandler>

08002b8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8e:	2003      	movs	r0, #3
 8002b90:	f000 f94a 	bl	8002e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f000 f805 	bl	8002ba4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b9a:	f7ff fe51 	bl	8002840 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_InitTick+0x54>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_InitTick+0x58>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f965 	bl	8002e92 <HAL_SYSTICK_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e00e      	b.n	8002bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b0f      	cmp	r3, #15
 8002bd6:	d80a      	bhi.n	8002bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002be0:	f000 f92d 	bl	8002e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be4:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <HAL_InitTick+0x5c>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000020 	.word	0x20000020
 8002bfc:	20000028 	.word	0x20000028
 8002c00:	20000024 	.word	0x20000024

08002c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_IncTick+0x20>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_IncTick+0x24>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_IncTick+0x24>)
 8002c16:	6013      	str	r3, [r2, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000028 	.word	0x20000028
 8002c28:	200003ac 	.word	0x200003ac

08002c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_GetTick+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	200003ac 	.word	0x200003ac

08002c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff ffee 	bl	8002c2c <HAL_GetTick>
 8002c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d005      	beq.n	8002c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_Delay+0x40>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c6a:	bf00      	nop
 8002c6c:	f7ff ffde 	bl	8002c2c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d8f7      	bhi.n	8002c6c <HAL_Delay+0x28>
  {
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000028 	.word	0x20000028

08002c88 <__NVIC_SetPriorityGrouping>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <__NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb6:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	60d3      	str	r3, [r2, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00
 8002ccc:	05fa0000 	.word	0x05fa0000

08002cd0 <__NVIC_GetPriorityGrouping>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	f003 0307 	and.w	r3, r3, #7
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_EnableIRQ>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db0b      	blt.n	8002d16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	4907      	ldr	r1, [pc, #28]	; (8002d24 <__NVIC_EnableIRQ+0x38>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100

08002d28 <__NVIC_SetPriority>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	db0a      	blt.n	8002d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	490c      	ldr	r1, [pc, #48]	; (8002d74 <__NVIC_SetPriority+0x4c>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d50:	e00a      	b.n	8002d68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4908      	ldr	r1, [pc, #32]	; (8002d78 <__NVIC_SetPriority+0x50>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	3b04      	subs	r3, #4
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	440b      	add	r3, r1
 8002d66:	761a      	strb	r2, [r3, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000e100 	.word	0xe000e100
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <NVIC_EncodePriority>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f1c3 0307 	rsb	r3, r3, #7
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	bf28      	it	cs
 8002d9a:	2304      	movcs	r3, #4
 8002d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3304      	adds	r3, #4
 8002da2:	2b06      	cmp	r3, #6
 8002da4:	d902      	bls.n	8002dac <NVIC_EncodePriority+0x30>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3b03      	subs	r3, #3
 8002daa:	e000      	b.n	8002dae <NVIC_EncodePriority+0x32>
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	43d9      	mvns	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	4313      	orrs	r3, r2
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df4:	d301      	bcc.n	8002dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00f      	b.n	8002e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <SysTick_Config+0x40>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e02:	210f      	movs	r1, #15
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	f7ff ff8e 	bl	8002d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <SysTick_Config+0x40>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <SysTick_Config+0x40>)
 8002e14:	2207      	movs	r2, #7
 8002e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000e010 	.word	0xe000e010

08002e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff29 	bl	8002c88 <__NVIC_SetPriorityGrouping>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e50:	f7ff ff3e 	bl	8002cd0 <__NVIC_GetPriorityGrouping>
 8002e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7ff ff8e 	bl	8002d7c <NVIC_EncodePriority>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff5d 	bl	8002d28 <__NVIC_SetPriority>
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff31 	bl	8002cec <__NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ffa2 	bl	8002de4 <SysTick_Config>
 8002ea0:	4603      	mov	r3, r0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7ff feb8 	bl	8002c2c <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e099      	b.n	8002ffc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee8:	e00f      	b.n	8002f0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eea:	f7ff fe9f 	bl	8002c2c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d908      	bls.n	8002f0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2203      	movs	r2, #3
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e078      	b.n	8002ffc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e8      	bne.n	8002eea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4b38      	ldr	r3, [pc, #224]	; (8003004 <HAL_DMA_Init+0x158>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d107      	bne.n	8002f74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d117      	bne.n	8002fce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f85f 	bl	8003074 <DMA_CheckFifoParam>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e016      	b.n	8002ffc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f816 	bl	8003008 <DMA_CalcBaseAndBitshift>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	223f      	movs	r2, #63	; 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	f010803f 	.word	0xf010803f

08003008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3b10      	subs	r3, #16
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <DMA_CalcBaseAndBitshift+0x60>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <DMA_CalcBaseAndBitshift+0x64>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d908      	bls.n	8003048 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <DMA_CalcBaseAndBitshift+0x68>)
 800303e:	4013      	ands	r3, r2
 8003040:	1d1a      	adds	r2, r3, #4
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	659a      	str	r2, [r3, #88]	; 0x58
 8003046:	e006      	b.n	8003056 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <DMA_CalcBaseAndBitshift+0x68>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	aaaaaaab 	.word	0xaaaaaaab
 800306c:	08008a20 	.word	0x08008a20
 8003070:	fffffc00 	.word	0xfffffc00

08003074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11f      	bne.n	80030ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d855      	bhi.n	8003140 <DMA_CheckFifoParam+0xcc>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <DMA_CheckFifoParam+0x28>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030bf 	.word	0x080030bf
 80030a4:	080030ad 	.word	0x080030ad
 80030a8:	08003141 	.word	0x08003141
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d045      	beq.n	8003144 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030bc:	e042      	b.n	8003144 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c6:	d13f      	bne.n	8003148 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030cc:	e03c      	b.n	8003148 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d6:	d121      	bne.n	800311c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d836      	bhi.n	800314c <DMA_CheckFifoParam+0xd8>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <DMA_CheckFifoParam+0x70>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	080030fb 	.word	0x080030fb
 80030ec:	080030f5 	.word	0x080030f5
 80030f0:	0800310d 	.word	0x0800310d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e02f      	b.n	800315a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d024      	beq.n	8003150 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310a:	e021      	b.n	8003150 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003114:	d11e      	bne.n	8003154 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800311a:	e01b      	b.n	8003154 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <DMA_CheckFifoParam+0xb4>
 8003122:	2b03      	cmp	r3, #3
 8003124:	d003      	beq.n	800312e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003126:	e018      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e015      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
      break;
 800313e:	e00b      	b.n	8003158 <DMA_CheckFifoParam+0xe4>
      break;
 8003140:	bf00      	nop
 8003142:	e00a      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003144:	bf00      	nop
 8003146:	e008      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003148:	bf00      	nop
 800314a:	e006      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 800314c:	bf00      	nop
 800314e:	e004      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003150:	bf00      	nop
 8003152:	e002      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;   
 8003154:	bf00      	nop
 8003156:	e000      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003158:	bf00      	nop
    }
  } 
  
  return status; 
 800315a:	7bfb      	ldrb	r3, [r7, #15]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e039      	b.n	80031ee <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe fc6a 	bl	8001a68 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	f023 0107 	bic.w	r1, r3, #7
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_DMA2D_Init+0x90>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d1      	ldr	r1, [r2, #12]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	430b      	orrs	r3, r1
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	ffffc000 	.word	0xffffc000

080031fc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_DMA2D_Start+0x1c>
 8003214:	2302      	movs	r3, #2
 8003216:	e018      	b.n	800324a <HAL_DMA2D_Start+0x4e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f988 	bl	8003548 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d056      	beq.n	800331c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800326e:	f7ff fcdd 	bl	8002c2c <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003274:	e04b      	b.n	800330e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003284:	2b00      	cmp	r3, #0
 8003286:	d023      	beq.n	80032d0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	f043 0202 	orr.w	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2221      	movs	r2, #33	; 0x21
 80032ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2204      	movs	r2, #4
 80032c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0a5      	b.n	800341c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d01a      	beq.n	800330e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80032d8:	f7ff fca8 	bl	8002c2c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <HAL_DMA2D_PollForTransfer+0x9c>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2203      	movs	r2, #3
 80032fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e086      	b.n	800341c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ac      	beq.n	8003276 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d061      	beq.n	8003402 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800333e:	f7ff fc75 	bl	8002c2c <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003344:	e056      	b.n	80033f4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003354:	2b00      	cmp	r3, #0
 8003356:	d02e      	beq.n	80033b6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	f043 0202 	orr.w	r2, r3, #2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2229      	movs	r2, #41	; 0x29
 80033a0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2204      	movs	r2, #4
 80033a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e032      	b.n	800341c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d01a      	beq.n	80033f4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80033be:	f7ff fc35 	bl	8002c2c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <HAL_DMA2D_PollForTransfer+0x182>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10f      	bne.n	80033f4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2203      	movs	r2, #3
 80033e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e013      	b.n	800341c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0a1      	beq.n	8003346 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2212      	movs	r2, #18
 8003408:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_DMA2D_ConfigLayer+0x20>
 8003440:	2302      	movs	r3, #2
 8003442:	e079      	b.n	8003538 <HAL_DMA2D_ConfigLayer+0x114>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	3318      	adds	r3, #24
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800346e:	4b35      	ldr	r3, [pc, #212]	; (8003544 <HAL_DMA2D_ConfigLayer+0x120>)
 8003470:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b0a      	cmp	r3, #10
 8003478:	d003      	beq.n	8003482 <HAL_DMA2D_ConfigLayer+0x5e>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b09      	cmp	r3, #9
 8003480:	d107      	bne.n	8003492 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e005      	b.n	800349e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d120      	bne.n	80034e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	ea02 0103 	and.w	r1, r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b0a      	cmp	r3, #10
 80034cc:	d003      	beq.n	80034d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	d127      	bne.n	8003526 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
 80034e4:	e01f      	b.n	8003526 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	ea02 0103 	and.w	r1, r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b0a      	cmp	r3, #10
 800350e:	d003      	beq.n	8003518 <HAL_DMA2D_ConfigLayer+0xf4>
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b09      	cmp	r3, #9
 8003516:	d106      	bne.n	8003526 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003524:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	ff03000f 	.word	0xff03000f

08003548 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003548:	b480      	push	{r7}
 800354a:	b08b      	sub	sp, #44	; 0x2c
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	041a      	lsls	r2, r3, #16
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	431a      	orrs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003580:	d174      	bne.n	800366c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003588:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003590:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003598:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d108      	bne.n	80035ba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	e053      	b.n	8003662 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d106      	bne.n	80035d0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e048      	b.n	8003662 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d111      	bne.n	80035fc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	0cdb      	lsrs	r3, r3, #19
 80035dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	0a9b      	lsrs	r3, r3, #10
 80035e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	08db      	lsrs	r3, r3, #3
 80035e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	02db      	lsls	r3, r3, #11
 80035f2:	4313      	orrs	r3, r2
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	e032      	b.n	8003662 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d117      	bne.n	8003634 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	0fdb      	lsrs	r3, r3, #31
 8003608:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	0cdb      	lsrs	r3, r3, #19
 800360e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	0adb      	lsrs	r3, r3, #11
 8003614:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	08db      	lsrs	r3, r3, #3
 800361a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	431a      	orrs	r2, r3
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	03db      	lsls	r3, r3, #15
 800362a:	4313      	orrs	r3, r2
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	e016      	b.n	8003662 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	0f1b      	lsrs	r3, r3, #28
 8003638:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	0d1b      	lsrs	r3, r3, #20
 800363e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	0b1b      	lsrs	r3, r3, #12
 8003644:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	011a      	lsls	r2, r3, #4
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	431a      	orrs	r2, r3
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	031b      	lsls	r3, r3, #12
 800365a:	4313      	orrs	r3, r2
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800366a:	e003      	b.n	8003674 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	60da      	str	r2, [r3, #12]
}
 8003674:	bf00      	nop
 8003676:	372c      	adds	r7, #44	; 0x2c
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e175      	b.n	800398c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	f040 8164 	bne.w	8003986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d00b      	beq.n	80036de <HAL_GPIO_Init+0x5e>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d007      	beq.n	80036de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036d2:	2b11      	cmp	r3, #17
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b12      	cmp	r3, #18
 80036dc:	d130      	bne.n	8003740 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	2203      	movs	r2, #3
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003714:	2201      	movs	r2, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f003 0201 	and.w	r2, r3, #1
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x100>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b12      	cmp	r3, #18
 800377e:	d123      	bne.n	80037c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	08da      	lsrs	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3208      	adds	r2, #8
 8003788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	220f      	movs	r2, #15
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	08da      	lsrs	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3208      	adds	r2, #8
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0203 	and.w	r2, r3, #3
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80be 	beq.w	8003986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <HAL_GPIO_Init+0x320>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	4a64      	ldr	r2, [pc, #400]	; (80039a0 <HAL_GPIO_Init+0x320>)
 8003810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003814:	6453      	str	r3, [r2, #68]	; 0x44
 8003816:	4b62      	ldr	r3, [pc, #392]	; (80039a0 <HAL_GPIO_Init+0x320>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003822:	4a60      	ldr	r2, [pc, #384]	; (80039a4 <HAL_GPIO_Init+0x324>)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	3302      	adds	r3, #2
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	220f      	movs	r2, #15
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a57      	ldr	r2, [pc, #348]	; (80039a8 <HAL_GPIO_Init+0x328>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d037      	beq.n	80038be <HAL_GPIO_Init+0x23e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a56      	ldr	r2, [pc, #344]	; (80039ac <HAL_GPIO_Init+0x32c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d031      	beq.n	80038ba <HAL_GPIO_Init+0x23a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a55      	ldr	r2, [pc, #340]	; (80039b0 <HAL_GPIO_Init+0x330>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <HAL_GPIO_Init+0x236>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a54      	ldr	r2, [pc, #336]	; (80039b4 <HAL_GPIO_Init+0x334>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d025      	beq.n	80038b2 <HAL_GPIO_Init+0x232>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a53      	ldr	r2, [pc, #332]	; (80039b8 <HAL_GPIO_Init+0x338>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_Init+0x22e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_GPIO_Init+0x33c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_Init+0x22a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <HAL_GPIO_Init+0x340>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_Init+0x226>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a50      	ldr	r2, [pc, #320]	; (80039c4 <HAL_GPIO_Init+0x344>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x222>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4f      	ldr	r2, [pc, #316]	; (80039c8 <HAL_GPIO_Init+0x348>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x21e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4e      	ldr	r2, [pc, #312]	; (80039cc <HAL_GPIO_Init+0x34c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x21a>
 8003896:	2309      	movs	r3, #9
 8003898:	e012      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 800389a:	230a      	movs	r3, #10
 800389c:	e010      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 800389e:	2308      	movs	r3, #8
 80038a0:	e00e      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 80038a2:	2307      	movs	r3, #7
 80038a4:	e00c      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 80038a6:	2306      	movs	r3, #6
 80038a8:	e00a      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 80038aa:	2305      	movs	r3, #5
 80038ac:	e008      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 80038ae:	2304      	movs	r3, #4
 80038b0:	e006      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 80038b2:	2303      	movs	r3, #3
 80038b4:	e004      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e002      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_GPIO_Init+0x240>
 80038be:	2300      	movs	r3, #0
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f002 0203 	and.w	r2, r2, #3
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	4093      	lsls	r3, r2
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038d0:	4934      	ldr	r1, [pc, #208]	; (80039a4 <HAL_GPIO_Init+0x324>)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3302      	adds	r3, #2
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038de:	4b3c      	ldr	r3, [pc, #240]	; (80039d0 <HAL_GPIO_Init+0x350>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003902:	4a33      	ldr	r2, [pc, #204]	; (80039d0 <HAL_GPIO_Init+0x350>)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003908:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_GPIO_Init+0x350>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800392c:	4a28      	ldr	r2, [pc, #160]	; (80039d0 <HAL_GPIO_Init+0x350>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <HAL_GPIO_Init+0x350>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003956:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <HAL_GPIO_Init+0x350>)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_GPIO_Init+0x350>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_GPIO_Init+0x350>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3301      	adds	r3, #1
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	f67f ae86 	bls.w	80036a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003994:	bf00      	nop
 8003996:	3724      	adds	r7, #36	; 0x24
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40013800 	.word	0x40013800
 80039a8:	40020000 	.word	0x40020000
 80039ac:	40020400 	.word	0x40020400
 80039b0:	40020800 	.word	0x40020800
 80039b4:	40020c00 	.word	0x40020c00
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40021400 	.word	0x40021400
 80039c0:	40021800 	.word	0x40021800
 80039c4:	40021c00 	.word	0x40021c00
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40022400 	.word	0x40022400
 80039d0:	40013c00 	.word	0x40013c00

080039d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e001      	b.n	80039f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
 8003a10:	4613      	mov	r3, r2
 8003a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a14:	787b      	ldrb	r3, [r7, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a20:	e003      	b.n	8003a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	619a      	str	r2, [r3, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a4e:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fed4 	bl	8002804 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40013c00 	.word	0x40013c00

08003a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe f9fa 	bl	8001e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	e006      	b.n	8003af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d104      	bne.n	8003b02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HAL_I2C_Init+0x11c>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	ea42 0103 	orr.w	r1, r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	021a      	lsls	r2, r3, #8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69d9      	ldr	r1, [r3, #28]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	02008000 	.word	0x02008000

08003b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d138      	bne.n	8003c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e032      	b.n	8003c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	; 0x24
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d139      	bne.n	8003ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e033      	b.n	8003caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2224      	movs	r2, #36	; 0x24
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e000      	b.n	8003caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0bf      	b.n	8003e4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fe f9d4 	bl	800208c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003cfa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6999      	ldr	r1, [r3, #24]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	; (8003e54 <HAL_LTDC_Init+0x19c>)
 8003d2c:	400b      	ands	r3, r1
 8003d2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68d9      	ldr	r1, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <HAL_LTDC_Init+0x19c>)
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68d9      	ldr	r1, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6919      	ldr	r1, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <HAL_LTDC_Init+0x19c>)
 8003d88:	400b      	ands	r3, r1
 8003d8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6919      	ldr	r1, [r3, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6959      	ldr	r1, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <HAL_LTDC_Init+0x19c>)
 8003db6:	400b      	ands	r3, r1
 8003db8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6959      	ldr	r1, [r3, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0206 	orr.w	r2, r2, #6
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	f000f800 	.word	0xf000f800

08003e58 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e58:	b5b0      	push	{r4, r5, r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_LTDC_ConfigLayer+0x1a>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e02c      	b.n	8003ecc <HAL_LTDC_ConfigLayer+0x74>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2134      	movs	r1, #52	; 0x34
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4614      	mov	r4, r2
 8003e96:	461d      	mov	r5, r3
 8003e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f811 	bl	8003ed4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bdb0      	pop	{r4, r5, r7, pc}

08003ed4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b089      	sub	sp, #36	; 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef0:	4413      	add	r3, r2
 8003ef2:	041b      	lsls	r3, r3, #16
 8003ef4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	01db      	lsls	r3, r3, #7
 8003f00:	4413      	add	r3, r2
 8003f02:	3384      	adds	r3, #132	; 0x84
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	01d2      	lsls	r2, r2, #7
 8003f10:	440a      	add	r2, r1
 8003f12:	3284      	adds	r2, #132	; 0x84
 8003f14:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003f18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2a:	4413      	add	r3, r2
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4619      	mov	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	01db      	lsls	r3, r3, #7
 8003f38:	440b      	add	r3, r1
 8003f3a:	3384      	adds	r3, #132	; 0x84
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f52:	4413      	add	r3, r2
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	01db      	lsls	r3, r3, #7
 8003f62:	4413      	add	r3, r2
 8003f64:	3384      	adds	r3, #132	; 0x84
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	01d2      	lsls	r2, r2, #7
 8003f72:	440a      	add	r2, r1
 8003f74:	3284      	adds	r2, #132	; 0x84
 8003f76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003f7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f8a:	4413      	add	r3, r2
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	440b      	add	r3, r1
 8003f9a:	3384      	adds	r3, #132	; 0x84
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	01db      	lsls	r3, r3, #7
 8003fae:	4413      	add	r3, r2
 8003fb0:	3384      	adds	r3, #132	; 0x84
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	01d2      	lsls	r2, r2, #7
 8003fbe:	440a      	add	r2, r1
 8003fc0:	3284      	adds	r2, #132	; 0x84
 8003fc2:	f023 0307 	bic.w	r3, r3, #7
 8003fc6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	01db      	lsls	r3, r3, #7
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3384      	adds	r3, #132	; 0x84
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	061b      	lsls	r3, r3, #24
 8003ff8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	01db      	lsls	r3, r3, #7
 8004004:	4413      	add	r3, r2
 8004006:	3384      	adds	r3, #132	; 0x84
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	01db      	lsls	r3, r3, #7
 8004014:	4413      	add	r3, r2
 8004016:	3384      	adds	r3, #132	; 0x84
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004024:	461a      	mov	r2, r3
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	431a      	orrs	r2, r3
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4619      	mov	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	01db      	lsls	r3, r3, #7
 8004038:	440b      	add	r3, r1
 800403a:	3384      	adds	r3, #132	; 0x84
 800403c:	4619      	mov	r1, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	01db      	lsls	r3, r3, #7
 800404e:	4413      	add	r3, r2
 8004050:	3384      	adds	r3, #132	; 0x84
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	4611      	mov	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	01d2      	lsls	r2, r2, #7
 800405e:	440a      	add	r2, r1
 8004060:	3284      	adds	r2, #132	; 0x84
 8004062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004066:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	01db      	lsls	r3, r3, #7
 8004072:	4413      	add	r3, r2
 8004074:	3384      	adds	r3, #132	; 0x84
 8004076:	461a      	mov	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	01db      	lsls	r3, r3, #7
 8004088:	4413      	add	r3, r2
 800408a:	3384      	adds	r3, #132	; 0x84
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4619      	mov	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	01db      	lsls	r3, r3, #7
 8004098:	440b      	add	r3, r1
 800409a:	3384      	adds	r3, #132	; 0x84
 800409c:	4619      	mov	r1, r3
 800409e:	4b58      	ldr	r3, [pc, #352]	; (8004200 <LTDC_SetConfig+0x32c>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	68f9      	ldr	r1, [r7, #12]
 80040ae:	6809      	ldr	r1, [r1, #0]
 80040b0:	4608      	mov	r0, r1
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	01c9      	lsls	r1, r1, #7
 80040b6:	4401      	add	r1, r0
 80040b8:	3184      	adds	r1, #132	; 0x84
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4413      	add	r3, r2
 80040ca:	3384      	adds	r3, #132	; 0x84
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	4413      	add	r3, r2
 80040da:	3384      	adds	r3, #132	; 0x84
 80040dc:	461a      	mov	r2, r3
 80040de:	2300      	movs	r3, #0
 80040e0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	4413      	add	r3, r2
 80040ee:	3384      	adds	r3, #132	; 0x84
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004100:	2304      	movs	r3, #4
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	e01b      	b.n	800413e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d102      	bne.n	8004114 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800410e:	2303      	movs	r3, #3
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e014      	b.n	800413e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b04      	cmp	r3, #4
 800411a:	d00b      	beq.n	8004134 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004120:	2b02      	cmp	r3, #2
 8004122:	d007      	beq.n	8004134 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004128:	2b03      	cmp	r3, #3
 800412a:	d003      	beq.n	8004134 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004130:	2b07      	cmp	r3, #7
 8004132:	d102      	bne.n	800413a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004134:	2302      	movs	r3, #2
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e001      	b.n	800413e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800413a:	2301      	movs	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	01db      	lsls	r3, r3, #7
 8004148:	4413      	add	r3, r2
 800414a:	3384      	adds	r3, #132	; 0x84
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	4611      	mov	r1, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	01d2      	lsls	r2, r2, #7
 8004158:	440a      	add	r2, r1
 800415a:	3284      	adds	r2, #132	; 0x84
 800415c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004160:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	fb02 f303 	mul.w	r3, r2, r3
 800416c:	041a      	lsls	r2, r3, #16
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	1acb      	subs	r3, r1, r3
 8004178:	69f9      	ldr	r1, [r7, #28]
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	3303      	adds	r3, #3
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	6809      	ldr	r1, [r1, #0]
 8004184:	4608      	mov	r0, r1
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	01c9      	lsls	r1, r1, #7
 800418a:	4401      	add	r1, r0
 800418c:	3184      	adds	r1, #132	; 0x84
 800418e:	4313      	orrs	r3, r2
 8004190:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	01db      	lsls	r3, r3, #7
 800419c:	4413      	add	r3, r2
 800419e:	3384      	adds	r3, #132	; 0x84
 80041a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	01db      	lsls	r3, r3, #7
 80041ac:	440b      	add	r3, r1
 80041ae:	3384      	adds	r3, #132	; 0x84
 80041b0:	4619      	mov	r1, r3
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <LTDC_SetConfig+0x330>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	01db      	lsls	r3, r3, #7
 80041c2:	4413      	add	r3, r2
 80041c4:	3384      	adds	r3, #132	; 0x84
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	01db      	lsls	r3, r3, #7
 80041d8:	4413      	add	r3, r2
 80041da:	3384      	adds	r3, #132	; 0x84
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	4611      	mov	r1, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	01d2      	lsls	r2, r2, #7
 80041e8:	440a      	add	r2, r1
 80041ea:	3284      	adds	r2, #132	; 0x84
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6013      	str	r3, [r2, #0]
}
 80041f2:	bf00      	nop
 80041f4:	3724      	adds	r7, #36	; 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	fffff8f8 	.word	0xfffff8f8
 8004204:	fffff800 	.word	0xfffff800

08004208 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004236:	f7fe fcf9 	bl	8002c2c <HAL_GetTick>
 800423a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800423c:	e009      	b.n	8004252 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800423e:	f7fe fcf5 	bl	8002c2c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800424c:	d901      	bls.n	8004252 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e022      	b.n	8004298 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425e:	d1ee      	bne.n	800423e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004260:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0f      	ldr	r2, [pc, #60]	; (80042a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800426c:	f7fe fcde 	bl	8002c2c <HAL_GetTick>
 8004270:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004272:	e009      	b.n	8004288 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004274:	f7fe fcda 	bl	8002c2c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004282:	d901      	bls.n	8004288 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e007      	b.n	8004298 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004294:	d1ee      	bne.n	8004274 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40007000 	.word	0x40007000

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042b0:	2300      	movs	r3, #0
 80042b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e291      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8087 	beq.w	80043da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042cc:	4b96      	ldr	r3, [pc, #600]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d00c      	beq.n	80042f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d8:	4b93      	ldr	r3, [pc, #588]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d112      	bne.n	800430a <HAL_RCC_OscConfig+0x62>
 80042e4:	4b90      	ldr	r3, [pc, #576]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f0:	d10b      	bne.n	800430a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f2:	4b8d      	ldr	r3, [pc, #564]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d06c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x130>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d168      	bne.n	80043d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e26b      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x7a>
 8004314:	4b84      	ldr	r3, [pc, #528]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a83      	ldr	r2, [pc, #524]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800431a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	e02e      	b.n	8004380 <HAL_RCC_OscConfig+0xd8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x9c>
 800432a:	4b7f      	ldr	r3, [pc, #508]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a7e      	ldr	r2, [pc, #504]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	4b7c      	ldr	r3, [pc, #496]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7b      	ldr	r2, [pc, #492]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800433c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e01d      	b.n	8004380 <HAL_RCC_OscConfig+0xd8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0xc0>
 800434e:	4b76      	ldr	r3, [pc, #472]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a75      	ldr	r2, [pc, #468]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b73      	ldr	r3, [pc, #460]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a72      	ldr	r2, [pc, #456]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e00b      	b.n	8004380 <HAL_RCC_OscConfig+0xd8>
 8004368:	4b6f      	ldr	r3, [pc, #444]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a6e      	ldr	r2, [pc, #440]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b6c      	ldr	r3, [pc, #432]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6b      	ldr	r2, [pc, #428]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800437a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800437e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fe fc50 	bl	8002c2c <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fe fc4c 	bl	8002c2c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e21f      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	4b61      	ldr	r3, [pc, #388]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0xe8>
 80043ae:	e014      	b.n	80043da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fe fc3c 	bl	8002c2c <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b8:	f7fe fc38 	bl	8002c2c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	; 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e20b      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	4b57      	ldr	r3, [pc, #348]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x110>
 80043d6:	e000      	b.n	80043da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d069      	beq.n	80044ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043e6:	4b50      	ldr	r3, [pc, #320]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f2:	4b4d      	ldr	r3, [pc, #308]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d11c      	bne.n	8004438 <HAL_RCC_OscConfig+0x190>
 80043fe:	4b4a      	ldr	r3, [pc, #296]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d116      	bne.n	8004438 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	4b47      	ldr	r3, [pc, #284]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_RCC_OscConfig+0x17a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d001      	beq.n	8004422 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e1df      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	493d      	ldr	r1, [pc, #244]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004436:	e040      	b.n	80044ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d023      	beq.n	8004488 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004440:	4b39      	ldr	r3, [pc, #228]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a38      	ldr	r2, [pc, #224]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe fbee 	bl	8002c2c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004454:	f7fe fbea 	bl	8002c2c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1bd      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004466:	4b30      	ldr	r3, [pc, #192]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4929      	ldr	r1, [pc, #164]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
 8004486:	e018      	b.n	80044ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe fbca 	bl	8002c2c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449c:	f7fe fbc6 	bl	8002c2c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e199      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d038      	beq.n	8004538 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d019      	beq.n	8004502 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ce:	4b16      	ldr	r3, [pc, #88]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	4a15      	ldr	r2, [pc, #84]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fe fba7 	bl	8002c2c <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e2:	f7fe fba3 	bl	8002c2c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e176      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x23a>
 8004500:	e01a      	b.n	8004538 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004506:	4a08      	ldr	r2, [pc, #32]	; (8004528 <HAL_RCC_OscConfig+0x280>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fe fb8d 	bl	8002c2c <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004514:	e00a      	b.n	800452c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004516:	f7fe fb89 	bl	8002c2c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d903      	bls.n	800452c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e15c      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
 8004528:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	4b91      	ldr	r3, [pc, #580]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 800452e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ee      	bne.n	8004516 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a4 	beq.w	800468e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004546:	4b8b      	ldr	r3, [pc, #556]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	4b88      	ldr	r3, [pc, #544]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a87      	ldr	r2, [pc, #540]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	; 0x40
 800455e:	4b85      	ldr	r3, [pc, #532]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456e:	4b82      	ldr	r3, [pc, #520]	; (8004778 <HAL_RCC_OscConfig+0x4d0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d118      	bne.n	80045ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800457a:	4b7f      	ldr	r3, [pc, #508]	; (8004778 <HAL_RCC_OscConfig+0x4d0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a7e      	ldr	r2, [pc, #504]	; (8004778 <HAL_RCC_OscConfig+0x4d0>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004586:	f7fe fb51 	bl	8002c2c <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458e:	f7fe fb4d 	bl	8002c2c <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b64      	cmp	r3, #100	; 0x64
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e120      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	4b75      	ldr	r3, [pc, #468]	; (8004778 <HAL_RCC_OscConfig+0x4d0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d106      	bne.n	80045c2 <HAL_RCC_OscConfig+0x31a>
 80045b4:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	4a6e      	ldr	r2, [pc, #440]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6713      	str	r3, [r2, #112]	; 0x70
 80045c0:	e02d      	b.n	800461e <HAL_RCC_OscConfig+0x376>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x33c>
 80045ca:	4b6a      	ldr	r3, [pc, #424]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	4a69      	ldr	r2, [pc, #420]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	6713      	str	r3, [r2, #112]	; 0x70
 80045d6:	4b67      	ldr	r3, [pc, #412]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a66      	ldr	r2, [pc, #408]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045dc:	f023 0304 	bic.w	r3, r3, #4
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
 80045e2:	e01c      	b.n	800461e <HAL_RCC_OscConfig+0x376>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b05      	cmp	r3, #5
 80045ea:	d10c      	bne.n	8004606 <HAL_RCC_OscConfig+0x35e>
 80045ec:	4b61      	ldr	r3, [pc, #388]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4a60      	ldr	r2, [pc, #384]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	f043 0304 	orr.w	r3, r3, #4
 80045f6:	6713      	str	r3, [r2, #112]	; 0x70
 80045f8:	4b5e      	ldr	r3, [pc, #376]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a5d      	ldr	r2, [pc, #372]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
 8004604:	e00b      	b.n	800461e <HAL_RCC_OscConfig+0x376>
 8004606:	4b5b      	ldr	r3, [pc, #364]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a5a      	ldr	r2, [pc, #360]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
 8004612:	4b58      	ldr	r3, [pc, #352]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a57      	ldr	r2, [pc, #348]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004618:	f023 0304 	bic.w	r3, r3, #4
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d015      	beq.n	8004652 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fe fb01 	bl	8002c2c <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fe fafd 	bl	8002c2c <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e0ce      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004644:	4b4b      	ldr	r3, [pc, #300]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0ee      	beq.n	800462e <HAL_RCC_OscConfig+0x386>
 8004650:	e014      	b.n	800467c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fe faeb 	bl	8002c2c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fe fae7 	bl	8002c2c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0b8      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ee      	bne.n	800465a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d105      	bne.n	800468e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004682:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a3b      	ldr	r2, [pc, #236]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80a4 	beq.w	80047e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d06b      	beq.n	800477c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d149      	bne.n	8004740 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ac:	4b31      	ldr	r3, [pc, #196]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a30      	ldr	r2, [pc, #192]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80046b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fe fab8 	bl	8002c2c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fe fab4 	bl	8002c2c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e087      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	019b      	lsls	r3, r3, #6
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	3b01      	subs	r3, #1
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	4313      	orrs	r3, r2
 8004704:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800470a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a18      	ldr	r2, [pc, #96]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fe fa88 	bl	8002c2c <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fe fa84 	bl	8002c2c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e057      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x478>
 800473e:	e04f      	b.n	80047e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800474a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fe fa6e 	bl	8002c2c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fe fa6a 	bl	8002c2c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e03d      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x4ac>
 8004772:	e035      	b.n	80047e0 <HAL_RCC_OscConfig+0x538>
 8004774:	40023800 	.word	0x40023800
 8004778:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x544>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d028      	beq.n	80047dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d121      	bne.n	80047dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d11a      	bne.n	80047dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d111      	bne.n	80047dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	3b01      	subs	r3, #1
 80047c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800

080047f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0d0      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004808:	4b6a      	ldr	r3, [pc, #424]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d910      	bls.n	8004838 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b67      	ldr	r3, [pc, #412]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 020f 	bic.w	r2, r3, #15
 800481e:	4965      	ldr	r1, [pc, #404]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b63      	ldr	r3, [pc, #396]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0b8      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004850:	4b59      	ldr	r3, [pc, #356]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4a58      	ldr	r2, [pc, #352]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800485a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004868:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a52      	ldr	r2, [pc, #328]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004872:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004874:	4b50      	ldr	r3, [pc, #320]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	494d      	ldr	r1, [pc, #308]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d040      	beq.n	8004914 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d115      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	4b41      	ldr	r3, [pc, #260]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e073      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c2:	4b3d      	ldr	r3, [pc, #244]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06b      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d2:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4936      	ldr	r1, [pc, #216]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e4:	f7fe f9a2 	bl	8002c2c <HAL_GetTick>
 80048e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7fe f99e 	bl	8002c2c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e053      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	4b2d      	ldr	r3, [pc, #180]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 020c 	and.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	429a      	cmp	r2, r3
 8004912:	d1eb      	bne.n	80048ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004914:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d210      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 020f 	bic.w	r2, r3, #15
 800492a:	4922      	ldr	r1, [pc, #136]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e032      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4916      	ldr	r1, [pc, #88]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	490e      	ldr	r1, [pc, #56]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004982:	f000 f821 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004986:	4601      	mov	r1, r0
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <HAL_RCC_ClockConfig+0x1cc>)
 8004994:	5cd3      	ldrb	r3, [r2, r3]
 8004996:	fa21 f303 	lsr.w	r3, r1, r3
 800499a:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <HAL_RCC_ClockConfig+0x1d0>)
 800499c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_ClockConfig+0x1d4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe f8fe 	bl	8002ba4 <HAL_InitTick>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023c00 	.word	0x40023c00
 80049b8:	40023800 	.word	0x40023800
 80049bc:	08008a08 	.word	0x08008a08
 80049c0:	20000020 	.word	0x20000020
 80049c4:	20000024 	.word	0x20000024

080049c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	2300      	movs	r3, #0
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049de:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d007      	beq.n	80049fa <HAL_RCC_GetSysClockFreq+0x32>
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d008      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x38>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 80b4 	bne.w	8004b5c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f4:	4b5e      	ldr	r3, [pc, #376]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049f6:	60bb      	str	r3, [r7, #8]
      break;
 80049f8:	e0b3      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049fa:	4b5e      	ldr	r3, [pc, #376]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80049fc:	60bb      	str	r3, [r7, #8]
      break;
 80049fe:	e0b0      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a00:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a08:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a0a:	4b58      	ldr	r3, [pc, #352]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d04a      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a16:	4b55      	ldr	r3, [pc, #340]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	099b      	lsrs	r3, r3, #6
 8004a1c:	f04f 0400 	mov.w	r4, #0
 8004a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	ea03 0501 	and.w	r5, r3, r1
 8004a2c:	ea04 0602 	and.w	r6, r4, r2
 8004a30:	4629      	mov	r1, r5
 8004a32:	4632      	mov	r2, r6
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	f04f 0400 	mov.w	r4, #0
 8004a3c:	0154      	lsls	r4, r2, #5
 8004a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a42:	014b      	lsls	r3, r1, #5
 8004a44:	4619      	mov	r1, r3
 8004a46:	4622      	mov	r2, r4
 8004a48:	1b49      	subs	r1, r1, r5
 8004a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	f04f 0400 	mov.w	r4, #0
 8004a56:	0194      	lsls	r4, r2, #6
 8004a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a5c:	018b      	lsls	r3, r1, #6
 8004a5e:	1a5b      	subs	r3, r3, r1
 8004a60:	eb64 0402 	sbc.w	r4, r4, r2
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	00e2      	lsls	r2, r4, #3
 8004a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a72:	00d9      	lsls	r1, r3, #3
 8004a74:	460b      	mov	r3, r1
 8004a76:	4614      	mov	r4, r2
 8004a78:	195b      	adds	r3, r3, r5
 8004a7a:	eb44 0406 	adc.w	r4, r4, r6
 8004a7e:	f04f 0100 	mov.w	r1, #0
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	0262      	lsls	r2, r4, #9
 8004a88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a8c:	0259      	lsls	r1, r3, #9
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4614      	mov	r4, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	4621      	mov	r1, r4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f04f 0400 	mov.w	r4, #0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	f7fb fc06 	bl	80002b0 <__aeabi_uldivmod>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e049      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aac:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	f04f 0400 	mov.w	r4, #0
 8004ab6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	ea03 0501 	and.w	r5, r3, r1
 8004ac2:	ea04 0602 	and.w	r6, r4, r2
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4632      	mov	r2, r6
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	f04f 0400 	mov.w	r4, #0
 8004ad2:	0154      	lsls	r4, r2, #5
 8004ad4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ad8:	014b      	lsls	r3, r1, #5
 8004ada:	4619      	mov	r1, r3
 8004adc:	4622      	mov	r2, r4
 8004ade:	1b49      	subs	r1, r1, r5
 8004ae0:	eb62 0206 	sbc.w	r2, r2, r6
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	f04f 0400 	mov.w	r4, #0
 8004aec:	0194      	lsls	r4, r2, #6
 8004aee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004af2:	018b      	lsls	r3, r1, #6
 8004af4:	1a5b      	subs	r3, r3, r1
 8004af6:	eb64 0402 	sbc.w	r4, r4, r2
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b08:	00d9      	lsls	r1, r3, #3
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	195b      	adds	r3, r3, r5
 8004b10:	eb44 0406 	adc.w	r4, r4, r6
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	02a2      	lsls	r2, r4, #10
 8004b1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b22:	0299      	lsls	r1, r3, #10
 8004b24:	460b      	mov	r3, r1
 8004b26:	4614      	mov	r4, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f04f 0400 	mov.w	r4, #0
 8004b32:	461a      	mov	r2, r3
 8004b34:	4623      	mov	r3, r4
 8004b36:	f7fb fbbb 	bl	80002b0 <__aeabi_uldivmod>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	60bb      	str	r3, [r7, #8]
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b5e:	60bb      	str	r3, [r7, #8]
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	68bb      	ldr	r3, [r7, #8]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200

08004b78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000020 	.word	0x20000020

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b98:	4601      	mov	r1, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4a03      	ldr	r2, [pc, #12]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	08008a18 	.word	0x08008a18

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bbc:	f7ff ffdc 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0b5b      	lsrs	r3, r3, #13
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4a03      	ldr	r2, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bce:	5cd3      	ldrb	r3, [r2, r3]
 8004bd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	08008a18 	.word	0x08008a18

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c08:	4b69      	ldr	r3, [pc, #420]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a68      	ldr	r2, [pc, #416]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c12:	6093      	str	r3, [r2, #8]
 8004c14:	4b66      	ldr	r3, [pc, #408]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1c:	4964      	ldr	r1, [pc, #400]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d017      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	4959      	ldr	r1, [pc, #356]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c58:	d101      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d017      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c76:	4b4e      	ldr	r3, [pc, #312]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	494a      	ldr	r1, [pc, #296]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c94:	d101      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 808b 	beq.w	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc4:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	4a39      	ldr	r2, [pc, #228]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd0:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cdc:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a34      	ldr	r2, [pc, #208]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce8:	f7fd ffa0 	bl	8002c2c <HAL_GetTick>
 8004cec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7fd ff9c 	bl	8002c2c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e355      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d02:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d035      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d02e      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d36:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d42:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d114      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fd ff64 	bl	8002c2c <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fd ff60 	bl	8002c2c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e317      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ee      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d96:	d111      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004da6:	400b      	ands	r3, r1
 8004da8:	4901      	ldr	r1, [pc, #4]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40007000 	.word	0x40007000
 8004db8:	0ffffcff 	.word	0x0ffffcff
 8004dbc:	4bb0      	ldr	r3, [pc, #704]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4aaf      	ldr	r2, [pc, #700]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dc6:	6093      	str	r3, [r2, #8]
 8004dc8:	4bad      	ldr	r3, [pc, #692]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd4:	49aa      	ldr	r1, [pc, #680]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d010      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004de6:	4ba6      	ldr	r3, [pc, #664]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dec:	4aa4      	ldr	r2, [pc, #656]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004df6:	4ba2      	ldr	r3, [pc, #648]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004df8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	499f      	ldr	r1, [pc, #636]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e14:	4b9a      	ldr	r3, [pc, #616]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e22:	4997      	ldr	r1, [pc, #604]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e36:	4b92      	ldr	r3, [pc, #584]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e44:	498e      	ldr	r1, [pc, #568]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e58:	4b89      	ldr	r3, [pc, #548]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e66:	4986      	ldr	r1, [pc, #536]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e7a:	4b81      	ldr	r3, [pc, #516]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	497d      	ldr	r1, [pc, #500]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e9c:	4b78      	ldr	r3, [pc, #480]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	f023 0203 	bic.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	4975      	ldr	r1, [pc, #468]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ebe:	4b70      	ldr	r3, [pc, #448]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	f023 020c 	bic.w	r2, r3, #12
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ecc:	496c      	ldr	r1, [pc, #432]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee0:	4b67      	ldr	r3, [pc, #412]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	4964      	ldr	r1, [pc, #400]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f02:	4b5f      	ldr	r3, [pc, #380]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f10:	495b      	ldr	r1, [pc, #364]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f24:	4b56      	ldr	r3, [pc, #344]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	4953      	ldr	r1, [pc, #332]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f46:	4b4e      	ldr	r3, [pc, #312]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	494a      	ldr	r1, [pc, #296]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f68:	4b45      	ldr	r3, [pc, #276]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	4942      	ldr	r1, [pc, #264]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	4939      	ldr	r1, [pc, #228]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fac:	4b34      	ldr	r3, [pc, #208]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fba:	4931      	ldr	r1, [pc, #196]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fce:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fdc:	4928      	ldr	r1, [pc, #160]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ffe:	2301      	movs	r3, #1
 8005000:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500e:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501c:	4918      	ldr	r1, [pc, #96]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005040:	490f      	ldr	r1, [pc, #60]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d005      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005056:	f040 80d8 	bne.w	800520a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a08      	ldr	r2, [pc, #32]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005060:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005066:	f7fd fde1 	bl	8002c2c <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800506c:	e00a      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800506e:	f7fd fddd 	bl	8002c2c <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b64      	cmp	r3, #100	; 0x64
 800507a:	d903      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e196      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005080:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005084:	4b6c      	ldr	r3, [pc, #432]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1ee      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d021      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11d      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050a4:	4b64      	ldr	r3, [pc, #400]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050b2:	4b61      	ldr	r3, [pc, #388]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b8:	0e1b      	lsrs	r3, r3, #24
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	019a      	lsls	r2, r3, #6
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	431a      	orrs	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	061b      	lsls	r3, r3, #24
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	071b      	lsls	r3, r3, #28
 80050d8:	4957      	ldr	r1, [pc, #348]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02e      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800510a:	d129      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800510c:	4b4a      	ldr	r3, [pc, #296]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800510e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005112:	0c1b      	lsrs	r3, r3, #16
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800511a:	4b47      	ldr	r3, [pc, #284]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800511c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005120:	0f1b      	lsrs	r3, r3, #28
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	019a      	lsls	r2, r3, #6
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	061b      	lsls	r3, r3, #24
 800513a:	431a      	orrs	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	071b      	lsls	r3, r3, #28
 8005140:	493d      	ldr	r1, [pc, #244]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005148:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800514a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514e:	f023 021f 	bic.w	r2, r3, #31
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	3b01      	subs	r3, #1
 8005158:	4937      	ldr	r1, [pc, #220]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01d      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800516c:	4b32      	ldr	r3, [pc, #200]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800516e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005172:	0e1b      	lsrs	r3, r3, #24
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800517a:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800517c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005180:	0f1b      	lsrs	r3, r3, #28
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	019a      	lsls	r2, r3, #6
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	041b      	lsls	r3, r3, #16
 8005194:	431a      	orrs	r2, r3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	431a      	orrs	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	071b      	lsls	r3, r3, #28
 80051a0:	4925      	ldr	r1, [pc, #148]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d011      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	019a      	lsls	r2, r3, #6
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	071b      	lsls	r3, r3, #28
 80051d0:	4919      	ldr	r1, [pc, #100]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051d8:	4b17      	ldr	r3, [pc, #92]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a16      	ldr	r2, [pc, #88]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e4:	f7fd fd22 	bl	8002c2c <HAL_GetTick>
 80051e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051ec:	f7fd fd1e 	bl	8002c2c <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e0d7      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051fe:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b01      	cmp	r3, #1
 800520e:	f040 80cd 	bne.w	80053ac <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a08      	ldr	r2, [pc, #32]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800521c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521e:	f7fd fd05 	bl	8002c2c <HAL_GetTick>
 8005222:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005224:	e00a      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005226:	f7fd fd01 	bl	8002c2c <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b64      	cmp	r3, #100	; 0x64
 8005232:	d903      	bls.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e0ba      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005238:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800523c:	4b5e      	ldr	r3, [pc, #376]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005248:	d0ed      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005266:	2b00      	cmp	r3, #0
 8005268:	d02e      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d12a      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005272:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005280:	4b4d      	ldr	r3, [pc, #308]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	0f1b      	lsrs	r3, r3, #28
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	019a      	lsls	r2, r3, #6
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	061b      	lsls	r3, r3, #24
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	071b      	lsls	r3, r3, #28
 80052a6:	4944      	ldr	r1, [pc, #272]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052ae:	4b42      	ldr	r3, [pc, #264]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	493d      	ldr	r1, [pc, #244]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d022      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052dc:	d11d      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052de:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	0f1b      	lsrs	r3, r3, #28
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	019a      	lsls	r2, r3, #6
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	431a      	orrs	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	431a      	orrs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	071b      	lsls	r3, r3, #28
 8005312:	4929      	ldr	r1, [pc, #164]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d028      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005326:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	0e1b      	lsrs	r3, r3, #24
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005334:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	0c1b      	lsrs	r3, r3, #16
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	019a      	lsls	r2, r3, #6
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	431a      	orrs	r2, r3
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	4917      	ldr	r1, [pc, #92]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	4911      	ldr	r1, [pc, #68]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800537e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005384:	f7fd fc52 	bl	8002c2c <HAL_GetTick>
 8005388:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800538c:	f7fd fc4e 	bl	8002c2c <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e007      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053aa:	d1ef      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40023800 	.word	0x40023800

080053bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e025      	b.n	800541c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fc fc2f 	bl	8001c48 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f000 fca1 	bl	8005d44 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	461a      	mov	r2, r3
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	f000 fd0b 	bl	8005e28 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d101      	bne.n	8005440 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
 800543e:	e018      	b.n	8005472 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fd69 	bl	8005f28 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d104      	bne.n	8005468 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2205      	movs	r2, #5
 8005462:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005466:	e003      	b.n	8005470 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d101      	bne.n	8005494 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
 8005492:	e00e      	b.n	80054b2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fd61 	bl	8005f6a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e040      	b.n	800554e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fd fae7 	bl	8002ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2224      	movs	r2, #36	; 0x24
 80054e6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f82d 	bl	8005558 <UART_SetConfig>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e022      	b.n	800554e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 facb 	bl	8005aac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005524:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005534:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fb52 	bl	8005bf0 <UART_CheckIdleState>
 800554c:	4603      	mov	r3, r0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4bb1      	ldr	r3, [pc, #708]	; (800584c <UART_SetConfig+0x2f4>)
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	6939      	ldr	r1, [r7, #16]
 8005590:	430b      	orrs	r3, r1
 8005592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a9f      	ldr	r2, [pc, #636]	; (8005850 <UART_SetConfig+0x2f8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d121      	bne.n	800561c <UART_SetConfig+0xc4>
 80055d8:	4b9e      	ldr	r3, [pc, #632]	; (8005854 <UART_SetConfig+0x2fc>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d816      	bhi.n	8005614 <UART_SetConfig+0xbc>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0x94>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	080055fd 	.word	0x080055fd
 80055f0:	08005609 	.word	0x08005609
 80055f4:	08005603 	.word	0x08005603
 80055f8:	0800560f 	.word	0x0800560f
 80055fc:	2301      	movs	r3, #1
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e151      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005602:	2302      	movs	r3, #2
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e14e      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005608:	2304      	movs	r3, #4
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e14b      	b.n	80058a6 <UART_SetConfig+0x34e>
 800560e:	2308      	movs	r3, #8
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e148      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005614:	2310      	movs	r3, #16
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	bf00      	nop
 800561a:	e144      	b.n	80058a6 <UART_SetConfig+0x34e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a8d      	ldr	r2, [pc, #564]	; (8005858 <UART_SetConfig+0x300>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d134      	bne.n	8005690 <UART_SetConfig+0x138>
 8005626:	4b8b      	ldr	r3, [pc, #556]	; (8005854 <UART_SetConfig+0x2fc>)
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b0c      	cmp	r3, #12
 8005632:	d829      	bhi.n	8005688 <UART_SetConfig+0x130>
 8005634:	a201      	add	r2, pc, #4	; (adr r2, 800563c <UART_SetConfig+0xe4>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	08005671 	.word	0x08005671
 8005640:	08005689 	.word	0x08005689
 8005644:	08005689 	.word	0x08005689
 8005648:	08005689 	.word	0x08005689
 800564c:	0800567d 	.word	0x0800567d
 8005650:	08005689 	.word	0x08005689
 8005654:	08005689 	.word	0x08005689
 8005658:	08005689 	.word	0x08005689
 800565c:	08005677 	.word	0x08005677
 8005660:	08005689 	.word	0x08005689
 8005664:	08005689 	.word	0x08005689
 8005668:	08005689 	.word	0x08005689
 800566c:	08005683 	.word	0x08005683
 8005670:	2300      	movs	r3, #0
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e117      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005676:	2302      	movs	r3, #2
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e114      	b.n	80058a6 <UART_SetConfig+0x34e>
 800567c:	2304      	movs	r3, #4
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e111      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005682:	2308      	movs	r3, #8
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e10e      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005688:	2310      	movs	r3, #16
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	bf00      	nop
 800568e:	e10a      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a71      	ldr	r2, [pc, #452]	; (800585c <UART_SetConfig+0x304>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d120      	bne.n	80056dc <UART_SetConfig+0x184>
 800569a:	4b6e      	ldr	r3, [pc, #440]	; (8005854 <UART_SetConfig+0x2fc>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d00f      	beq.n	80056c8 <UART_SetConfig+0x170>
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d802      	bhi.n	80056b2 <UART_SetConfig+0x15a>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <UART_SetConfig+0x164>
 80056b0:	e010      	b.n	80056d4 <UART_SetConfig+0x17c>
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d005      	beq.n	80056c2 <UART_SetConfig+0x16a>
 80056b6:	2b30      	cmp	r3, #48	; 0x30
 80056b8:	d009      	beq.n	80056ce <UART_SetConfig+0x176>
 80056ba:	e00b      	b.n	80056d4 <UART_SetConfig+0x17c>
 80056bc:	2300      	movs	r3, #0
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e0f1      	b.n	80058a6 <UART_SetConfig+0x34e>
 80056c2:	2302      	movs	r3, #2
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e0ee      	b.n	80058a6 <UART_SetConfig+0x34e>
 80056c8:	2304      	movs	r3, #4
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e0eb      	b.n	80058a6 <UART_SetConfig+0x34e>
 80056ce:	2308      	movs	r3, #8
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e0e8      	b.n	80058a6 <UART_SetConfig+0x34e>
 80056d4:	2310      	movs	r3, #16
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	bf00      	nop
 80056da:	e0e4      	b.n	80058a6 <UART_SetConfig+0x34e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5f      	ldr	r2, [pc, #380]	; (8005860 <UART_SetConfig+0x308>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d120      	bne.n	8005728 <UART_SetConfig+0x1d0>
 80056e6:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <UART_SetConfig+0x2fc>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d00f      	beq.n	8005714 <UART_SetConfig+0x1bc>
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d802      	bhi.n	80056fe <UART_SetConfig+0x1a6>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <UART_SetConfig+0x1b0>
 80056fc:	e010      	b.n	8005720 <UART_SetConfig+0x1c8>
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d005      	beq.n	800570e <UART_SetConfig+0x1b6>
 8005702:	2bc0      	cmp	r3, #192	; 0xc0
 8005704:	d009      	beq.n	800571a <UART_SetConfig+0x1c2>
 8005706:	e00b      	b.n	8005720 <UART_SetConfig+0x1c8>
 8005708:	2300      	movs	r3, #0
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e0cb      	b.n	80058a6 <UART_SetConfig+0x34e>
 800570e:	2302      	movs	r3, #2
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e0c8      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005714:	2304      	movs	r3, #4
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e0c5      	b.n	80058a6 <UART_SetConfig+0x34e>
 800571a:	2308      	movs	r3, #8
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e0c2      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005720:	2310      	movs	r3, #16
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	bf00      	nop
 8005726:	e0be      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a4d      	ldr	r2, [pc, #308]	; (8005864 <UART_SetConfig+0x30c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d124      	bne.n	800577c <UART_SetConfig+0x224>
 8005732:	4b48      	ldr	r3, [pc, #288]	; (8005854 <UART_SetConfig+0x2fc>)
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005740:	d012      	beq.n	8005768 <UART_SetConfig+0x210>
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d802      	bhi.n	800574e <UART_SetConfig+0x1f6>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <UART_SetConfig+0x204>
 800574c:	e012      	b.n	8005774 <UART_SetConfig+0x21c>
 800574e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005752:	d006      	beq.n	8005762 <UART_SetConfig+0x20a>
 8005754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005758:	d009      	beq.n	800576e <UART_SetConfig+0x216>
 800575a:	e00b      	b.n	8005774 <UART_SetConfig+0x21c>
 800575c:	2300      	movs	r3, #0
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e0a1      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005762:	2302      	movs	r3, #2
 8005764:	77fb      	strb	r3, [r7, #31]
 8005766:	e09e      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005768:	2304      	movs	r3, #4
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e09b      	b.n	80058a6 <UART_SetConfig+0x34e>
 800576e:	2308      	movs	r3, #8
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e098      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005774:	2310      	movs	r3, #16
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	bf00      	nop
 800577a:	e094      	b.n	80058a6 <UART_SetConfig+0x34e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a39      	ldr	r2, [pc, #228]	; (8005868 <UART_SetConfig+0x310>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d124      	bne.n	80057d0 <UART_SetConfig+0x278>
 8005786:	4b33      	ldr	r3, [pc, #204]	; (8005854 <UART_SetConfig+0x2fc>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005794:	d012      	beq.n	80057bc <UART_SetConfig+0x264>
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579a:	d802      	bhi.n	80057a2 <UART_SetConfig+0x24a>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <UART_SetConfig+0x258>
 80057a0:	e012      	b.n	80057c8 <UART_SetConfig+0x270>
 80057a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a6:	d006      	beq.n	80057b6 <UART_SetConfig+0x25e>
 80057a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ac:	d009      	beq.n	80057c2 <UART_SetConfig+0x26a>
 80057ae:	e00b      	b.n	80057c8 <UART_SetConfig+0x270>
 80057b0:	2301      	movs	r3, #1
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e077      	b.n	80058a6 <UART_SetConfig+0x34e>
 80057b6:	2302      	movs	r3, #2
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e074      	b.n	80058a6 <UART_SetConfig+0x34e>
 80057bc:	2304      	movs	r3, #4
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e071      	b.n	80058a6 <UART_SetConfig+0x34e>
 80057c2:	2308      	movs	r3, #8
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e06e      	b.n	80058a6 <UART_SetConfig+0x34e>
 80057c8:	2310      	movs	r3, #16
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	bf00      	nop
 80057ce:	e06a      	b.n	80058a6 <UART_SetConfig+0x34e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a25      	ldr	r2, [pc, #148]	; (800586c <UART_SetConfig+0x314>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d124      	bne.n	8005824 <UART_SetConfig+0x2cc>
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <UART_SetConfig+0x2fc>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e8:	d012      	beq.n	8005810 <UART_SetConfig+0x2b8>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d802      	bhi.n	80057f6 <UART_SetConfig+0x29e>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <UART_SetConfig+0x2ac>
 80057f4:	e012      	b.n	800581c <UART_SetConfig+0x2c4>
 80057f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fa:	d006      	beq.n	800580a <UART_SetConfig+0x2b2>
 80057fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005800:	d009      	beq.n	8005816 <UART_SetConfig+0x2be>
 8005802:	e00b      	b.n	800581c <UART_SetConfig+0x2c4>
 8005804:	2300      	movs	r3, #0
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e04d      	b.n	80058a6 <UART_SetConfig+0x34e>
 800580a:	2302      	movs	r3, #2
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e04a      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005810:	2304      	movs	r3, #4
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e047      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005816:	2308      	movs	r3, #8
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e044      	b.n	80058a6 <UART_SetConfig+0x34e>
 800581c:	2310      	movs	r3, #16
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	bf00      	nop
 8005822:	e040      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a11      	ldr	r2, [pc, #68]	; (8005870 <UART_SetConfig+0x318>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d139      	bne.n	80058a2 <UART_SetConfig+0x34a>
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <UART_SetConfig+0x2fc>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800583c:	d027      	beq.n	800588e <UART_SetConfig+0x336>
 800583e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005842:	d817      	bhi.n	8005874 <UART_SetConfig+0x31c>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01c      	beq.n	8005882 <UART_SetConfig+0x32a>
 8005848:	e027      	b.n	800589a <UART_SetConfig+0x342>
 800584a:	bf00      	nop
 800584c:	efff69f3 	.word	0xefff69f3
 8005850:	40011000 	.word	0x40011000
 8005854:	40023800 	.word	0x40023800
 8005858:	40004400 	.word	0x40004400
 800585c:	40004800 	.word	0x40004800
 8005860:	40004c00 	.word	0x40004c00
 8005864:	40005000 	.word	0x40005000
 8005868:	40011400 	.word	0x40011400
 800586c:	40007800 	.word	0x40007800
 8005870:	40007c00 	.word	0x40007c00
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	d006      	beq.n	8005888 <UART_SetConfig+0x330>
 800587a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800587e:	d009      	beq.n	8005894 <UART_SetConfig+0x33c>
 8005880:	e00b      	b.n	800589a <UART_SetConfig+0x342>
 8005882:	2300      	movs	r3, #0
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e00e      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005888:	2302      	movs	r3, #2
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e00b      	b.n	80058a6 <UART_SetConfig+0x34e>
 800588e:	2304      	movs	r3, #4
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e008      	b.n	80058a6 <UART_SetConfig+0x34e>
 8005894:	2308      	movs	r3, #8
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e005      	b.n	80058a6 <UART_SetConfig+0x34e>
 800589a:	2310      	movs	r3, #16
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	bf00      	nop
 80058a0:	e001      	b.n	80058a6 <UART_SetConfig+0x34e>
 80058a2:	2310      	movs	r3, #16
 80058a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ae:	d17f      	bne.n	80059b0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80058b0:	7ffb      	ldrb	r3, [r7, #31]
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d85c      	bhi.n	8005970 <UART_SetConfig+0x418>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0x364>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	08005901 	.word	0x08005901
 80058c4:	08005921 	.word	0x08005921
 80058c8:	08005971 	.word	0x08005971
 80058cc:	08005939 	.word	0x08005939
 80058d0:	08005971 	.word	0x08005971
 80058d4:	08005971 	.word	0x08005971
 80058d8:	08005971 	.word	0x08005971
 80058dc:	08005959 	.word	0x08005959
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e0:	f7ff f956 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 80058e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	005a      	lsls	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	441a      	add	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	61bb      	str	r3, [r7, #24]
        break;
 80058fe:	e03a      	b.n	8005976 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005900:	f7ff f95a 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8005904:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	005a      	lsls	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	441a      	add	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	b29b      	uxth	r3, r3
 800591c:	61bb      	str	r3, [r7, #24]
        break;
 800591e:	e02a      	b.n	8005976 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	085a      	lsrs	r2, r3, #1
 8005926:	4b5f      	ldr	r3, [pc, #380]	; (8005aa4 <UART_SetConfig+0x54c>)
 8005928:	4413      	add	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6852      	ldr	r2, [r2, #4]
 800592e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005932:	b29b      	uxth	r3, r3
 8005934:	61bb      	str	r3, [r7, #24]
        break;
 8005936:	e01e      	b.n	8005976 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005938:	f7ff f846 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 800593c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	005a      	lsls	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	441a      	add	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	b29b      	uxth	r3, r3
 8005954:	61bb      	str	r3, [r7, #24]
        break;
 8005956:	e00e      	b.n	8005976 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	61bb      	str	r3, [r7, #24]
        break;
 800596e:	e002      	b.n	8005976 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
        break;
 8005974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b0f      	cmp	r3, #15
 800597a:	d916      	bls.n	80059aa <UART_SetConfig+0x452>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005982:	d212      	bcs.n	80059aa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f023 030f 	bic.w	r3, r3, #15
 800598c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	b29b      	uxth	r3, r3
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	b29a      	uxth	r2, r3
 800599a:	897b      	ldrh	r3, [r7, #10]
 800599c:	4313      	orrs	r3, r2
 800599e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	897a      	ldrh	r2, [r7, #10]
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e070      	b.n	8005a8c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
 80059ae:	e06d      	b.n	8005a8c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80059b0:	7ffb      	ldrb	r3, [r7, #31]
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d859      	bhi.n	8005a6a <UART_SetConfig+0x512>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x464>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059ff 	.word	0x080059ff
 80059c4:	08005a1d 	.word	0x08005a1d
 80059c8:	08005a6b 	.word	0x08005a6b
 80059cc:	08005a35 	.word	0x08005a35
 80059d0:	08005a6b 	.word	0x08005a6b
 80059d4:	08005a6b 	.word	0x08005a6b
 80059d8:	08005a6b 	.word	0x08005a6b
 80059dc:	08005a53 	.word	0x08005a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7ff f8d6 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 80059e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	085a      	lsrs	r2, r3, #1
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	441a      	add	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	61bb      	str	r3, [r7, #24]
        break;
 80059fc:	e038      	b.n	8005a70 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059fe:	f7ff f8db 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8005a02:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	085a      	lsrs	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	441a      	add	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	61bb      	str	r3, [r7, #24]
        break;
 8005a1a:	e029      	b.n	8005a70 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	085a      	lsrs	r2, r3, #1
 8005a22:	4b21      	ldr	r3, [pc, #132]	; (8005aa8 <UART_SetConfig+0x550>)
 8005a24:	4413      	add	r3, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6852      	ldr	r2, [r2, #4]
 8005a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	61bb      	str	r3, [r7, #24]
        break;
 8005a32:	e01d      	b.n	8005a70 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a34:	f7fe ffc8 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8005a38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	085a      	lsrs	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	441a      	add	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	61bb      	str	r3, [r7, #24]
        break;
 8005a50:	e00e      	b.n	8005a70 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	61bb      	str	r3, [r7, #24]
        break;
 8005a68:	e002      	b.n	8005a70 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
        break;
 8005a6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	d908      	bls.n	8005a88 <UART_SetConfig+0x530>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7c:	d204      	bcs.n	8005a88 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	e001      	b.n	8005a8c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	01e84800 	.word	0x01e84800
 8005aa8:	00f42400 	.word	0x00f42400

08005aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01a      	beq.n	8005bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005baa:	d10a      	bne.n	8005bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
  }
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bfe:	f7fd f815 	bl	8002c2c <HAL_GetTick>
 8005c02:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d10e      	bne.n	8005c30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f814 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e00a      	b.n	8005c46 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5e:	e05d      	b.n	8005d1c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	d059      	beq.n	8005d1c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c68:	f7fc ffe0 	bl	8002c2c <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d302      	bcc.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11b      	bne.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e042      	b.n	8005d3c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d02b      	beq.n	8005d1c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd2:	d123      	bne.n	8005d1c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cdc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e00f      	b.n	8005d3c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69da      	ldr	r2, [r3, #28]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4013      	ands	r3, r2
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d092      	beq.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d027      	beq.n	8005dae <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <FMC_SDRAM_Init+0xe0>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d74:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005d7a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005d80:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005d86:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005d8c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005d92:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005d98:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005d9e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e032      	b.n	8005e14 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dba:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005dc4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005dca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <FMC_SDRAM_Init+0xe0>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005de8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005dee:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005df4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005dfa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005e00:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	ffff8000 	.word	0xffff8000

08005e28 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d02e      	beq.n	8005ea0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e4e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005e5e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005e68:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005e72:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005e7c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005e86:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005e90:	4313      	orrs	r3, r2
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	609a      	str	r2, [r3, #8]
 8005e9e:	e039      	b.n	8005f14 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	; (8005f24 <FMC_SDRAM_Timing_Init+0xfc>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ed2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ee2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005eec:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005ef6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f00:	4313      	orrs	r3, r2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	ff0f0fff 	.word	0xff0f0fff

08005f28 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005f40:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005f4a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <__errno>:
 8005f90:	4b01      	ldr	r3, [pc, #4]	; (8005f98 <__errno+0x8>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	2000002c 	.word	0x2000002c

08005f9c <__libc_init_array>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4e0d      	ldr	r6, [pc, #52]	; (8005fd4 <__libc_init_array+0x38>)
 8005fa0:	4c0d      	ldr	r4, [pc, #52]	; (8005fd8 <__libc_init_array+0x3c>)
 8005fa2:	1ba4      	subs	r4, r4, r6
 8005fa4:	10a4      	asrs	r4, r4, #2
 8005fa6:	2500      	movs	r5, #0
 8005fa8:	42a5      	cmp	r5, r4
 8005faa:	d109      	bne.n	8005fc0 <__libc_init_array+0x24>
 8005fac:	4e0b      	ldr	r6, [pc, #44]	; (8005fdc <__libc_init_array+0x40>)
 8005fae:	4c0c      	ldr	r4, [pc, #48]	; (8005fe0 <__libc_init_array+0x44>)
 8005fb0:	f000 ff74 	bl	8006e9c <_init>
 8005fb4:	1ba4      	subs	r4, r4, r6
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	2500      	movs	r5, #0
 8005fba:	42a5      	cmp	r5, r4
 8005fbc:	d105      	bne.n	8005fca <__libc_init_array+0x2e>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fc4:	4798      	blx	r3
 8005fc6:	3501      	adds	r5, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__libc_init_array+0xc>
 8005fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fce:	4798      	blx	r3
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	e7f2      	b.n	8005fba <__libc_init_array+0x1e>
 8005fd4:	08008ac8 	.word	0x08008ac8
 8005fd8:	08008ac8 	.word	0x08008ac8
 8005fdc:	08008ac8 	.word	0x08008ac8
 8005fe0:	08008acc 	.word	0x08008acc

08005fe4 <memcpy>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	1e43      	subs	r3, r0, #1
 8005fe8:	440a      	add	r2, r1
 8005fea:	4291      	cmp	r1, r2
 8005fec:	d100      	bne.n	8005ff0 <memcpy+0xc>
 8005fee:	bd10      	pop	{r4, pc}
 8005ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff8:	e7f7      	b.n	8005fea <memcpy+0x6>

08005ffa <memset>:
 8005ffa:	4402      	add	r2, r0
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d100      	bne.n	8006004 <memset+0xa>
 8006002:	4770      	bx	lr
 8006004:	f803 1b01 	strb.w	r1, [r3], #1
 8006008:	e7f9      	b.n	8005ffe <memset+0x4>
	...

0800600c <iprintf>:
 800600c:	b40f      	push	{r0, r1, r2, r3}
 800600e:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <iprintf+0x2c>)
 8006010:	b513      	push	{r0, r1, r4, lr}
 8006012:	681c      	ldr	r4, [r3, #0]
 8006014:	b124      	cbz	r4, 8006020 <iprintf+0x14>
 8006016:	69a3      	ldr	r3, [r4, #24]
 8006018:	b913      	cbnz	r3, 8006020 <iprintf+0x14>
 800601a:	4620      	mov	r0, r4
 800601c:	f000 fa22 	bl	8006464 <__sinit>
 8006020:	ab05      	add	r3, sp, #20
 8006022:	9a04      	ldr	r2, [sp, #16]
 8006024:	68a1      	ldr	r1, [r4, #8]
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fbdb 	bl	80067e4 <_vfiprintf_r>
 800602e:	b002      	add	sp, #8
 8006030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006034:	b004      	add	sp, #16
 8006036:	4770      	bx	lr
 8006038:	2000002c 	.word	0x2000002c

0800603c <_puts_r>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	460e      	mov	r6, r1
 8006040:	4605      	mov	r5, r0
 8006042:	b118      	cbz	r0, 800604c <_puts_r+0x10>
 8006044:	6983      	ldr	r3, [r0, #24]
 8006046:	b90b      	cbnz	r3, 800604c <_puts_r+0x10>
 8006048:	f000 fa0c 	bl	8006464 <__sinit>
 800604c:	69ab      	ldr	r3, [r5, #24]
 800604e:	68ac      	ldr	r4, [r5, #8]
 8006050:	b913      	cbnz	r3, 8006058 <_puts_r+0x1c>
 8006052:	4628      	mov	r0, r5
 8006054:	f000 fa06 	bl	8006464 <__sinit>
 8006058:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <_puts_r+0xac>)
 800605a:	429c      	cmp	r4, r3
 800605c:	d117      	bne.n	800608e <_puts_r+0x52>
 800605e:	686c      	ldr	r4, [r5, #4]
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	071b      	lsls	r3, r3, #28
 8006064:	d51d      	bpl.n	80060a2 <_puts_r+0x66>
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	b1db      	cbz	r3, 80060a2 <_puts_r+0x66>
 800606a:	3e01      	subs	r6, #1
 800606c:	68a3      	ldr	r3, [r4, #8]
 800606e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006072:	3b01      	subs	r3, #1
 8006074:	60a3      	str	r3, [r4, #8]
 8006076:	b9e9      	cbnz	r1, 80060b4 <_puts_r+0x78>
 8006078:	2b00      	cmp	r3, #0
 800607a:	da2e      	bge.n	80060da <_puts_r+0x9e>
 800607c:	4622      	mov	r2, r4
 800607e:	210a      	movs	r1, #10
 8006080:	4628      	mov	r0, r5
 8006082:	f000 f83f 	bl	8006104 <__swbuf_r>
 8006086:	3001      	adds	r0, #1
 8006088:	d011      	beq.n	80060ae <_puts_r+0x72>
 800608a:	200a      	movs	r0, #10
 800608c:	e011      	b.n	80060b2 <_puts_r+0x76>
 800608e:	4b17      	ldr	r3, [pc, #92]	; (80060ec <_puts_r+0xb0>)
 8006090:	429c      	cmp	r4, r3
 8006092:	d101      	bne.n	8006098 <_puts_r+0x5c>
 8006094:	68ac      	ldr	r4, [r5, #8]
 8006096:	e7e3      	b.n	8006060 <_puts_r+0x24>
 8006098:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <_puts_r+0xb4>)
 800609a:	429c      	cmp	r4, r3
 800609c:	bf08      	it	eq
 800609e:	68ec      	ldreq	r4, [r5, #12]
 80060a0:	e7de      	b.n	8006060 <_puts_r+0x24>
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 f87f 	bl	80061a8 <__swsetup_r>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0dd      	beq.n	800606a <_puts_r+0x2e>
 80060ae:	f04f 30ff 	mov.w	r0, #4294967295
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	da04      	bge.n	80060c2 <_puts_r+0x86>
 80060b8:	69a2      	ldr	r2, [r4, #24]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	dc06      	bgt.n	80060cc <_puts_r+0x90>
 80060be:	290a      	cmp	r1, #10
 80060c0:	d004      	beq.n	80060cc <_puts_r+0x90>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	6022      	str	r2, [r4, #0]
 80060c8:	7019      	strb	r1, [r3, #0]
 80060ca:	e7cf      	b.n	800606c <_puts_r+0x30>
 80060cc:	4622      	mov	r2, r4
 80060ce:	4628      	mov	r0, r5
 80060d0:	f000 f818 	bl	8006104 <__swbuf_r>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d1c9      	bne.n	800606c <_puts_r+0x30>
 80060d8:	e7e9      	b.n	80060ae <_puts_r+0x72>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	200a      	movs	r0, #10
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	6022      	str	r2, [r4, #0]
 80060e2:	7018      	strb	r0, [r3, #0]
 80060e4:	e7e5      	b.n	80060b2 <_puts_r+0x76>
 80060e6:	bf00      	nop
 80060e8:	08008a4c 	.word	0x08008a4c
 80060ec:	08008a6c 	.word	0x08008a6c
 80060f0:	08008a2c 	.word	0x08008a2c

080060f4 <puts>:
 80060f4:	4b02      	ldr	r3, [pc, #8]	; (8006100 <puts+0xc>)
 80060f6:	4601      	mov	r1, r0
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	f7ff bf9f 	b.w	800603c <_puts_r>
 80060fe:	bf00      	nop
 8006100:	2000002c 	.word	0x2000002c

08006104 <__swbuf_r>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	460e      	mov	r6, r1
 8006108:	4614      	mov	r4, r2
 800610a:	4605      	mov	r5, r0
 800610c:	b118      	cbz	r0, 8006116 <__swbuf_r+0x12>
 800610e:	6983      	ldr	r3, [r0, #24]
 8006110:	b90b      	cbnz	r3, 8006116 <__swbuf_r+0x12>
 8006112:	f000 f9a7 	bl	8006464 <__sinit>
 8006116:	4b21      	ldr	r3, [pc, #132]	; (800619c <__swbuf_r+0x98>)
 8006118:	429c      	cmp	r4, r3
 800611a:	d12a      	bne.n	8006172 <__swbuf_r+0x6e>
 800611c:	686c      	ldr	r4, [r5, #4]
 800611e:	69a3      	ldr	r3, [r4, #24]
 8006120:	60a3      	str	r3, [r4, #8]
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	071a      	lsls	r2, r3, #28
 8006126:	d52e      	bpl.n	8006186 <__swbuf_r+0x82>
 8006128:	6923      	ldr	r3, [r4, #16]
 800612a:	b363      	cbz	r3, 8006186 <__swbuf_r+0x82>
 800612c:	6923      	ldr	r3, [r4, #16]
 800612e:	6820      	ldr	r0, [r4, #0]
 8006130:	1ac0      	subs	r0, r0, r3
 8006132:	6963      	ldr	r3, [r4, #20]
 8006134:	b2f6      	uxtb	r6, r6
 8006136:	4283      	cmp	r3, r0
 8006138:	4637      	mov	r7, r6
 800613a:	dc04      	bgt.n	8006146 <__swbuf_r+0x42>
 800613c:	4621      	mov	r1, r4
 800613e:	4628      	mov	r0, r5
 8006140:	f000 f926 	bl	8006390 <_fflush_r>
 8006144:	bb28      	cbnz	r0, 8006192 <__swbuf_r+0x8e>
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	3b01      	subs	r3, #1
 800614a:	60a3      	str	r3, [r4, #8]
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	6022      	str	r2, [r4, #0]
 8006152:	701e      	strb	r6, [r3, #0]
 8006154:	6963      	ldr	r3, [r4, #20]
 8006156:	3001      	adds	r0, #1
 8006158:	4283      	cmp	r3, r0
 800615a:	d004      	beq.n	8006166 <__swbuf_r+0x62>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	07db      	lsls	r3, r3, #31
 8006160:	d519      	bpl.n	8006196 <__swbuf_r+0x92>
 8006162:	2e0a      	cmp	r6, #10
 8006164:	d117      	bne.n	8006196 <__swbuf_r+0x92>
 8006166:	4621      	mov	r1, r4
 8006168:	4628      	mov	r0, r5
 800616a:	f000 f911 	bl	8006390 <_fflush_r>
 800616e:	b190      	cbz	r0, 8006196 <__swbuf_r+0x92>
 8006170:	e00f      	b.n	8006192 <__swbuf_r+0x8e>
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <__swbuf_r+0x9c>)
 8006174:	429c      	cmp	r4, r3
 8006176:	d101      	bne.n	800617c <__swbuf_r+0x78>
 8006178:	68ac      	ldr	r4, [r5, #8]
 800617a:	e7d0      	b.n	800611e <__swbuf_r+0x1a>
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <__swbuf_r+0xa0>)
 800617e:	429c      	cmp	r4, r3
 8006180:	bf08      	it	eq
 8006182:	68ec      	ldreq	r4, [r5, #12]
 8006184:	e7cb      	b.n	800611e <__swbuf_r+0x1a>
 8006186:	4621      	mov	r1, r4
 8006188:	4628      	mov	r0, r5
 800618a:	f000 f80d 	bl	80061a8 <__swsetup_r>
 800618e:	2800      	cmp	r0, #0
 8006190:	d0cc      	beq.n	800612c <__swbuf_r+0x28>
 8006192:	f04f 37ff 	mov.w	r7, #4294967295
 8006196:	4638      	mov	r0, r7
 8006198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800619a:	bf00      	nop
 800619c:	08008a4c 	.word	0x08008a4c
 80061a0:	08008a6c 	.word	0x08008a6c
 80061a4:	08008a2c 	.word	0x08008a2c

080061a8 <__swsetup_r>:
 80061a8:	4b32      	ldr	r3, [pc, #200]	; (8006274 <__swsetup_r+0xcc>)
 80061aa:	b570      	push	{r4, r5, r6, lr}
 80061ac:	681d      	ldr	r5, [r3, #0]
 80061ae:	4606      	mov	r6, r0
 80061b0:	460c      	mov	r4, r1
 80061b2:	b125      	cbz	r5, 80061be <__swsetup_r+0x16>
 80061b4:	69ab      	ldr	r3, [r5, #24]
 80061b6:	b913      	cbnz	r3, 80061be <__swsetup_r+0x16>
 80061b8:	4628      	mov	r0, r5
 80061ba:	f000 f953 	bl	8006464 <__sinit>
 80061be:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <__swsetup_r+0xd0>)
 80061c0:	429c      	cmp	r4, r3
 80061c2:	d10f      	bne.n	80061e4 <__swsetup_r+0x3c>
 80061c4:	686c      	ldr	r4, [r5, #4]
 80061c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	0715      	lsls	r5, r2, #28
 80061ce:	d42c      	bmi.n	800622a <__swsetup_r+0x82>
 80061d0:	06d0      	lsls	r0, r2, #27
 80061d2:	d411      	bmi.n	80061f8 <__swsetup_r+0x50>
 80061d4:	2209      	movs	r2, #9
 80061d6:	6032      	str	r2, [r6, #0]
 80061d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061dc:	81a3      	strh	r3, [r4, #12]
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	e03e      	b.n	8006262 <__swsetup_r+0xba>
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <__swsetup_r+0xd4>)
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d101      	bne.n	80061ee <__swsetup_r+0x46>
 80061ea:	68ac      	ldr	r4, [r5, #8]
 80061ec:	e7eb      	b.n	80061c6 <__swsetup_r+0x1e>
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <__swsetup_r+0xd8>)
 80061f0:	429c      	cmp	r4, r3
 80061f2:	bf08      	it	eq
 80061f4:	68ec      	ldreq	r4, [r5, #12]
 80061f6:	e7e6      	b.n	80061c6 <__swsetup_r+0x1e>
 80061f8:	0751      	lsls	r1, r2, #29
 80061fa:	d512      	bpl.n	8006222 <__swsetup_r+0x7a>
 80061fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061fe:	b141      	cbz	r1, 8006212 <__swsetup_r+0x6a>
 8006200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006204:	4299      	cmp	r1, r3
 8006206:	d002      	beq.n	800620e <__swsetup_r+0x66>
 8006208:	4630      	mov	r0, r6
 800620a:	f000 fa19 	bl	8006640 <_free_r>
 800620e:	2300      	movs	r3, #0
 8006210:	6363      	str	r3, [r4, #52]	; 0x34
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	2300      	movs	r3, #0
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	6923      	ldr	r3, [r4, #16]
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	f043 0308 	orr.w	r3, r3, #8
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	b94b      	cbnz	r3, 8006242 <__swsetup_r+0x9a>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006238:	d003      	beq.n	8006242 <__swsetup_r+0x9a>
 800623a:	4621      	mov	r1, r4
 800623c:	4630      	mov	r0, r6
 800623e:	f000 f9bf 	bl	80065c0 <__smakebuf_r>
 8006242:	89a2      	ldrh	r2, [r4, #12]
 8006244:	f012 0301 	ands.w	r3, r2, #1
 8006248:	d00c      	beq.n	8006264 <__swsetup_r+0xbc>
 800624a:	2300      	movs	r3, #0
 800624c:	60a3      	str	r3, [r4, #8]
 800624e:	6963      	ldr	r3, [r4, #20]
 8006250:	425b      	negs	r3, r3
 8006252:	61a3      	str	r3, [r4, #24]
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	b953      	cbnz	r3, 800626e <__swsetup_r+0xc6>
 8006258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800625c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006260:	d1ba      	bne.n	80061d8 <__swsetup_r+0x30>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	0792      	lsls	r2, r2, #30
 8006266:	bf58      	it	pl
 8006268:	6963      	ldrpl	r3, [r4, #20]
 800626a:	60a3      	str	r3, [r4, #8]
 800626c:	e7f2      	b.n	8006254 <__swsetup_r+0xac>
 800626e:	2000      	movs	r0, #0
 8006270:	e7f7      	b.n	8006262 <__swsetup_r+0xba>
 8006272:	bf00      	nop
 8006274:	2000002c 	.word	0x2000002c
 8006278:	08008a4c 	.word	0x08008a4c
 800627c:	08008a6c 	.word	0x08008a6c
 8006280:	08008a2c 	.word	0x08008a2c

08006284 <__sflush_r>:
 8006284:	898a      	ldrh	r2, [r1, #12]
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	4605      	mov	r5, r0
 800628c:	0710      	lsls	r0, r2, #28
 800628e:	460c      	mov	r4, r1
 8006290:	d458      	bmi.n	8006344 <__sflush_r+0xc0>
 8006292:	684b      	ldr	r3, [r1, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	dc05      	bgt.n	80062a4 <__sflush_r+0x20>
 8006298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	dc02      	bgt.n	80062a4 <__sflush_r+0x20>
 800629e:	2000      	movs	r0, #0
 80062a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062a6:	2e00      	cmp	r6, #0
 80062a8:	d0f9      	beq.n	800629e <__sflush_r+0x1a>
 80062aa:	2300      	movs	r3, #0
 80062ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062b0:	682f      	ldr	r7, [r5, #0]
 80062b2:	6a21      	ldr	r1, [r4, #32]
 80062b4:	602b      	str	r3, [r5, #0]
 80062b6:	d032      	beq.n	800631e <__sflush_r+0x9a>
 80062b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	075a      	lsls	r2, r3, #29
 80062be:	d505      	bpl.n	80062cc <__sflush_r+0x48>
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	1ac0      	subs	r0, r0, r3
 80062c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062c6:	b10b      	cbz	r3, 80062cc <__sflush_r+0x48>
 80062c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062ca:	1ac0      	subs	r0, r0, r3
 80062cc:	2300      	movs	r3, #0
 80062ce:	4602      	mov	r2, r0
 80062d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062d2:	6a21      	ldr	r1, [r4, #32]
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b0      	blx	r6
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	d106      	bne.n	80062ec <__sflush_r+0x68>
 80062de:	6829      	ldr	r1, [r5, #0]
 80062e0:	291d      	cmp	r1, #29
 80062e2:	d848      	bhi.n	8006376 <__sflush_r+0xf2>
 80062e4:	4a29      	ldr	r2, [pc, #164]	; (800638c <__sflush_r+0x108>)
 80062e6:	40ca      	lsrs	r2, r1
 80062e8:	07d6      	lsls	r6, r2, #31
 80062ea:	d544      	bpl.n	8006376 <__sflush_r+0xf2>
 80062ec:	2200      	movs	r2, #0
 80062ee:	6062      	str	r2, [r4, #4]
 80062f0:	04d9      	lsls	r1, r3, #19
 80062f2:	6922      	ldr	r2, [r4, #16]
 80062f4:	6022      	str	r2, [r4, #0]
 80062f6:	d504      	bpl.n	8006302 <__sflush_r+0x7e>
 80062f8:	1c42      	adds	r2, r0, #1
 80062fa:	d101      	bne.n	8006300 <__sflush_r+0x7c>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b903      	cbnz	r3, 8006302 <__sflush_r+0x7e>
 8006300:	6560      	str	r0, [r4, #84]	; 0x54
 8006302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006304:	602f      	str	r7, [r5, #0]
 8006306:	2900      	cmp	r1, #0
 8006308:	d0c9      	beq.n	800629e <__sflush_r+0x1a>
 800630a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800630e:	4299      	cmp	r1, r3
 8006310:	d002      	beq.n	8006318 <__sflush_r+0x94>
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f994 	bl	8006640 <_free_r>
 8006318:	2000      	movs	r0, #0
 800631a:	6360      	str	r0, [r4, #52]	; 0x34
 800631c:	e7c0      	b.n	80062a0 <__sflush_r+0x1c>
 800631e:	2301      	movs	r3, #1
 8006320:	4628      	mov	r0, r5
 8006322:	47b0      	blx	r6
 8006324:	1c41      	adds	r1, r0, #1
 8006326:	d1c8      	bne.n	80062ba <__sflush_r+0x36>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0c5      	beq.n	80062ba <__sflush_r+0x36>
 800632e:	2b1d      	cmp	r3, #29
 8006330:	d001      	beq.n	8006336 <__sflush_r+0xb2>
 8006332:	2b16      	cmp	r3, #22
 8006334:	d101      	bne.n	800633a <__sflush_r+0xb6>
 8006336:	602f      	str	r7, [r5, #0]
 8006338:	e7b1      	b.n	800629e <__sflush_r+0x1a>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	e7ad      	b.n	80062a0 <__sflush_r+0x1c>
 8006344:	690f      	ldr	r7, [r1, #16]
 8006346:	2f00      	cmp	r7, #0
 8006348:	d0a9      	beq.n	800629e <__sflush_r+0x1a>
 800634a:	0793      	lsls	r3, r2, #30
 800634c:	680e      	ldr	r6, [r1, #0]
 800634e:	bf08      	it	eq
 8006350:	694b      	ldreq	r3, [r1, #20]
 8006352:	600f      	str	r7, [r1, #0]
 8006354:	bf18      	it	ne
 8006356:	2300      	movne	r3, #0
 8006358:	eba6 0807 	sub.w	r8, r6, r7
 800635c:	608b      	str	r3, [r1, #8]
 800635e:	f1b8 0f00 	cmp.w	r8, #0
 8006362:	dd9c      	ble.n	800629e <__sflush_r+0x1a>
 8006364:	4643      	mov	r3, r8
 8006366:	463a      	mov	r2, r7
 8006368:	6a21      	ldr	r1, [r4, #32]
 800636a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800636c:	4628      	mov	r0, r5
 800636e:	47b0      	blx	r6
 8006370:	2800      	cmp	r0, #0
 8006372:	dc06      	bgt.n	8006382 <__sflush_r+0xfe>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800637a:	81a3      	strh	r3, [r4, #12]
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	e78e      	b.n	80062a0 <__sflush_r+0x1c>
 8006382:	4407      	add	r7, r0
 8006384:	eba8 0800 	sub.w	r8, r8, r0
 8006388:	e7e9      	b.n	800635e <__sflush_r+0xda>
 800638a:	bf00      	nop
 800638c:	20400001 	.word	0x20400001

08006390 <_fflush_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	690b      	ldr	r3, [r1, #16]
 8006394:	4605      	mov	r5, r0
 8006396:	460c      	mov	r4, r1
 8006398:	b1db      	cbz	r3, 80063d2 <_fflush_r+0x42>
 800639a:	b118      	cbz	r0, 80063a4 <_fflush_r+0x14>
 800639c:	6983      	ldr	r3, [r0, #24]
 800639e:	b90b      	cbnz	r3, 80063a4 <_fflush_r+0x14>
 80063a0:	f000 f860 	bl	8006464 <__sinit>
 80063a4:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <_fflush_r+0x48>)
 80063a6:	429c      	cmp	r4, r3
 80063a8:	d109      	bne.n	80063be <_fflush_r+0x2e>
 80063aa:	686c      	ldr	r4, [r5, #4]
 80063ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b0:	b17b      	cbz	r3, 80063d2 <_fflush_r+0x42>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ba:	f7ff bf63 	b.w	8006284 <__sflush_r>
 80063be:	4b07      	ldr	r3, [pc, #28]	; (80063dc <_fflush_r+0x4c>)
 80063c0:	429c      	cmp	r4, r3
 80063c2:	d101      	bne.n	80063c8 <_fflush_r+0x38>
 80063c4:	68ac      	ldr	r4, [r5, #8]
 80063c6:	e7f1      	b.n	80063ac <_fflush_r+0x1c>
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <_fflush_r+0x50>)
 80063ca:	429c      	cmp	r4, r3
 80063cc:	bf08      	it	eq
 80063ce:	68ec      	ldreq	r4, [r5, #12]
 80063d0:	e7ec      	b.n	80063ac <_fflush_r+0x1c>
 80063d2:	2000      	movs	r0, #0
 80063d4:	bd38      	pop	{r3, r4, r5, pc}
 80063d6:	bf00      	nop
 80063d8:	08008a4c 	.word	0x08008a4c
 80063dc:	08008a6c 	.word	0x08008a6c
 80063e0:	08008a2c 	.word	0x08008a2c

080063e4 <std>:
 80063e4:	2300      	movs	r3, #0
 80063e6:	b510      	push	{r4, lr}
 80063e8:	4604      	mov	r4, r0
 80063ea:	e9c0 3300 	strd	r3, r3, [r0]
 80063ee:	6083      	str	r3, [r0, #8]
 80063f0:	8181      	strh	r1, [r0, #12]
 80063f2:	6643      	str	r3, [r0, #100]	; 0x64
 80063f4:	81c2      	strh	r2, [r0, #14]
 80063f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063fa:	6183      	str	r3, [r0, #24]
 80063fc:	4619      	mov	r1, r3
 80063fe:	2208      	movs	r2, #8
 8006400:	305c      	adds	r0, #92	; 0x5c
 8006402:	f7ff fdfa 	bl	8005ffa <memset>
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <std+0x38>)
 8006408:	6263      	str	r3, [r4, #36]	; 0x24
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <std+0x3c>)
 800640c:	62a3      	str	r3, [r4, #40]	; 0x28
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <std+0x40>)
 8006410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <std+0x44>)
 8006414:	6224      	str	r4, [r4, #32]
 8006416:	6323      	str	r3, [r4, #48]	; 0x30
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	08006d41 	.word	0x08006d41
 8006420:	08006d63 	.word	0x08006d63
 8006424:	08006d9b 	.word	0x08006d9b
 8006428:	08006dbf 	.word	0x08006dbf

0800642c <_cleanup_r>:
 800642c:	4901      	ldr	r1, [pc, #4]	; (8006434 <_cleanup_r+0x8>)
 800642e:	f000 b885 	b.w	800653c <_fwalk_reent>
 8006432:	bf00      	nop
 8006434:	08006391 	.word	0x08006391

08006438 <__sfmoreglue>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	1e4a      	subs	r2, r1, #1
 800643c:	2568      	movs	r5, #104	; 0x68
 800643e:	4355      	muls	r5, r2
 8006440:	460e      	mov	r6, r1
 8006442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006446:	f000 f949 	bl	80066dc <_malloc_r>
 800644a:	4604      	mov	r4, r0
 800644c:	b140      	cbz	r0, 8006460 <__sfmoreglue+0x28>
 800644e:	2100      	movs	r1, #0
 8006450:	e9c0 1600 	strd	r1, r6, [r0]
 8006454:	300c      	adds	r0, #12
 8006456:	60a0      	str	r0, [r4, #8]
 8006458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800645c:	f7ff fdcd 	bl	8005ffa <memset>
 8006460:	4620      	mov	r0, r4
 8006462:	bd70      	pop	{r4, r5, r6, pc}

08006464 <__sinit>:
 8006464:	6983      	ldr	r3, [r0, #24]
 8006466:	b510      	push	{r4, lr}
 8006468:	4604      	mov	r4, r0
 800646a:	bb33      	cbnz	r3, 80064ba <__sinit+0x56>
 800646c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006470:	6503      	str	r3, [r0, #80]	; 0x50
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <__sinit+0x58>)
 8006474:	4a12      	ldr	r2, [pc, #72]	; (80064c0 <__sinit+0x5c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6282      	str	r2, [r0, #40]	; 0x28
 800647a:	4298      	cmp	r0, r3
 800647c:	bf04      	itt	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	6183      	streq	r3, [r0, #24]
 8006482:	f000 f81f 	bl	80064c4 <__sfp>
 8006486:	6060      	str	r0, [r4, #4]
 8006488:	4620      	mov	r0, r4
 800648a:	f000 f81b 	bl	80064c4 <__sfp>
 800648e:	60a0      	str	r0, [r4, #8]
 8006490:	4620      	mov	r0, r4
 8006492:	f000 f817 	bl	80064c4 <__sfp>
 8006496:	2200      	movs	r2, #0
 8006498:	60e0      	str	r0, [r4, #12]
 800649a:	2104      	movs	r1, #4
 800649c:	6860      	ldr	r0, [r4, #4]
 800649e:	f7ff ffa1 	bl	80063e4 <std>
 80064a2:	2201      	movs	r2, #1
 80064a4:	2109      	movs	r1, #9
 80064a6:	68a0      	ldr	r0, [r4, #8]
 80064a8:	f7ff ff9c 	bl	80063e4 <std>
 80064ac:	2202      	movs	r2, #2
 80064ae:	2112      	movs	r1, #18
 80064b0:	68e0      	ldr	r0, [r4, #12]
 80064b2:	f7ff ff97 	bl	80063e4 <std>
 80064b6:	2301      	movs	r3, #1
 80064b8:	61a3      	str	r3, [r4, #24]
 80064ba:	bd10      	pop	{r4, pc}
 80064bc:	08008a28 	.word	0x08008a28
 80064c0:	0800642d 	.word	0x0800642d

080064c4 <__sfp>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <__sfp+0x70>)
 80064c8:	681e      	ldr	r6, [r3, #0]
 80064ca:	69b3      	ldr	r3, [r6, #24]
 80064cc:	4607      	mov	r7, r0
 80064ce:	b913      	cbnz	r3, 80064d6 <__sfp+0x12>
 80064d0:	4630      	mov	r0, r6
 80064d2:	f7ff ffc7 	bl	8006464 <__sinit>
 80064d6:	3648      	adds	r6, #72	; 0x48
 80064d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064dc:	3b01      	subs	r3, #1
 80064de:	d503      	bpl.n	80064e8 <__sfp+0x24>
 80064e0:	6833      	ldr	r3, [r6, #0]
 80064e2:	b133      	cbz	r3, 80064f2 <__sfp+0x2e>
 80064e4:	6836      	ldr	r6, [r6, #0]
 80064e6:	e7f7      	b.n	80064d8 <__sfp+0x14>
 80064e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064ec:	b16d      	cbz	r5, 800650a <__sfp+0x46>
 80064ee:	3468      	adds	r4, #104	; 0x68
 80064f0:	e7f4      	b.n	80064dc <__sfp+0x18>
 80064f2:	2104      	movs	r1, #4
 80064f4:	4638      	mov	r0, r7
 80064f6:	f7ff ff9f 	bl	8006438 <__sfmoreglue>
 80064fa:	6030      	str	r0, [r6, #0]
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d1f1      	bne.n	80064e4 <__sfp+0x20>
 8006500:	230c      	movs	r3, #12
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4604      	mov	r4, r0
 8006506:	4620      	mov	r0, r4
 8006508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800650a:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <__sfp+0x74>)
 800650c:	6665      	str	r5, [r4, #100]	; 0x64
 800650e:	e9c4 5500 	strd	r5, r5, [r4]
 8006512:	60a5      	str	r5, [r4, #8]
 8006514:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006518:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800651c:	2208      	movs	r2, #8
 800651e:	4629      	mov	r1, r5
 8006520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006524:	f7ff fd69 	bl	8005ffa <memset>
 8006528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800652c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006530:	e7e9      	b.n	8006506 <__sfp+0x42>
 8006532:	bf00      	nop
 8006534:	08008a28 	.word	0x08008a28
 8006538:	ffff0001 	.word	0xffff0001

0800653c <_fwalk_reent>:
 800653c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006540:	4680      	mov	r8, r0
 8006542:	4689      	mov	r9, r1
 8006544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006548:	2600      	movs	r6, #0
 800654a:	b914      	cbnz	r4, 8006552 <_fwalk_reent+0x16>
 800654c:	4630      	mov	r0, r6
 800654e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006552:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006556:	3f01      	subs	r7, #1
 8006558:	d501      	bpl.n	800655e <_fwalk_reent+0x22>
 800655a:	6824      	ldr	r4, [r4, #0]
 800655c:	e7f5      	b.n	800654a <_fwalk_reent+0xe>
 800655e:	89ab      	ldrh	r3, [r5, #12]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d907      	bls.n	8006574 <_fwalk_reent+0x38>
 8006564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006568:	3301      	adds	r3, #1
 800656a:	d003      	beq.n	8006574 <_fwalk_reent+0x38>
 800656c:	4629      	mov	r1, r5
 800656e:	4640      	mov	r0, r8
 8006570:	47c8      	blx	r9
 8006572:	4306      	orrs	r6, r0
 8006574:	3568      	adds	r5, #104	; 0x68
 8006576:	e7ee      	b.n	8006556 <_fwalk_reent+0x1a>

08006578 <__swhatbuf_r>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	460e      	mov	r6, r1
 800657c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006580:	2900      	cmp	r1, #0
 8006582:	b096      	sub	sp, #88	; 0x58
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	da07      	bge.n	800659a <__swhatbuf_r+0x22>
 800658a:	2300      	movs	r3, #0
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	89b3      	ldrh	r3, [r6, #12]
 8006590:	061a      	lsls	r2, r3, #24
 8006592:	d410      	bmi.n	80065b6 <__swhatbuf_r+0x3e>
 8006594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006598:	e00e      	b.n	80065b8 <__swhatbuf_r+0x40>
 800659a:	466a      	mov	r2, sp
 800659c:	f000 fc36 	bl	8006e0c <_fstat_r>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	dbf2      	blt.n	800658a <__swhatbuf_r+0x12>
 80065a4:	9a01      	ldr	r2, [sp, #4]
 80065a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065ae:	425a      	negs	r2, r3
 80065b0:	415a      	adcs	r2, r3
 80065b2:	602a      	str	r2, [r5, #0]
 80065b4:	e7ee      	b.n	8006594 <__swhatbuf_r+0x1c>
 80065b6:	2340      	movs	r3, #64	; 0x40
 80065b8:	2000      	movs	r0, #0
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	b016      	add	sp, #88	; 0x58
 80065be:	bd70      	pop	{r4, r5, r6, pc}

080065c0 <__smakebuf_r>:
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065c4:	079d      	lsls	r5, r3, #30
 80065c6:	4606      	mov	r6, r0
 80065c8:	460c      	mov	r4, r1
 80065ca:	d507      	bpl.n	80065dc <__smakebuf_r+0x1c>
 80065cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	2301      	movs	r3, #1
 80065d6:	6163      	str	r3, [r4, #20]
 80065d8:	b002      	add	sp, #8
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	ab01      	add	r3, sp, #4
 80065de:	466a      	mov	r2, sp
 80065e0:	f7ff ffca 	bl	8006578 <__swhatbuf_r>
 80065e4:	9900      	ldr	r1, [sp, #0]
 80065e6:	4605      	mov	r5, r0
 80065e8:	4630      	mov	r0, r6
 80065ea:	f000 f877 	bl	80066dc <_malloc_r>
 80065ee:	b948      	cbnz	r0, 8006604 <__smakebuf_r+0x44>
 80065f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f4:	059a      	lsls	r2, r3, #22
 80065f6:	d4ef      	bmi.n	80065d8 <__smakebuf_r+0x18>
 80065f8:	f023 0303 	bic.w	r3, r3, #3
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	e7e3      	b.n	80065cc <__smakebuf_r+0xc>
 8006604:	4b0d      	ldr	r3, [pc, #52]	; (800663c <__smakebuf_r+0x7c>)
 8006606:	62b3      	str	r3, [r6, #40]	; 0x28
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	6020      	str	r0, [r4, #0]
 800660c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006610:	81a3      	strh	r3, [r4, #12]
 8006612:	9b00      	ldr	r3, [sp, #0]
 8006614:	6163      	str	r3, [r4, #20]
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	6120      	str	r0, [r4, #16]
 800661a:	b15b      	cbz	r3, 8006634 <__smakebuf_r+0x74>
 800661c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006620:	4630      	mov	r0, r6
 8006622:	f000 fc05 	bl	8006e30 <_isatty_r>
 8006626:	b128      	cbz	r0, 8006634 <__smakebuf_r+0x74>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	431d      	orrs	r5, r3
 8006638:	81a5      	strh	r5, [r4, #12]
 800663a:	e7cd      	b.n	80065d8 <__smakebuf_r+0x18>
 800663c:	0800642d 	.word	0x0800642d

08006640 <_free_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4605      	mov	r5, r0
 8006644:	2900      	cmp	r1, #0
 8006646:	d045      	beq.n	80066d4 <_free_r+0x94>
 8006648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800664c:	1f0c      	subs	r4, r1, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfb8      	it	lt
 8006652:	18e4      	addlt	r4, r4, r3
 8006654:	f000 fc0e 	bl	8006e74 <__malloc_lock>
 8006658:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <_free_r+0x98>)
 800665a:	6813      	ldr	r3, [r2, #0]
 800665c:	4610      	mov	r0, r2
 800665e:	b933      	cbnz	r3, 800666e <_free_r+0x2e>
 8006660:	6063      	str	r3, [r4, #4]
 8006662:	6014      	str	r4, [r2, #0]
 8006664:	4628      	mov	r0, r5
 8006666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800666a:	f000 bc04 	b.w	8006e76 <__malloc_unlock>
 800666e:	42a3      	cmp	r3, r4
 8006670:	d90c      	bls.n	800668c <_free_r+0x4c>
 8006672:	6821      	ldr	r1, [r4, #0]
 8006674:	1862      	adds	r2, r4, r1
 8006676:	4293      	cmp	r3, r2
 8006678:	bf04      	itt	eq
 800667a:	681a      	ldreq	r2, [r3, #0]
 800667c:	685b      	ldreq	r3, [r3, #4]
 800667e:	6063      	str	r3, [r4, #4]
 8006680:	bf04      	itt	eq
 8006682:	1852      	addeq	r2, r2, r1
 8006684:	6022      	streq	r2, [r4, #0]
 8006686:	6004      	str	r4, [r0, #0]
 8006688:	e7ec      	b.n	8006664 <_free_r+0x24>
 800668a:	4613      	mov	r3, r2
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	b10a      	cbz	r2, 8006694 <_free_r+0x54>
 8006690:	42a2      	cmp	r2, r4
 8006692:	d9fa      	bls.n	800668a <_free_r+0x4a>
 8006694:	6819      	ldr	r1, [r3, #0]
 8006696:	1858      	adds	r0, r3, r1
 8006698:	42a0      	cmp	r0, r4
 800669a:	d10b      	bne.n	80066b4 <_free_r+0x74>
 800669c:	6820      	ldr	r0, [r4, #0]
 800669e:	4401      	add	r1, r0
 80066a0:	1858      	adds	r0, r3, r1
 80066a2:	4282      	cmp	r2, r0
 80066a4:	6019      	str	r1, [r3, #0]
 80066a6:	d1dd      	bne.n	8006664 <_free_r+0x24>
 80066a8:	6810      	ldr	r0, [r2, #0]
 80066aa:	6852      	ldr	r2, [r2, #4]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	4401      	add	r1, r0
 80066b0:	6019      	str	r1, [r3, #0]
 80066b2:	e7d7      	b.n	8006664 <_free_r+0x24>
 80066b4:	d902      	bls.n	80066bc <_free_r+0x7c>
 80066b6:	230c      	movs	r3, #12
 80066b8:	602b      	str	r3, [r5, #0]
 80066ba:	e7d3      	b.n	8006664 <_free_r+0x24>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	1821      	adds	r1, r4, r0
 80066c0:	428a      	cmp	r2, r1
 80066c2:	bf04      	itt	eq
 80066c4:	6811      	ldreq	r1, [r2, #0]
 80066c6:	6852      	ldreq	r2, [r2, #4]
 80066c8:	6062      	str	r2, [r4, #4]
 80066ca:	bf04      	itt	eq
 80066cc:	1809      	addeq	r1, r1, r0
 80066ce:	6021      	streq	r1, [r4, #0]
 80066d0:	605c      	str	r4, [r3, #4]
 80066d2:	e7c7      	b.n	8006664 <_free_r+0x24>
 80066d4:	bd38      	pop	{r3, r4, r5, pc}
 80066d6:	bf00      	nop
 80066d8:	20000134 	.word	0x20000134

080066dc <_malloc_r>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	1ccd      	adds	r5, r1, #3
 80066e0:	f025 0503 	bic.w	r5, r5, #3
 80066e4:	3508      	adds	r5, #8
 80066e6:	2d0c      	cmp	r5, #12
 80066e8:	bf38      	it	cc
 80066ea:	250c      	movcc	r5, #12
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	4606      	mov	r6, r0
 80066f0:	db01      	blt.n	80066f6 <_malloc_r+0x1a>
 80066f2:	42a9      	cmp	r1, r5
 80066f4:	d903      	bls.n	80066fe <_malloc_r+0x22>
 80066f6:	230c      	movs	r3, #12
 80066f8:	6033      	str	r3, [r6, #0]
 80066fa:	2000      	movs	r0, #0
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	f000 fbb9 	bl	8006e74 <__malloc_lock>
 8006702:	4a21      	ldr	r2, [pc, #132]	; (8006788 <_malloc_r+0xac>)
 8006704:	6814      	ldr	r4, [r2, #0]
 8006706:	4621      	mov	r1, r4
 8006708:	b991      	cbnz	r1, 8006730 <_malloc_r+0x54>
 800670a:	4c20      	ldr	r4, [pc, #128]	; (800678c <_malloc_r+0xb0>)
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	b91b      	cbnz	r3, 8006718 <_malloc_r+0x3c>
 8006710:	4630      	mov	r0, r6
 8006712:	f000 fb05 	bl	8006d20 <_sbrk_r>
 8006716:	6020      	str	r0, [r4, #0]
 8006718:	4629      	mov	r1, r5
 800671a:	4630      	mov	r0, r6
 800671c:	f000 fb00 	bl	8006d20 <_sbrk_r>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d124      	bne.n	800676e <_malloc_r+0x92>
 8006724:	230c      	movs	r3, #12
 8006726:	6033      	str	r3, [r6, #0]
 8006728:	4630      	mov	r0, r6
 800672a:	f000 fba4 	bl	8006e76 <__malloc_unlock>
 800672e:	e7e4      	b.n	80066fa <_malloc_r+0x1e>
 8006730:	680b      	ldr	r3, [r1, #0]
 8006732:	1b5b      	subs	r3, r3, r5
 8006734:	d418      	bmi.n	8006768 <_malloc_r+0x8c>
 8006736:	2b0b      	cmp	r3, #11
 8006738:	d90f      	bls.n	800675a <_malloc_r+0x7e>
 800673a:	600b      	str	r3, [r1, #0]
 800673c:	50cd      	str	r5, [r1, r3]
 800673e:	18cc      	adds	r4, r1, r3
 8006740:	4630      	mov	r0, r6
 8006742:	f000 fb98 	bl	8006e76 <__malloc_unlock>
 8006746:	f104 000b 	add.w	r0, r4, #11
 800674a:	1d23      	adds	r3, r4, #4
 800674c:	f020 0007 	bic.w	r0, r0, #7
 8006750:	1ac3      	subs	r3, r0, r3
 8006752:	d0d3      	beq.n	80066fc <_malloc_r+0x20>
 8006754:	425a      	negs	r2, r3
 8006756:	50e2      	str	r2, [r4, r3]
 8006758:	e7d0      	b.n	80066fc <_malloc_r+0x20>
 800675a:	428c      	cmp	r4, r1
 800675c:	684b      	ldr	r3, [r1, #4]
 800675e:	bf16      	itet	ne
 8006760:	6063      	strne	r3, [r4, #4]
 8006762:	6013      	streq	r3, [r2, #0]
 8006764:	460c      	movne	r4, r1
 8006766:	e7eb      	b.n	8006740 <_malloc_r+0x64>
 8006768:	460c      	mov	r4, r1
 800676a:	6849      	ldr	r1, [r1, #4]
 800676c:	e7cc      	b.n	8006708 <_malloc_r+0x2c>
 800676e:	1cc4      	adds	r4, r0, #3
 8006770:	f024 0403 	bic.w	r4, r4, #3
 8006774:	42a0      	cmp	r0, r4
 8006776:	d005      	beq.n	8006784 <_malloc_r+0xa8>
 8006778:	1a21      	subs	r1, r4, r0
 800677a:	4630      	mov	r0, r6
 800677c:	f000 fad0 	bl	8006d20 <_sbrk_r>
 8006780:	3001      	adds	r0, #1
 8006782:	d0cf      	beq.n	8006724 <_malloc_r+0x48>
 8006784:	6025      	str	r5, [r4, #0]
 8006786:	e7db      	b.n	8006740 <_malloc_r+0x64>
 8006788:	20000134 	.word	0x20000134
 800678c:	20000138 	.word	0x20000138

08006790 <__sfputc_r>:
 8006790:	6893      	ldr	r3, [r2, #8]
 8006792:	3b01      	subs	r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	b410      	push	{r4}
 8006798:	6093      	str	r3, [r2, #8]
 800679a:	da08      	bge.n	80067ae <__sfputc_r+0x1e>
 800679c:	6994      	ldr	r4, [r2, #24]
 800679e:	42a3      	cmp	r3, r4
 80067a0:	db01      	blt.n	80067a6 <__sfputc_r+0x16>
 80067a2:	290a      	cmp	r1, #10
 80067a4:	d103      	bne.n	80067ae <__sfputc_r+0x1e>
 80067a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067aa:	f7ff bcab 	b.w	8006104 <__swbuf_r>
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	1c58      	adds	r0, r3, #1
 80067b2:	6010      	str	r0, [r2, #0]
 80067b4:	7019      	strb	r1, [r3, #0]
 80067b6:	4608      	mov	r0, r1
 80067b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067bc:	4770      	bx	lr

080067be <__sfputs_r>:
 80067be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c0:	4606      	mov	r6, r0
 80067c2:	460f      	mov	r7, r1
 80067c4:	4614      	mov	r4, r2
 80067c6:	18d5      	adds	r5, r2, r3
 80067c8:	42ac      	cmp	r4, r5
 80067ca:	d101      	bne.n	80067d0 <__sfputs_r+0x12>
 80067cc:	2000      	movs	r0, #0
 80067ce:	e007      	b.n	80067e0 <__sfputs_r+0x22>
 80067d0:	463a      	mov	r2, r7
 80067d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ffda 	bl	8006790 <__sfputc_r>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d1f3      	bne.n	80067c8 <__sfputs_r+0xa>
 80067e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067e4 <_vfiprintf_r>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	460c      	mov	r4, r1
 80067ea:	b09d      	sub	sp, #116	; 0x74
 80067ec:	4617      	mov	r7, r2
 80067ee:	461d      	mov	r5, r3
 80067f0:	4606      	mov	r6, r0
 80067f2:	b118      	cbz	r0, 80067fc <_vfiprintf_r+0x18>
 80067f4:	6983      	ldr	r3, [r0, #24]
 80067f6:	b90b      	cbnz	r3, 80067fc <_vfiprintf_r+0x18>
 80067f8:	f7ff fe34 	bl	8006464 <__sinit>
 80067fc:	4b7c      	ldr	r3, [pc, #496]	; (80069f0 <_vfiprintf_r+0x20c>)
 80067fe:	429c      	cmp	r4, r3
 8006800:	d158      	bne.n	80068b4 <_vfiprintf_r+0xd0>
 8006802:	6874      	ldr	r4, [r6, #4]
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	0718      	lsls	r0, r3, #28
 8006808:	d55e      	bpl.n	80068c8 <_vfiprintf_r+0xe4>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d05b      	beq.n	80068c8 <_vfiprintf_r+0xe4>
 8006810:	2300      	movs	r3, #0
 8006812:	9309      	str	r3, [sp, #36]	; 0x24
 8006814:	2320      	movs	r3, #32
 8006816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800681a:	2330      	movs	r3, #48	; 0x30
 800681c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006820:	9503      	str	r5, [sp, #12]
 8006822:	f04f 0b01 	mov.w	fp, #1
 8006826:	46b8      	mov	r8, r7
 8006828:	4645      	mov	r5, r8
 800682a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800682e:	b10b      	cbz	r3, 8006834 <_vfiprintf_r+0x50>
 8006830:	2b25      	cmp	r3, #37	; 0x25
 8006832:	d154      	bne.n	80068de <_vfiprintf_r+0xfa>
 8006834:	ebb8 0a07 	subs.w	sl, r8, r7
 8006838:	d00b      	beq.n	8006852 <_vfiprintf_r+0x6e>
 800683a:	4653      	mov	r3, sl
 800683c:	463a      	mov	r2, r7
 800683e:	4621      	mov	r1, r4
 8006840:	4630      	mov	r0, r6
 8006842:	f7ff ffbc 	bl	80067be <__sfputs_r>
 8006846:	3001      	adds	r0, #1
 8006848:	f000 80c2 	beq.w	80069d0 <_vfiprintf_r+0x1ec>
 800684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684e:	4453      	add	r3, sl
 8006850:	9309      	str	r3, [sp, #36]	; 0x24
 8006852:	f898 3000 	ldrb.w	r3, [r8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80ba 	beq.w	80069d0 <_vfiprintf_r+0x1ec>
 800685c:	2300      	movs	r3, #0
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	9307      	str	r3, [sp, #28]
 800686a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800686e:	931a      	str	r3, [sp, #104]	; 0x68
 8006870:	46a8      	mov	r8, r5
 8006872:	2205      	movs	r2, #5
 8006874:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006878:	485e      	ldr	r0, [pc, #376]	; (80069f4 <_vfiprintf_r+0x210>)
 800687a:	f7f9 fcc9 	bl	8000210 <memchr>
 800687e:	9b04      	ldr	r3, [sp, #16]
 8006880:	bb78      	cbnz	r0, 80068e2 <_vfiprintf_r+0xfe>
 8006882:	06d9      	lsls	r1, r3, #27
 8006884:	bf44      	itt	mi
 8006886:	2220      	movmi	r2, #32
 8006888:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800688c:	071a      	lsls	r2, r3, #28
 800688e:	bf44      	itt	mi
 8006890:	222b      	movmi	r2, #43	; 0x2b
 8006892:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006896:	782a      	ldrb	r2, [r5, #0]
 8006898:	2a2a      	cmp	r2, #42	; 0x2a
 800689a:	d02a      	beq.n	80068f2 <_vfiprintf_r+0x10e>
 800689c:	9a07      	ldr	r2, [sp, #28]
 800689e:	46a8      	mov	r8, r5
 80068a0:	2000      	movs	r0, #0
 80068a2:	250a      	movs	r5, #10
 80068a4:	4641      	mov	r1, r8
 80068a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068aa:	3b30      	subs	r3, #48	; 0x30
 80068ac:	2b09      	cmp	r3, #9
 80068ae:	d969      	bls.n	8006984 <_vfiprintf_r+0x1a0>
 80068b0:	b360      	cbz	r0, 800690c <_vfiprintf_r+0x128>
 80068b2:	e024      	b.n	80068fe <_vfiprintf_r+0x11a>
 80068b4:	4b50      	ldr	r3, [pc, #320]	; (80069f8 <_vfiprintf_r+0x214>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d101      	bne.n	80068be <_vfiprintf_r+0xda>
 80068ba:	68b4      	ldr	r4, [r6, #8]
 80068bc:	e7a2      	b.n	8006804 <_vfiprintf_r+0x20>
 80068be:	4b4f      	ldr	r3, [pc, #316]	; (80069fc <_vfiprintf_r+0x218>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	bf08      	it	eq
 80068c4:	68f4      	ldreq	r4, [r6, #12]
 80068c6:	e79d      	b.n	8006804 <_vfiprintf_r+0x20>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff fc6c 	bl	80061a8 <__swsetup_r>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d09d      	beq.n	8006810 <_vfiprintf_r+0x2c>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	b01d      	add	sp, #116	; 0x74
 80068da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068de:	46a8      	mov	r8, r5
 80068e0:	e7a2      	b.n	8006828 <_vfiprintf_r+0x44>
 80068e2:	4a44      	ldr	r2, [pc, #272]	; (80069f4 <_vfiprintf_r+0x210>)
 80068e4:	1a80      	subs	r0, r0, r2
 80068e6:	fa0b f000 	lsl.w	r0, fp, r0
 80068ea:	4318      	orrs	r0, r3
 80068ec:	9004      	str	r0, [sp, #16]
 80068ee:	4645      	mov	r5, r8
 80068f0:	e7be      	b.n	8006870 <_vfiprintf_r+0x8c>
 80068f2:	9a03      	ldr	r2, [sp, #12]
 80068f4:	1d11      	adds	r1, r2, #4
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	9103      	str	r1, [sp, #12]
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	db01      	blt.n	8006902 <_vfiprintf_r+0x11e>
 80068fe:	9207      	str	r2, [sp, #28]
 8006900:	e004      	b.n	800690c <_vfiprintf_r+0x128>
 8006902:	4252      	negs	r2, r2
 8006904:	f043 0302 	orr.w	r3, r3, #2
 8006908:	9207      	str	r2, [sp, #28]
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	f898 3000 	ldrb.w	r3, [r8]
 8006910:	2b2e      	cmp	r3, #46	; 0x2e
 8006912:	d10e      	bne.n	8006932 <_vfiprintf_r+0x14e>
 8006914:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006918:	2b2a      	cmp	r3, #42	; 0x2a
 800691a:	d138      	bne.n	800698e <_vfiprintf_r+0x1aa>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	9203      	str	r2, [sp, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	bfb8      	it	lt
 8006928:	f04f 33ff 	movlt.w	r3, #4294967295
 800692c:	f108 0802 	add.w	r8, r8, #2
 8006930:	9305      	str	r3, [sp, #20]
 8006932:	4d33      	ldr	r5, [pc, #204]	; (8006a00 <_vfiprintf_r+0x21c>)
 8006934:	f898 1000 	ldrb.w	r1, [r8]
 8006938:	2203      	movs	r2, #3
 800693a:	4628      	mov	r0, r5
 800693c:	f7f9 fc68 	bl	8000210 <memchr>
 8006940:	b140      	cbz	r0, 8006954 <_vfiprintf_r+0x170>
 8006942:	2340      	movs	r3, #64	; 0x40
 8006944:	1b40      	subs	r0, r0, r5
 8006946:	fa03 f000 	lsl.w	r0, r3, r0
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	4303      	orrs	r3, r0
 800694e:	f108 0801 	add.w	r8, r8, #1
 8006952:	9304      	str	r3, [sp, #16]
 8006954:	f898 1000 	ldrb.w	r1, [r8]
 8006958:	482a      	ldr	r0, [pc, #168]	; (8006a04 <_vfiprintf_r+0x220>)
 800695a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800695e:	2206      	movs	r2, #6
 8006960:	f108 0701 	add.w	r7, r8, #1
 8006964:	f7f9 fc54 	bl	8000210 <memchr>
 8006968:	2800      	cmp	r0, #0
 800696a:	d037      	beq.n	80069dc <_vfiprintf_r+0x1f8>
 800696c:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <_vfiprintf_r+0x224>)
 800696e:	bb1b      	cbnz	r3, 80069b8 <_vfiprintf_r+0x1d4>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	3307      	adds	r3, #7
 8006974:	f023 0307 	bic.w	r3, r3, #7
 8006978:	3308      	adds	r3, #8
 800697a:	9303      	str	r3, [sp, #12]
 800697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697e:	444b      	add	r3, r9
 8006980:	9309      	str	r3, [sp, #36]	; 0x24
 8006982:	e750      	b.n	8006826 <_vfiprintf_r+0x42>
 8006984:	fb05 3202 	mla	r2, r5, r2, r3
 8006988:	2001      	movs	r0, #1
 800698a:	4688      	mov	r8, r1
 800698c:	e78a      	b.n	80068a4 <_vfiprintf_r+0xc0>
 800698e:	2300      	movs	r3, #0
 8006990:	f108 0801 	add.w	r8, r8, #1
 8006994:	9305      	str	r3, [sp, #20]
 8006996:	4619      	mov	r1, r3
 8006998:	250a      	movs	r5, #10
 800699a:	4640      	mov	r0, r8
 800699c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a0:	3a30      	subs	r2, #48	; 0x30
 80069a2:	2a09      	cmp	r2, #9
 80069a4:	d903      	bls.n	80069ae <_vfiprintf_r+0x1ca>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0c3      	beq.n	8006932 <_vfiprintf_r+0x14e>
 80069aa:	9105      	str	r1, [sp, #20]
 80069ac:	e7c1      	b.n	8006932 <_vfiprintf_r+0x14e>
 80069ae:	fb05 2101 	mla	r1, r5, r1, r2
 80069b2:	2301      	movs	r3, #1
 80069b4:	4680      	mov	r8, r0
 80069b6:	e7f0      	b.n	800699a <_vfiprintf_r+0x1b6>
 80069b8:	ab03      	add	r3, sp, #12
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	4622      	mov	r2, r4
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <_vfiprintf_r+0x228>)
 80069c0:	a904      	add	r1, sp, #16
 80069c2:	4630      	mov	r0, r6
 80069c4:	f3af 8000 	nop.w
 80069c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80069cc:	4681      	mov	r9, r0
 80069ce:	d1d5      	bne.n	800697c <_vfiprintf_r+0x198>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	065b      	lsls	r3, r3, #25
 80069d4:	f53f af7e 	bmi.w	80068d4 <_vfiprintf_r+0xf0>
 80069d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069da:	e77d      	b.n	80068d8 <_vfiprintf_r+0xf4>
 80069dc:	ab03      	add	r3, sp, #12
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	4622      	mov	r2, r4
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <_vfiprintf_r+0x228>)
 80069e4:	a904      	add	r1, sp, #16
 80069e6:	4630      	mov	r0, r6
 80069e8:	f000 f888 	bl	8006afc <_printf_i>
 80069ec:	e7ec      	b.n	80069c8 <_vfiprintf_r+0x1e4>
 80069ee:	bf00      	nop
 80069f0:	08008a4c 	.word	0x08008a4c
 80069f4:	08008a8c 	.word	0x08008a8c
 80069f8:	08008a6c 	.word	0x08008a6c
 80069fc:	08008a2c 	.word	0x08008a2c
 8006a00:	08008a92 	.word	0x08008a92
 8006a04:	08008a96 	.word	0x08008a96
 8006a08:	00000000 	.word	0x00000000
 8006a0c:	080067bf 	.word	0x080067bf

08006a10 <_printf_common>:
 8006a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	4691      	mov	r9, r2
 8006a16:	461f      	mov	r7, r3
 8006a18:	688a      	ldr	r2, [r1, #8]
 8006a1a:	690b      	ldr	r3, [r1, #16]
 8006a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a20:	4293      	cmp	r3, r2
 8006a22:	bfb8      	it	lt
 8006a24:	4613      	movlt	r3, r2
 8006a26:	f8c9 3000 	str.w	r3, [r9]
 8006a2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460c      	mov	r4, r1
 8006a32:	b112      	cbz	r2, 8006a3a <_printf_common+0x2a>
 8006a34:	3301      	adds	r3, #1
 8006a36:	f8c9 3000 	str.w	r3, [r9]
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	0699      	lsls	r1, r3, #26
 8006a3e:	bf42      	ittt	mi
 8006a40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a44:	3302      	addmi	r3, #2
 8006a46:	f8c9 3000 	strmi.w	r3, [r9]
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	f015 0506 	ands.w	r5, r5, #6
 8006a50:	d107      	bne.n	8006a62 <_printf_common+0x52>
 8006a52:	f104 0a19 	add.w	sl, r4, #25
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	f8d9 2000 	ldr.w	r2, [r9]
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	42ab      	cmp	r3, r5
 8006a60:	dc28      	bgt.n	8006ab4 <_printf_common+0xa4>
 8006a62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	3300      	adds	r3, #0
 8006a6a:	bf18      	it	ne
 8006a6c:	2301      	movne	r3, #1
 8006a6e:	0692      	lsls	r2, r2, #26
 8006a70:	d42d      	bmi.n	8006ace <_printf_common+0xbe>
 8006a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a76:	4639      	mov	r1, r7
 8006a78:	4630      	mov	r0, r6
 8006a7a:	47c0      	blx	r8
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d020      	beq.n	8006ac2 <_printf_common+0xb2>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	68e5      	ldr	r5, [r4, #12]
 8006a84:	f8d9 2000 	ldr.w	r2, [r9]
 8006a88:	f003 0306 	and.w	r3, r3, #6
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	bf08      	it	eq
 8006a90:	1aad      	subeq	r5, r5, r2
 8006a92:	68a3      	ldr	r3, [r4, #8]
 8006a94:	6922      	ldr	r2, [r4, #16]
 8006a96:	bf0c      	ite	eq
 8006a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a9c:	2500      	movne	r5, #0
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	bfc4      	itt	gt
 8006aa2:	1a9b      	subgt	r3, r3, r2
 8006aa4:	18ed      	addgt	r5, r5, r3
 8006aa6:	f04f 0900 	mov.w	r9, #0
 8006aaa:	341a      	adds	r4, #26
 8006aac:	454d      	cmp	r5, r9
 8006aae:	d11a      	bne.n	8006ae6 <_printf_common+0xd6>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e008      	b.n	8006ac6 <_printf_common+0xb6>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	4639      	mov	r1, r7
 8006aba:	4630      	mov	r0, r6
 8006abc:	47c0      	blx	r8
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d103      	bne.n	8006aca <_printf_common+0xba>
 8006ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aca:	3501      	adds	r5, #1
 8006acc:	e7c3      	b.n	8006a56 <_printf_common+0x46>
 8006ace:	18e1      	adds	r1, r4, r3
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	2030      	movs	r0, #48	; 0x30
 8006ad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ad8:	4422      	add	r2, r4
 8006ada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ade:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ae2:	3302      	adds	r3, #2
 8006ae4:	e7c5      	b.n	8006a72 <_printf_common+0x62>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4622      	mov	r2, r4
 8006aea:	4639      	mov	r1, r7
 8006aec:	4630      	mov	r0, r6
 8006aee:	47c0      	blx	r8
 8006af0:	3001      	adds	r0, #1
 8006af2:	d0e6      	beq.n	8006ac2 <_printf_common+0xb2>
 8006af4:	f109 0901 	add.w	r9, r9, #1
 8006af8:	e7d8      	b.n	8006aac <_printf_common+0x9c>
	...

08006afc <_printf_i>:
 8006afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b04:	460c      	mov	r4, r1
 8006b06:	7e09      	ldrb	r1, [r1, #24]
 8006b08:	b085      	sub	sp, #20
 8006b0a:	296e      	cmp	r1, #110	; 0x6e
 8006b0c:	4617      	mov	r7, r2
 8006b0e:	4606      	mov	r6, r0
 8006b10:	4698      	mov	r8, r3
 8006b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b14:	f000 80b3 	beq.w	8006c7e <_printf_i+0x182>
 8006b18:	d822      	bhi.n	8006b60 <_printf_i+0x64>
 8006b1a:	2963      	cmp	r1, #99	; 0x63
 8006b1c:	d036      	beq.n	8006b8c <_printf_i+0x90>
 8006b1e:	d80a      	bhi.n	8006b36 <_printf_i+0x3a>
 8006b20:	2900      	cmp	r1, #0
 8006b22:	f000 80b9 	beq.w	8006c98 <_printf_i+0x19c>
 8006b26:	2958      	cmp	r1, #88	; 0x58
 8006b28:	f000 8083 	beq.w	8006c32 <_printf_i+0x136>
 8006b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b34:	e032      	b.n	8006b9c <_printf_i+0xa0>
 8006b36:	2964      	cmp	r1, #100	; 0x64
 8006b38:	d001      	beq.n	8006b3e <_printf_i+0x42>
 8006b3a:	2969      	cmp	r1, #105	; 0x69
 8006b3c:	d1f6      	bne.n	8006b2c <_printf_i+0x30>
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	6813      	ldr	r3, [r2, #0]
 8006b42:	0605      	lsls	r5, r0, #24
 8006b44:	f103 0104 	add.w	r1, r3, #4
 8006b48:	d52a      	bpl.n	8006ba0 <_printf_i+0xa4>
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da03      	bge.n	8006b5a <_printf_i+0x5e>
 8006b52:	222d      	movs	r2, #45	; 0x2d
 8006b54:	425b      	negs	r3, r3
 8006b56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b5a:	486f      	ldr	r0, [pc, #444]	; (8006d18 <_printf_i+0x21c>)
 8006b5c:	220a      	movs	r2, #10
 8006b5e:	e039      	b.n	8006bd4 <_printf_i+0xd8>
 8006b60:	2973      	cmp	r1, #115	; 0x73
 8006b62:	f000 809d 	beq.w	8006ca0 <_printf_i+0x1a4>
 8006b66:	d808      	bhi.n	8006b7a <_printf_i+0x7e>
 8006b68:	296f      	cmp	r1, #111	; 0x6f
 8006b6a:	d020      	beq.n	8006bae <_printf_i+0xb2>
 8006b6c:	2970      	cmp	r1, #112	; 0x70
 8006b6e:	d1dd      	bne.n	8006b2c <_printf_i+0x30>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	f043 0320 	orr.w	r3, r3, #32
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	e003      	b.n	8006b82 <_printf_i+0x86>
 8006b7a:	2975      	cmp	r1, #117	; 0x75
 8006b7c:	d017      	beq.n	8006bae <_printf_i+0xb2>
 8006b7e:	2978      	cmp	r1, #120	; 0x78
 8006b80:	d1d4      	bne.n	8006b2c <_printf_i+0x30>
 8006b82:	2378      	movs	r3, #120	; 0x78
 8006b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b88:	4864      	ldr	r0, [pc, #400]	; (8006d1c <_printf_i+0x220>)
 8006b8a:	e055      	b.n	8006c38 <_printf_i+0x13c>
 8006b8c:	6813      	ldr	r3, [r2, #0]
 8006b8e:	1d19      	adds	r1, r3, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e08c      	b.n	8006cba <_printf_i+0x1be>
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6011      	str	r1, [r2, #0]
 8006ba4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ba8:	bf18      	it	ne
 8006baa:	b21b      	sxthne	r3, r3
 8006bac:	e7cf      	b.n	8006b4e <_printf_i+0x52>
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	1d18      	adds	r0, r3, #4
 8006bb4:	6010      	str	r0, [r2, #0]
 8006bb6:	0628      	lsls	r0, r5, #24
 8006bb8:	d501      	bpl.n	8006bbe <_printf_i+0xc2>
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	e002      	b.n	8006bc4 <_printf_i+0xc8>
 8006bbe:	0668      	lsls	r0, r5, #25
 8006bc0:	d5fb      	bpl.n	8006bba <_printf_i+0xbe>
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	4854      	ldr	r0, [pc, #336]	; (8006d18 <_printf_i+0x21c>)
 8006bc6:	296f      	cmp	r1, #111	; 0x6f
 8006bc8:	bf14      	ite	ne
 8006bca:	220a      	movne	r2, #10
 8006bcc:	2208      	moveq	r2, #8
 8006bce:	2100      	movs	r1, #0
 8006bd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bd4:	6865      	ldr	r5, [r4, #4]
 8006bd6:	60a5      	str	r5, [r4, #8]
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	f2c0 8095 	blt.w	8006d08 <_printf_i+0x20c>
 8006bde:	6821      	ldr	r1, [r4, #0]
 8006be0:	f021 0104 	bic.w	r1, r1, #4
 8006be4:	6021      	str	r1, [r4, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d13d      	bne.n	8006c66 <_printf_i+0x16a>
 8006bea:	2d00      	cmp	r5, #0
 8006bec:	f040 808e 	bne.w	8006d0c <_printf_i+0x210>
 8006bf0:	4665      	mov	r5, ip
 8006bf2:	2a08      	cmp	r2, #8
 8006bf4:	d10b      	bne.n	8006c0e <_printf_i+0x112>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	07db      	lsls	r3, r3, #31
 8006bfa:	d508      	bpl.n	8006c0e <_printf_i+0x112>
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	bfde      	ittt	le
 8006c04:	2330      	movle	r3, #48	; 0x30
 8006c06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c0e:	ebac 0305 	sub.w	r3, ip, r5
 8006c12:	6123      	str	r3, [r4, #16]
 8006c14:	f8cd 8000 	str.w	r8, [sp]
 8006c18:	463b      	mov	r3, r7
 8006c1a:	aa03      	add	r2, sp, #12
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f7ff fef6 	bl	8006a10 <_printf_common>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d14d      	bne.n	8006cc4 <_printf_i+0x1c8>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	b005      	add	sp, #20
 8006c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c32:	4839      	ldr	r0, [pc, #228]	; (8006d18 <_printf_i+0x21c>)
 8006c34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c38:	6813      	ldr	r3, [r2, #0]
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	1d1d      	adds	r5, r3, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6015      	str	r5, [r2, #0]
 8006c42:	060a      	lsls	r2, r1, #24
 8006c44:	d50b      	bpl.n	8006c5e <_printf_i+0x162>
 8006c46:	07ca      	lsls	r2, r1, #31
 8006c48:	bf44      	itt	mi
 8006c4a:	f041 0120 	orrmi.w	r1, r1, #32
 8006c4e:	6021      	strmi	r1, [r4, #0]
 8006c50:	b91b      	cbnz	r3, 8006c5a <_printf_i+0x15e>
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	f022 0220 	bic.w	r2, r2, #32
 8006c58:	6022      	str	r2, [r4, #0]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	e7b7      	b.n	8006bce <_printf_i+0xd2>
 8006c5e:	064d      	lsls	r5, r1, #25
 8006c60:	bf48      	it	mi
 8006c62:	b29b      	uxthmi	r3, r3
 8006c64:	e7ef      	b.n	8006c46 <_printf_i+0x14a>
 8006c66:	4665      	mov	r5, ip
 8006c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c6c:	fb02 3311 	mls	r3, r2, r1, r3
 8006c70:	5cc3      	ldrb	r3, [r0, r3]
 8006c72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c76:	460b      	mov	r3, r1
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d1f5      	bne.n	8006c68 <_printf_i+0x16c>
 8006c7c:	e7b9      	b.n	8006bf2 <_printf_i+0xf6>
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	6825      	ldr	r5, [r4, #0]
 8006c82:	6961      	ldr	r1, [r4, #20]
 8006c84:	1d18      	adds	r0, r3, #4
 8006c86:	6010      	str	r0, [r2, #0]
 8006c88:	0628      	lsls	r0, r5, #24
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	d501      	bpl.n	8006c92 <_printf_i+0x196>
 8006c8e:	6019      	str	r1, [r3, #0]
 8006c90:	e002      	b.n	8006c98 <_printf_i+0x19c>
 8006c92:	066a      	lsls	r2, r5, #25
 8006c94:	d5fb      	bpl.n	8006c8e <_printf_i+0x192>
 8006c96:	8019      	strh	r1, [r3, #0]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	4665      	mov	r5, ip
 8006c9e:	e7b9      	b.n	8006c14 <_printf_i+0x118>
 8006ca0:	6813      	ldr	r3, [r2, #0]
 8006ca2:	1d19      	adds	r1, r3, #4
 8006ca4:	6011      	str	r1, [r2, #0]
 8006ca6:	681d      	ldr	r5, [r3, #0]
 8006ca8:	6862      	ldr	r2, [r4, #4]
 8006caa:	2100      	movs	r1, #0
 8006cac:	4628      	mov	r0, r5
 8006cae:	f7f9 faaf 	bl	8000210 <memchr>
 8006cb2:	b108      	cbz	r0, 8006cb8 <_printf_i+0x1bc>
 8006cb4:	1b40      	subs	r0, r0, r5
 8006cb6:	6060      	str	r0, [r4, #4]
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc2:	e7a7      	b.n	8006c14 <_printf_i+0x118>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4639      	mov	r1, r7
 8006cca:	4630      	mov	r0, r6
 8006ccc:	47c0      	blx	r8
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d0aa      	beq.n	8006c28 <_printf_i+0x12c>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	079b      	lsls	r3, r3, #30
 8006cd6:	d413      	bmi.n	8006d00 <_printf_i+0x204>
 8006cd8:	68e0      	ldr	r0, [r4, #12]
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	4298      	cmp	r0, r3
 8006cde:	bfb8      	it	lt
 8006ce0:	4618      	movlt	r0, r3
 8006ce2:	e7a3      	b.n	8006c2c <_printf_i+0x130>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	464a      	mov	r2, r9
 8006ce8:	4639      	mov	r1, r7
 8006cea:	4630      	mov	r0, r6
 8006cec:	47c0      	blx	r8
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d09a      	beq.n	8006c28 <_printf_i+0x12c>
 8006cf2:	3501      	adds	r5, #1
 8006cf4:	68e3      	ldr	r3, [r4, #12]
 8006cf6:	9a03      	ldr	r2, [sp, #12]
 8006cf8:	1a9b      	subs	r3, r3, r2
 8006cfa:	42ab      	cmp	r3, r5
 8006cfc:	dcf2      	bgt.n	8006ce4 <_printf_i+0x1e8>
 8006cfe:	e7eb      	b.n	8006cd8 <_printf_i+0x1dc>
 8006d00:	2500      	movs	r5, #0
 8006d02:	f104 0919 	add.w	r9, r4, #25
 8006d06:	e7f5      	b.n	8006cf4 <_printf_i+0x1f8>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1ac      	bne.n	8006c66 <_printf_i+0x16a>
 8006d0c:	7803      	ldrb	r3, [r0, #0]
 8006d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d16:	e76c      	b.n	8006bf2 <_printf_i+0xf6>
 8006d18:	08008a9d 	.word	0x08008a9d
 8006d1c:	08008aae 	.word	0x08008aae

08006d20 <_sbrk_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4c06      	ldr	r4, [pc, #24]	; (8006d3c <_sbrk_r+0x1c>)
 8006d24:	2300      	movs	r3, #0
 8006d26:	4605      	mov	r5, r0
 8006d28:	4608      	mov	r0, r1
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	f7fb fe4e 	bl	80029cc <_sbrk>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_sbrk_r+0x1a>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_sbrk_r+0x1a>
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	200003b0 	.word	0x200003b0

08006d40 <__sread>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	460c      	mov	r4, r1
 8006d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d48:	f000 f896 	bl	8006e78 <_read_r>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	bfab      	itete	ge
 8006d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d52:	89a3      	ldrhlt	r3, [r4, #12]
 8006d54:	181b      	addge	r3, r3, r0
 8006d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d5a:	bfac      	ite	ge
 8006d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d5e:	81a3      	strhlt	r3, [r4, #12]
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <__swrite>:
 8006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	461f      	mov	r7, r3
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	05db      	lsls	r3, r3, #23
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	4616      	mov	r6, r2
 8006d72:	d505      	bpl.n	8006d80 <__swrite+0x1e>
 8006d74:	2302      	movs	r3, #2
 8006d76:	2200      	movs	r2, #0
 8006d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7c:	f000 f868 	bl	8006e50 <_lseek_r>
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	463b      	mov	r3, r7
 8006d90:	4628      	mov	r0, r5
 8006d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d96:	f000 b817 	b.w	8006dc8 <_write_r>

08006d9a <__sseek>:
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da2:	f000 f855 	bl	8006e50 <_lseek_r>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	bf15      	itete	ne
 8006dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006db6:	81a3      	strheq	r3, [r4, #12]
 8006db8:	bf18      	it	ne
 8006dba:	81a3      	strhne	r3, [r4, #12]
 8006dbc:	bd10      	pop	{r4, pc}

08006dbe <__sclose>:
 8006dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc2:	f000 b813 	b.w	8006dec <_close_r>
	...

08006dc8 <_write_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4c07      	ldr	r4, [pc, #28]	; (8006de8 <_write_r+0x20>)
 8006dcc:	4605      	mov	r5, r0
 8006dce:	4608      	mov	r0, r1
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	6022      	str	r2, [r4, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f7fb fda8 	bl	800292c <_write>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_write_r+0x1e>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_write_r+0x1e>
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	200003b0 	.word	0x200003b0

08006dec <_close_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4c06      	ldr	r4, [pc, #24]	; (8006e08 <_close_r+0x1c>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4605      	mov	r5, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	f7fb fdb4 	bl	8002964 <_close>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_close_r+0x1a>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_close_r+0x1a>
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	200003b0 	.word	0x200003b0

08006e0c <_fstat_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4c07      	ldr	r4, [pc, #28]	; (8006e2c <_fstat_r+0x20>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	4605      	mov	r5, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	f7fb fdaf 	bl	800297c <_fstat>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d102      	bne.n	8006e28 <_fstat_r+0x1c>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	b103      	cbz	r3, 8006e28 <_fstat_r+0x1c>
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	bd38      	pop	{r3, r4, r5, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200003b0 	.word	0x200003b0

08006e30 <_isatty_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4c06      	ldr	r4, [pc, #24]	; (8006e4c <_isatty_r+0x1c>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4605      	mov	r5, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	f7fb fdae 	bl	800299c <_isatty>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_isatty_r+0x1a>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_isatty_r+0x1a>
 8006e48:	602b      	str	r3, [r5, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	200003b0 	.word	0x200003b0

08006e50 <_lseek_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4c07      	ldr	r4, [pc, #28]	; (8006e70 <_lseek_r+0x20>)
 8006e54:	4605      	mov	r5, r0
 8006e56:	4608      	mov	r0, r1
 8006e58:	4611      	mov	r1, r2
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f7fb fda7 	bl	80029b2 <_lseek>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_lseek_r+0x1e>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_lseek_r+0x1e>
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	200003b0 	.word	0x200003b0

08006e74 <__malloc_lock>:
 8006e74:	4770      	bx	lr

08006e76 <__malloc_unlock>:
 8006e76:	4770      	bx	lr

08006e78 <_read_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4c07      	ldr	r4, [pc, #28]	; (8006e98 <_read_r+0x20>)
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	4608      	mov	r0, r1
 8006e80:	4611      	mov	r1, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f7fb fd33 	bl	80028f2 <_read>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_read_r+0x1e>
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_read_r+0x1e>
 8006e94:	602b      	str	r3, [r5, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	200003b0 	.word	0x200003b0

08006e9c <_init>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	bf00      	nop
 8006ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea2:	bc08      	pop	{r3}
 8006ea4:	469e      	mov	lr, r3
 8006ea6:	4770      	bx	lr

08006ea8 <_fini>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr
